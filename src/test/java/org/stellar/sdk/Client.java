// This file was generated by stellar_contract_bindings v0.3.0b0 and stellar_sdk v12.1.0.
package org.stellar.sdk;

// https://mvnrepository.com/artifact/org.projectlombok/lombok

import java.math.BigInteger;
import java.util.*;
import org.stellar.sdk.contract.AssembledTransaction;
import org.stellar.sdk.contract.ContractClient;
import org.stellar.sdk.scval.Scv;

public class Client extends ContractClient {

  /**
   * Creates a new {@link Client} with the given contract ID, RPC URL, and network.
   *
   * @param contractId The contract ID to interact with.
   * @param rpcUrl The RPC URL of the Soroban server.
   * @param network The network to interact with.
   */
  public Client(String contractId, String rpcUrl, Network network) {
    super(contractId, rpcUrl, network);
  }

  public AssembledTransaction<BigInteger> allowance(
      Address from, Address spender, String source, KeyPair signer, int baseFee) {
    return allowance(from, spender, source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<BigInteger> allowance(
      Address from,
      Address spender,
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "allowance",
        Arrays.asList(Scv.toAddress(from), Scv.toAddress(spender)),
        source,
        signer,
        v -> Scv.fromInt128(v),
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<Boolean> authorized(
      Address id, String source, KeyPair signer, int baseFee) {
    return authorized(id, source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<Boolean> authorized(
      Address id,
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "authorized",
        Arrays.asList(Scv.toAddress(id)),
        source,
        signer,
        v -> Scv.fromBoolean(v),
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<Void> approve(
      Address from,
      Address spender,
      BigInteger amount,
      Long expirationLedger,
      String source,
      KeyPair signer,
      int baseFee) {
    return approve(
        from, spender, amount, expirationLedger, source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<Void> approve(
      Address from,
      Address spender,
      BigInteger amount,
      Long expirationLedger,
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "approve",
        Arrays.asList(
            Scv.toAddress(from),
            Scv.toAddress(spender),
            Scv.toInt128(amount),
            Scv.toUint32(expirationLedger)),
        source,
        signer,
        v -> null,
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<BigInteger> balance(
      Address id, String source, KeyPair signer, int baseFee) {
    return balance(id, source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<BigInteger> balance(
      Address id,
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "balance",
        Arrays.asList(Scv.toAddress(id)),
        source,
        signer,
        v -> Scv.fromInt128(v),
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<Void> burn(
      Address from, BigInteger amount, String source, KeyPair signer, int baseFee) {
    return burn(from, amount, source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<Void> burn(
      Address from,
      BigInteger amount,
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "burn",
        Arrays.asList(Scv.toAddress(from), Scv.toInt128(amount)),
        source,
        signer,
        v -> null,
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<Void> burnFrom(
      Address spender,
      Address from,
      BigInteger amount,
      String source,
      KeyPair signer,
      int baseFee) {
    return burnFrom(spender, from, amount, source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<Void> burnFrom(
      Address spender,
      Address from,
      BigInteger amount,
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "burn_from",
        Arrays.asList(Scv.toAddress(spender), Scv.toAddress(from), Scv.toInt128(amount)),
        source,
        signer,
        v -> null,
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<Void> clawback(
      Address from, BigInteger amount, String source, KeyPair signer, int baseFee) {
    return clawback(from, amount, source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<Void> clawback(
      Address from,
      BigInteger amount,
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "clawback",
        Arrays.asList(Scv.toAddress(from), Scv.toInt128(amount)),
        source,
        signer,
        v -> null,
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<Long> decimals(String source, KeyPair signer, int baseFee) {
    return decimals(source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<Long> decimals(
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "decimals",
        Arrays.asList(),
        source,
        signer,
        v -> Scv.fromUint32(v),
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<Void> mint(
      Address to, BigInteger amount, String source, KeyPair signer, int baseFee) {
    return mint(to, amount, source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<Void> mint(
      Address to,
      BigInteger amount,
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "mint",
        Arrays.asList(Scv.toAddress(to), Scv.toInt128(amount)),
        source,
        signer,
        v -> null,
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<byte[]> name(String source, KeyPair signer, int baseFee) {
    return name(source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<byte[]> name(
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "name",
        Arrays.asList(),
        source,
        signer,
        v -> Scv.fromString(v),
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<Void> setAdmin(
      Address newAdmin, String source, KeyPair signer, int baseFee) {
    return setAdmin(newAdmin, source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<Void> setAdmin(
      Address newAdmin,
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "set_admin",
        Arrays.asList(Scv.toAddress(newAdmin)),
        source,
        signer,
        v -> null,
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<Address> admin(String source, KeyPair signer, int baseFee) {
    return admin(source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<Address> admin(
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "admin",
        Arrays.asList(),
        source,
        signer,
        v -> Scv.fromAddress(v),
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<Void> setAuthorized(
      Address id, Boolean authorize, String source, KeyPair signer, int baseFee) {
    return setAuthorized(id, authorize, source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<Void> setAuthorized(
      Address id,
      Boolean authorize,
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "set_authorized",
        Arrays.asList(Scv.toAddress(id), Scv.toBoolean(authorize)),
        source,
        signer,
        v -> null,
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<byte[]> symbol(String source, KeyPair signer, int baseFee) {
    return symbol(source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<byte[]> symbol(
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "symbol",
        Arrays.asList(),
        source,
        signer,
        v -> Scv.fromString(v),
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<Void> transfer(
      Address from, Address to, BigInteger amount, String source, KeyPair signer, int baseFee) {
    return transfer(from, to, amount, source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<Void> transfer(
      Address from,
      Address to,
      BigInteger amount,
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "transfer",
        Arrays.asList(Scv.toAddress(from), Scv.toAddress(to), Scv.toInt128(amount)),
        source,
        signer,
        v -> null,
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }

  public AssembledTransaction<Void> transferFrom(
      Address spender,
      Address from,
      Address to,
      BigInteger amount,
      String source,
      KeyPair signer,
      int baseFee) {
    return transferFrom(spender, from, to, amount, source, signer, baseFee, 300, 30, true, true);
  }

  public AssembledTransaction<Void> transferFrom(
      Address spender,
      Address from,
      Address to,
      BigInteger amount,
      String source,
      KeyPair signer,
      int baseFee,
      int transactionTimeout,
      int submitTimeout,
      boolean simulate,
      boolean restore) {
    return invoke(
        "transfer_from",
        Arrays.asList(
            Scv.toAddress(spender), Scv.toAddress(from), Scv.toAddress(to), Scv.toInt128(amount)),
        source,
        signer,
        v -> null,
        baseFee,
        transactionTimeout,
        submitTimeout,
        simulate,
        restore);
  }
}
