// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * SCSpecFunctionInputV0's original definition in the XDR file is:
 *
 * <pre>
 * struct SCSpecFunctionInputV0
 * {
 *     string doc&lt;SC_SPEC_DOC_LIMIT&gt;;
 *     string name&lt;30&gt;;
 *     SCSpecTypeDef type;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class SCSpecFunctionInputV0 implements XdrElement {
  private XdrString doc;
  private XdrString name;
  private SCSpecTypeDef type;

  public static void encode(
      XdrDataOutputStream stream, SCSpecFunctionInputV0 encodedSCSpecFunctionInputV0)
      throws IOException {
    encodedSCSpecFunctionInputV0.doc.encode(stream);
    encodedSCSpecFunctionInputV0.name.encode(stream);
    SCSpecTypeDef.encode(stream, encodedSCSpecFunctionInputV0.type);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SCSpecFunctionInputV0 decode(XdrDataInputStream stream) throws IOException {
    SCSpecFunctionInputV0 decodedSCSpecFunctionInputV0 = new SCSpecFunctionInputV0();
    decodedSCSpecFunctionInputV0.doc = XdrString.decode(stream, SC_SPEC_DOC_LIMIT);
    decodedSCSpecFunctionInputV0.name = XdrString.decode(stream, 30);
    decodedSCSpecFunctionInputV0.type = SCSpecTypeDef.decode(stream);
    return decodedSCSpecFunctionInputV0;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SCSpecFunctionInputV0 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SCSpecFunctionInputV0 fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
