// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import java.io.IOException;
import java.util.Arrays;

// === xdr source ============================================================

//  struct InvokeHostFunctionSuccessPreImage
//  {
//      SCVal returnValue;
//      ContractEvent events<>;
//  };

//  ===========================================================================
public class InvokeHostFunctionSuccessPreImage implements XdrElement {
  public InvokeHostFunctionSuccessPreImage() {}

  private SCVal returnValue;

  public SCVal getReturnValue() {
    return this.returnValue;
  }

  public void setReturnValue(SCVal value) {
    this.returnValue = value;
  }

  private ContractEvent[] events;

  public ContractEvent[] getEvents() {
    return this.events;
  }

  public void setEvents(ContractEvent[] value) {
    this.events = value;
  }

  public static void encode(
      XdrDataOutputStream stream,
      InvokeHostFunctionSuccessPreImage encodedInvokeHostFunctionSuccessPreImage)
      throws IOException {
    SCVal.encode(stream, encodedInvokeHostFunctionSuccessPreImage.returnValue);
    int eventssize = encodedInvokeHostFunctionSuccessPreImage.getEvents().length;
    stream.writeInt(eventssize);
    for (int i = 0; i < eventssize; i++) {
      ContractEvent.encode(stream, encodedInvokeHostFunctionSuccessPreImage.events[i]);
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static InvokeHostFunctionSuccessPreImage decode(XdrDataInputStream stream)
      throws IOException {
    InvokeHostFunctionSuccessPreImage decodedInvokeHostFunctionSuccessPreImage =
        new InvokeHostFunctionSuccessPreImage();
    decodedInvokeHostFunctionSuccessPreImage.returnValue = SCVal.decode(stream);
    int eventssize = stream.readInt();
    decodedInvokeHostFunctionSuccessPreImage.events = new ContractEvent[eventssize];
    for (int i = 0; i < eventssize; i++) {
      decodedInvokeHostFunctionSuccessPreImage.events[i] = ContractEvent.decode(stream);
    }
    return decodedInvokeHostFunctionSuccessPreImage;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.returnValue, Arrays.hashCode(this.events));
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof InvokeHostFunctionSuccessPreImage)) {
      return false;
    }

    InvokeHostFunctionSuccessPreImage other = (InvokeHostFunctionSuccessPreImage) object;
    return Objects.equal(this.returnValue, other.returnValue)
        && Arrays.equals(this.events, other.events);
  }

  public static final class Builder {
    private SCVal returnValue;
    private ContractEvent[] events;

    public Builder returnValue(SCVal returnValue) {
      this.returnValue = returnValue;
      return this;
    }

    public Builder events(ContractEvent[] events) {
      this.events = events;
      return this;
    }

    public InvokeHostFunctionSuccessPreImage build() {
      InvokeHostFunctionSuccessPreImage val = new InvokeHostFunctionSuccessPreImage();
      val.setReturnValue(this.returnValue);
      val.setEvents(this.events);
      return val;
    }
  }
}
