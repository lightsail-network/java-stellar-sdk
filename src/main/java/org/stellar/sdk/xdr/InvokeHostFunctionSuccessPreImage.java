// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * InvokeHostFunctionSuccessPreImage's original definition in the XDR file is:
 *
 * <pre>
 * struct InvokeHostFunctionSuccessPreImage
 * {
 *     SCVal returnValue;
 *     ContractEvent events&lt;&gt;;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class InvokeHostFunctionSuccessPreImage implements XdrElement {
  private SCVal returnValue;
  private ContractEvent[] events;

  public void encode(XdrDataOutputStream stream) throws IOException {
    returnValue.encode(stream);
    int eventsSize = getEvents().length;
    stream.writeInt(eventsSize);
    for (int i = 0; i < eventsSize; i++) {
      events[i].encode(stream);
    }
  }

  public static InvokeHostFunctionSuccessPreImage decode(XdrDataInputStream stream)
      throws IOException {
    InvokeHostFunctionSuccessPreImage decodedInvokeHostFunctionSuccessPreImage =
        new InvokeHostFunctionSuccessPreImage();
    decodedInvokeHostFunctionSuccessPreImage.returnValue = SCVal.decode(stream);
    int eventsSize = stream.readInt();
    decodedInvokeHostFunctionSuccessPreImage.events = new ContractEvent[eventsSize];
    for (int i = 0; i < eventsSize; i++) {
      decodedInvokeHostFunctionSuccessPreImage.events[i] = ContractEvent.decode(stream);
    }
    return decodedInvokeHostFunctionSuccessPreImage;
  }

  public static InvokeHostFunctionSuccessPreImage fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static InvokeHostFunctionSuccessPreImage fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
