// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

/**
 * LedgerCloseMetaExt's original definition in the XDR file is:
 *
 * <pre>
 * union LedgerCloseMetaExt switch (int v)
 * {
 * case 0:
 *     void;
 * case 1:
 *     LedgerCloseMetaExtV1 v1;
 * };
 * </pre>
 */
public class LedgerCloseMetaExt implements XdrElement {
  public LedgerCloseMetaExt() {}

  Integer v;

  public Integer getDiscriminant() {
    return this.v;
  }

  public void setDiscriminant(Integer value) {
    this.v = value;
  }

  private LedgerCloseMetaExtV1 v1;

  public LedgerCloseMetaExtV1 getV1() {
    return this.v1;
  }

  public void setV1(LedgerCloseMetaExtV1 value) {
    this.v1 = value;
  }

  public static final class Builder {
    private Integer discriminant;
    private LedgerCloseMetaExtV1 v1;

    public Builder discriminant(Integer discriminant) {
      this.discriminant = discriminant;
      return this;
    }

    public Builder v1(LedgerCloseMetaExtV1 v1) {
      this.v1 = v1;
      return this;
    }

    public LedgerCloseMetaExt build() {
      LedgerCloseMetaExt val = new LedgerCloseMetaExt();
      val.setDiscriminant(discriminant);
      val.setV1(this.v1);
      return val;
    }
  }

  public static void encode(
      XdrDataOutputStream stream, LedgerCloseMetaExt encodedLedgerCloseMetaExt) throws IOException {
    // Xdrgen::AST::Typespecs::Int
    // Integer
    stream.writeInt(encodedLedgerCloseMetaExt.getDiscriminant().intValue());
    switch (encodedLedgerCloseMetaExt.getDiscriminant()) {
      case 0:
        break;
      case 1:
        LedgerCloseMetaExtV1.encode(stream, encodedLedgerCloseMetaExt.v1);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static LedgerCloseMetaExt decode(XdrDataInputStream stream) throws IOException {
    LedgerCloseMetaExt decodedLedgerCloseMetaExt = new LedgerCloseMetaExt();
    Integer discriminant = stream.readInt();
    decodedLedgerCloseMetaExt.setDiscriminant(discriminant);
    switch (decodedLedgerCloseMetaExt.getDiscriminant()) {
      case 0:
        break;
      case 1:
        decodedLedgerCloseMetaExt.v1 = LedgerCloseMetaExtV1.decode(stream);
        break;
    }
    return decodedLedgerCloseMetaExt;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.v1, this.v);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof LedgerCloseMetaExt)) {
      return false;
    }

    LedgerCloseMetaExt other = (LedgerCloseMetaExt) object;
    return Objects.equals(this.v1, other.v1) && Objects.equals(this.v, other.v);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static LedgerCloseMetaExt fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static LedgerCloseMetaExt fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
