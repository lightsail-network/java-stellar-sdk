// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * Memo's original definition in the XDR file is:
 *
 * <pre>
 * union Memo switch (MemoType type)
 * {
 * case MEMO_NONE:
 *     void;
 * case MEMO_TEXT:
 *     string text&lt;28&gt;;
 * case MEMO_ID:
 *     uint64 id;
 * case MEMO_HASH:
 *     Hash hash; // the hash of what to pull from the content server
 * case MEMO_RETURN:
 *     Hash retHash; // the hash of the tx you are rejecting
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class Memo implements XdrElement {
  private MemoType discriminant;
  private XdrString text;
  private Uint64 id;
  private Hash hash;
  private Hash retHash;

  public static void encode(XdrDataOutputStream stream, Memo encodedMemo) throws IOException {
    // Xdrgen::AST::Identifier
    // MemoType
    stream.writeInt(encodedMemo.getDiscriminant().getValue());
    switch (encodedMemo.getDiscriminant()) {
      case MEMO_NONE:
        break;
      case MEMO_TEXT:
        encodedMemo.text.encode(stream);
        break;
      case MEMO_ID:
        Uint64.encode(stream, encodedMemo.id);
        break;
      case MEMO_HASH:
        Hash.encode(stream, encodedMemo.hash);
        break;
      case MEMO_RETURN:
        Hash.encode(stream, encodedMemo.retHash);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static Memo decode(XdrDataInputStream stream) throws IOException {
    Memo decodedMemo = new Memo();
    MemoType discriminant = MemoType.decode(stream);
    decodedMemo.setDiscriminant(discriminant);
    switch (decodedMemo.getDiscriminant()) {
      case MEMO_NONE:
        break;
      case MEMO_TEXT:
        decodedMemo.text = XdrString.decode(stream, 28);
        break;
      case MEMO_ID:
        decodedMemo.id = Uint64.decode(stream);
        break;
      case MEMO_HASH:
        decodedMemo.hash = Hash.decode(stream);
        break;
      case MEMO_RETURN:
        decodedMemo.retHash = Hash.decode(stream);
        break;
    }
    return decodedMemo;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static Memo fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static Memo fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
