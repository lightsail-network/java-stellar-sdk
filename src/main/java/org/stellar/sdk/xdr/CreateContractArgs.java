// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import java.io.IOException;

// === xdr source ============================================================

//  struct CreateContractArgs
//  {
//      ContractIDPreimage contractIDPreimage;
//      ContractExecutable executable;
//  };

//  ===========================================================================
public class CreateContractArgs implements XdrElement {
  public CreateContractArgs() {}

  private ContractIDPreimage contractIDPreimage;

  public ContractIDPreimage getContractIDPreimage() {
    return this.contractIDPreimage;
  }

  public void setContractIDPreimage(ContractIDPreimage value) {
    this.contractIDPreimage = value;
  }

  private ContractExecutable executable;

  public ContractExecutable getExecutable() {
    return this.executable;
  }

  public void setExecutable(ContractExecutable value) {
    this.executable = value;
  }

  public static void encode(
      XdrDataOutputStream stream, CreateContractArgs encodedCreateContractArgs) throws IOException {
    ContractIDPreimage.encode(stream, encodedCreateContractArgs.contractIDPreimage);
    ContractExecutable.encode(stream, encodedCreateContractArgs.executable);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static CreateContractArgs decode(XdrDataInputStream stream) throws IOException {
    CreateContractArgs decodedCreateContractArgs = new CreateContractArgs();
    decodedCreateContractArgs.contractIDPreimage = ContractIDPreimage.decode(stream);
    decodedCreateContractArgs.executable = ContractExecutable.decode(stream);
    return decodedCreateContractArgs;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.contractIDPreimage, this.executable);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof CreateContractArgs)) {
      return false;
    }

    CreateContractArgs other = (CreateContractArgs) object;
    return Objects.equal(this.contractIDPreimage, other.contractIDPreimage)
        && Objects.equal(this.executable, other.executable);
  }

  public static final class Builder {
    private ContractIDPreimage contractIDPreimage;
    private ContractExecutable executable;

    public Builder contractIDPreimage(ContractIDPreimage contractIDPreimage) {
      this.contractIDPreimage = contractIDPreimage;
      return this;
    }

    public Builder executable(ContractExecutable executable) {
      this.executable = executable;
      return this;
    }

    public CreateContractArgs build() {
      CreateContractArgs val = new CreateContractArgs();
      val.setContractIDPreimage(this.contractIDPreimage);
      val.setExecutable(this.executable);
      return val;
    }
  }
}
