// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * ManageSellOfferResult's original definition in the XDR file is:
 *
 * <pre>
 * union ManageSellOfferResult switch (ManageSellOfferResultCode code)
 * {
 * case MANAGE_SELL_OFFER_SUCCESS:
 *     ManageOfferSuccessResult success;
 * case MANAGE_SELL_OFFER_MALFORMED:
 * case MANAGE_SELL_OFFER_SELL_NO_TRUST:
 * case MANAGE_SELL_OFFER_BUY_NO_TRUST:
 * case MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED:
 * case MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED:
 * case MANAGE_SELL_OFFER_LINE_FULL:
 * case MANAGE_SELL_OFFER_UNDERFUNDED:
 * case MANAGE_SELL_OFFER_CROSS_SELF:
 * case MANAGE_SELL_OFFER_SELL_NO_ISSUER:
 * case MANAGE_SELL_OFFER_BUY_NO_ISSUER:
 * case MANAGE_SELL_OFFER_NOT_FOUND:
 * case MANAGE_SELL_OFFER_LOW_RESERVE:
 *     void;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class ManageSellOfferResult implements XdrElement {
  private ManageSellOfferResultCode discriminant;
  private ManageOfferSuccessResult success;

  public void encode(XdrDataOutputStream stream) throws IOException {
    stream.writeInt(discriminant.getValue());
    switch (discriminant) {
      case MANAGE_SELL_OFFER_SUCCESS:
        success.encode(stream);
        break;
      case MANAGE_SELL_OFFER_MALFORMED:
      case MANAGE_SELL_OFFER_SELL_NO_TRUST:
      case MANAGE_SELL_OFFER_BUY_NO_TRUST:
      case MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED:
      case MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED:
      case MANAGE_SELL_OFFER_LINE_FULL:
      case MANAGE_SELL_OFFER_UNDERFUNDED:
      case MANAGE_SELL_OFFER_CROSS_SELF:
      case MANAGE_SELL_OFFER_SELL_NO_ISSUER:
      case MANAGE_SELL_OFFER_BUY_NO_ISSUER:
      case MANAGE_SELL_OFFER_NOT_FOUND:
      case MANAGE_SELL_OFFER_LOW_RESERVE:
        break;
    }
  }

  public static ManageSellOfferResult decode(XdrDataInputStream stream) throws IOException {
    ManageSellOfferResult decodedManageSellOfferResult = new ManageSellOfferResult();
    ManageSellOfferResultCode discriminant = ManageSellOfferResultCode.decode(stream);
    decodedManageSellOfferResult.setDiscriminant(discriminant);
    switch (decodedManageSellOfferResult.getDiscriminant()) {
      case MANAGE_SELL_OFFER_SUCCESS:
        decodedManageSellOfferResult.success = ManageOfferSuccessResult.decode(stream);
        break;
      case MANAGE_SELL_OFFER_MALFORMED:
      case MANAGE_SELL_OFFER_SELL_NO_TRUST:
      case MANAGE_SELL_OFFER_BUY_NO_TRUST:
      case MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED:
      case MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED:
      case MANAGE_SELL_OFFER_LINE_FULL:
      case MANAGE_SELL_OFFER_UNDERFUNDED:
      case MANAGE_SELL_OFFER_CROSS_SELF:
      case MANAGE_SELL_OFFER_SELL_NO_ISSUER:
      case MANAGE_SELL_OFFER_BUY_NO_ISSUER:
      case MANAGE_SELL_OFFER_NOT_FOUND:
      case MANAGE_SELL_OFFER_LOW_RESERVE:
        break;
    }
    return decodedManageSellOfferResult;
  }

  public static ManageSellOfferResult fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ManageSellOfferResult fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
