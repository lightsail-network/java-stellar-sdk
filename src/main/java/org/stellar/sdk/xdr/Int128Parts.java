// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct Int128Parts {
//      int64 hi;
//      uint64 lo;
//  };

//  ===========================================================================
public class Int128Parts implements XdrElement {
  public Int128Parts() {}

  private Int64 hi;

  public Int64 getHi() {
    return this.hi;
  }

  public void setHi(Int64 value) {
    this.hi = value;
  }

  private Uint64 lo;

  public Uint64 getLo() {
    return this.lo;
  }

  public void setLo(Uint64 value) {
    this.lo = value;
  }

  public static void encode(XdrDataOutputStream stream, Int128Parts encodedInt128Parts)
      throws IOException {
    Int64.encode(stream, encodedInt128Parts.hi);
    Uint64.encode(stream, encodedInt128Parts.lo);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static Int128Parts decode(XdrDataInputStream stream) throws IOException {
    Int128Parts decodedInt128Parts = new Int128Parts();
    decodedInt128Parts.hi = Int64.decode(stream);
    decodedInt128Parts.lo = Uint64.decode(stream);
    return decodedInt128Parts;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.hi, this.lo);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof Int128Parts)) {
      return false;
    }

    Int128Parts other = (Int128Parts) object;
    return Objects.equals(this.hi, other.hi) && Objects.equals(this.lo, other.lo);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static Int128Parts fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static Int128Parts fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private Int64 hi;
    private Uint64 lo;

    public Builder hi(Int64 hi) {
      this.hi = hi;
      return this;
    }

    public Builder lo(Uint64 lo) {
      this.lo = lo;
      return this;
    }

    public Int128Parts build() {
      Int128Parts val = new Int128Parts();
      val.setHi(this.hi);
      val.setLo(this.lo);
      return val;
    }
  }
}
