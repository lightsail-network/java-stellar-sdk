// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  typedef opaque SCBytes<>;

//  ===========================================================================
public class SCBytes implements XdrElement {
  private byte[] SCBytes;

  public SCBytes() {}

  public SCBytes(byte[] SCBytes) {
    this.SCBytes = SCBytes;
  }

  public byte[] getSCBytes() {
    return this.SCBytes;
  }

  public void setSCBytes(byte[] value) {
    this.SCBytes = value;
  }

  public static void encode(XdrDataOutputStream stream, SCBytes encodedSCBytes) throws IOException {
    int SCBytessize = encodedSCBytes.SCBytes.length;
    stream.writeInt(SCBytessize);
    stream.write(encodedSCBytes.getSCBytes(), 0, SCBytessize);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SCBytes decode(XdrDataInputStream stream) throws IOException {
    SCBytes decodedSCBytes = new SCBytes();
    int SCBytessize = stream.readInt();
    decodedSCBytes.SCBytes = new byte[SCBytessize];
    stream.read(decodedSCBytes.SCBytes, 0, SCBytessize);
    return decodedSCBytes;
  }

  @Override
  public int hashCode() {
    return Arrays.hashCode(this.SCBytes);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SCBytes)) {
      return false;
    }

    SCBytes other = (SCBytes) object;
    return Arrays.equals(this.SCBytes, other.SCBytes);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SCBytes fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SCBytes fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
