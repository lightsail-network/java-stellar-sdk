// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * InflationResult's original definition in the XDR file is:
 *
 * <pre>
 * union InflationResult switch (InflationResultCode code)
 * {
 * case INFLATION_SUCCESS:
 *     InflationPayout payouts&lt;&gt;;
 * case INFLATION_NOT_TIME:
 *     void;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class InflationResult implements XdrElement {
  private InflationResultCode discriminant;
  private InflationPayout[] payouts;

  public static void encode(XdrDataOutputStream stream, InflationResult encodedInflationResult)
      throws IOException {
    // Xdrgen::AST::Identifier
    // InflationResultCode
    stream.writeInt(encodedInflationResult.getDiscriminant().getValue());
    switch (encodedInflationResult.getDiscriminant()) {
      case INFLATION_SUCCESS:
        int payoutsSize = encodedInflationResult.getPayouts().length;
        stream.writeInt(payoutsSize);
        for (int i = 0; i < payoutsSize; i++) {
          InflationPayout.encode(stream, encodedInflationResult.payouts[i]);
        }
        break;
      case INFLATION_NOT_TIME:
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static InflationResult decode(XdrDataInputStream stream) throws IOException {
    InflationResult decodedInflationResult = new InflationResult();
    InflationResultCode discriminant = InflationResultCode.decode(stream);
    decodedInflationResult.setDiscriminant(discriminant);
    switch (decodedInflationResult.getDiscriminant()) {
      case INFLATION_SUCCESS:
        int payoutsSize = stream.readInt();
        decodedInflationResult.payouts = new InflationPayout[payoutsSize];
        for (int i = 0; i < payoutsSize; i++) {
          decodedInflationResult.payouts[i] = InflationPayout.decode(stream);
        }
        break;
      case INFLATION_NOT_TIME:
        break;
    }
    return decodedInflationResult;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static InflationResult fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static InflationResult fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
