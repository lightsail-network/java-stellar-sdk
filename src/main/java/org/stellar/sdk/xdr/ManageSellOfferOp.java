// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import com.google.common.base.Objects;
import java.io.IOException;

// === xdr source ============================================================

//  struct ManageSellOfferOp
//  {
//      Asset selling;
//      Asset buying;
//      int64 amount; // amount being sold. if set to 0, delete the offer
//      Price price;  // price of thing being sold in terms of what you are buying
//
//      // 0=create a new offer, otherwise edit an existing offer
//      int64 offerID;
//  };

//  ===========================================================================
public class ManageSellOfferOp implements XdrElement {
  public ManageSellOfferOp() {}

  private Asset selling;

  public Asset getSelling() {
    return this.selling;
  }

  public void setSelling(Asset value) {
    this.selling = value;
  }

  private Asset buying;

  public Asset getBuying() {
    return this.buying;
  }

  public void setBuying(Asset value) {
    this.buying = value;
  }

  private Int64 amount;

  public Int64 getAmount() {
    return this.amount;
  }

  public void setAmount(Int64 value) {
    this.amount = value;
  }

  private Price price;

  public Price getPrice() {
    return this.price;
  }

  public void setPrice(Price value) {
    this.price = value;
  }

  private Int64 offerID;

  public Int64 getOfferID() {
    return this.offerID;
  }

  public void setOfferID(Int64 value) {
    this.offerID = value;
  }

  public static void encode(XdrDataOutputStream stream, ManageSellOfferOp encodedManageSellOfferOp)
      throws IOException {
    Asset.encode(stream, encodedManageSellOfferOp.selling);
    Asset.encode(stream, encodedManageSellOfferOp.buying);
    Int64.encode(stream, encodedManageSellOfferOp.amount);
    Price.encode(stream, encodedManageSellOfferOp.price);
    Int64.encode(stream, encodedManageSellOfferOp.offerID);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static ManageSellOfferOp decode(XdrDataInputStream stream) throws IOException {
    ManageSellOfferOp decodedManageSellOfferOp = new ManageSellOfferOp();
    decodedManageSellOfferOp.selling = Asset.decode(stream);
    decodedManageSellOfferOp.buying = Asset.decode(stream);
    decodedManageSellOfferOp.amount = Int64.decode(stream);
    decodedManageSellOfferOp.price = Price.decode(stream);
    decodedManageSellOfferOp.offerID = Int64.decode(stream);
    return decodedManageSellOfferOp;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.selling, this.buying, this.amount, this.price, this.offerID);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof ManageSellOfferOp)) {
      return false;
    }

    ManageSellOfferOp other = (ManageSellOfferOp) object;
    return Objects.equal(this.selling, other.selling)
        && Objects.equal(this.buying, other.buying)
        && Objects.equal(this.amount, other.amount)
        && Objects.equal(this.price, other.price)
        && Objects.equal(this.offerID, other.offerID);
  }

  public static final class Builder {
    private Asset selling;
    private Asset buying;
    private Int64 amount;
    private Price price;
    private Int64 offerID;

    public Builder selling(Asset selling) {
      this.selling = selling;
      return this;
    }

    public Builder buying(Asset buying) {
      this.buying = buying;
      return this;
    }

    public Builder amount(Int64 amount) {
      this.amount = amount;
      return this;
    }

    public Builder price(Price price) {
      this.price = price;
      return this;
    }

    public Builder offerID(Int64 offerID) {
      this.offerID = offerID;
      return this;
    }

    public ManageSellOfferOp build() {
      ManageSellOfferOp val = new ManageSellOfferOp();
      val.setSelling(selling);
      val.setBuying(buying);
      val.setAmount(amount);
      val.setPrice(price);
      val.setOfferID(offerID);
      return val;
    }
  }
}
