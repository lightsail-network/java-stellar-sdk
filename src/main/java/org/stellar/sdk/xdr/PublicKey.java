// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  union PublicKey switch (PublicKeyType type)
//  {
//  case PUBLIC_KEY_TYPE_ED25519:
//      uint256 ed25519;
//  };

//  ===========================================================================
public class PublicKey implements XdrElement {
  public PublicKey() {}

  PublicKeyType type;

  public PublicKeyType getDiscriminant() {
    return this.type;
  }

  public void setDiscriminant(PublicKeyType value) {
    this.type = value;
  }

  private Uint256 ed25519;

  public Uint256 getEd25519() {
    return this.ed25519;
  }

  public void setEd25519(Uint256 value) {
    this.ed25519 = value;
  }

  public static final class Builder {
    private PublicKeyType discriminant;
    private Uint256 ed25519;

    public Builder discriminant(PublicKeyType discriminant) {
      this.discriminant = discriminant;
      return this;
    }

    public Builder ed25519(Uint256 ed25519) {
      this.ed25519 = ed25519;
      return this;
    }

    public PublicKey build() {
      PublicKey val = new PublicKey();
      val.setDiscriminant(discriminant);
      val.setEd25519(this.ed25519);
      return val;
    }
  }

  public static void encode(XdrDataOutputStream stream, PublicKey encodedPublicKey)
      throws IOException {
    // Xdrgen::AST::Identifier
    // PublicKeyType
    stream.writeInt(encodedPublicKey.getDiscriminant().getValue());
    switch (encodedPublicKey.getDiscriminant()) {
      case PUBLIC_KEY_TYPE_ED25519:
        Uint256.encode(stream, encodedPublicKey.ed25519);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static PublicKey decode(XdrDataInputStream stream) throws IOException {
    PublicKey decodedPublicKey = new PublicKey();
    PublicKeyType discriminant = PublicKeyType.decode(stream);
    decodedPublicKey.setDiscriminant(discriminant);
    switch (decodedPublicKey.getDiscriminant()) {
      case PUBLIC_KEY_TYPE_ED25519:
        decodedPublicKey.ed25519 = Uint256.decode(stream);
        break;
    }
    return decodedPublicKey;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.ed25519, this.type);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof PublicKey)) {
      return false;
    }

    PublicKey other = (PublicKey) object;
    return Objects.equals(this.ed25519, other.ed25519) && Objects.equals(this.type, other.type);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static PublicKey fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static PublicKey fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
