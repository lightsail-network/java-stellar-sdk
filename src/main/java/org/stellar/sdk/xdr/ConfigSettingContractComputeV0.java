// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * ConfigSettingContractComputeV0's original definition in the XDR file is:
 *
 * <pre>
 * struct ConfigSettingContractComputeV0
 * {
 *     // Maximum instructions per ledger
 *     int64 ledgerMaxInstructions;
 *     // Maximum instructions per transaction
 *     int64 txMaxInstructions;
 *     // Cost of 10000 instructions
 *     int64 feeRatePerInstructionsIncrement;
 *
 *     // Memory limit per transaction. Unlike instructions, there is no fee
 *     // for memory, just the limit.
 *     uint32 txMemoryLimit;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class ConfigSettingContractComputeV0 implements XdrElement {
  private Int64 ledgerMaxInstructions;
  private Int64 txMaxInstructions;
  private Int64 feeRatePerInstructionsIncrement;
  private Uint32 txMemoryLimit;

  public static void encode(
      XdrDataOutputStream stream,
      ConfigSettingContractComputeV0 encodedConfigSettingContractComputeV0)
      throws IOException {
    Int64.encode(stream, encodedConfigSettingContractComputeV0.ledgerMaxInstructions);
    Int64.encode(stream, encodedConfigSettingContractComputeV0.txMaxInstructions);
    Int64.encode(stream, encodedConfigSettingContractComputeV0.feeRatePerInstructionsIncrement);
    Uint32.encode(stream, encodedConfigSettingContractComputeV0.txMemoryLimit);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static ConfigSettingContractComputeV0 decode(XdrDataInputStream stream)
      throws IOException {
    ConfigSettingContractComputeV0 decodedConfigSettingContractComputeV0 =
        new ConfigSettingContractComputeV0();
    decodedConfigSettingContractComputeV0.ledgerMaxInstructions = Int64.decode(stream);
    decodedConfigSettingContractComputeV0.txMaxInstructions = Int64.decode(stream);
    decodedConfigSettingContractComputeV0.feeRatePerInstructionsIncrement = Int64.decode(stream);
    decodedConfigSettingContractComputeV0.txMemoryLimit = Uint32.decode(stream);
    return decodedConfigSettingContractComputeV0;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static ConfigSettingContractComputeV0 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ConfigSettingContractComputeV0 fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
