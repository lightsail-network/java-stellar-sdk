// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.Objects;

// === xdr source ============================================================

//  struct SCError
//  {
//      SCErrorType type;
//      SCErrorCode code;
//  };

//  ===========================================================================
public class SCError implements XdrElement {
  public SCError() {}

  private SCErrorType type;

  public SCErrorType getType() {
    return this.type;
  }

  public void setType(SCErrorType value) {
    this.type = value;
  }

  private SCErrorCode code;

  public SCErrorCode getCode() {
    return this.code;
  }

  public void setCode(SCErrorCode value) {
    this.code = value;
  }

  public static void encode(XdrDataOutputStream stream, SCError encodedSCError) throws IOException {
    SCErrorType.encode(stream, encodedSCError.type);
    SCErrorCode.encode(stream, encodedSCError.code);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SCError decode(XdrDataInputStream stream) throws IOException {
    SCError decodedSCError = new SCError();
    decodedSCError.type = SCErrorType.decode(stream);
    decodedSCError.code = SCErrorCode.decode(stream);
    return decodedSCError;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.type, this.code);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SCError)) {
      return false;
    }

    SCError other = (SCError) object;
    return Objects.equals(this.type, other.type) && Objects.equals(this.code, other.code);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64.getEncoder().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SCError fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64.getDecoder().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SCError fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private SCErrorType type;
    private SCErrorCode code;

    public Builder type(SCErrorType type) {
      this.type = type;
      return this;
    }

    public Builder code(SCErrorCode code) {
      this.code = code;
      return this;
    }

    public SCError build() {
      SCError val = new SCError();
      val.setType(this.type);
      val.setCode(this.code);
      return val;
    }
  }
}
