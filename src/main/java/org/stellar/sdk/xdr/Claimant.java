// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  union Claimant switch (ClaimantType type)
//  {
//  case CLAIMANT_TYPE_V0:
//      struct
//      {
//          AccountID destination;    // The account that can use this condition
//          ClaimPredicate predicate; // Claimable if predicate is true
//      } v0;
//  };

//  ===========================================================================
public class Claimant implements XdrElement {
  public Claimant() {}

  ClaimantType type;

  public ClaimantType getDiscriminant() {
    return this.type;
  }

  public void setDiscriminant(ClaimantType value) {
    this.type = value;
  }

  private ClaimantV0 v0;

  public ClaimantV0 getV0() {
    return this.v0;
  }

  public void setV0(ClaimantV0 value) {
    this.v0 = value;
  }

  public static final class Builder {
    private ClaimantType discriminant;
    private ClaimantV0 v0;

    public Builder discriminant(ClaimantType discriminant) {
      this.discriminant = discriminant;
      return this;
    }

    public Builder v0(ClaimantV0 v0) {
      this.v0 = v0;
      return this;
    }

    public Claimant build() {
      Claimant val = new Claimant();
      val.setDiscriminant(discriminant);
      val.setV0(this.v0);
      return val;
    }
  }

  public static void encode(XdrDataOutputStream stream, Claimant encodedClaimant)
      throws IOException {
    // Xdrgen::AST::Identifier
    // ClaimantType
    stream.writeInt(encodedClaimant.getDiscriminant().getValue());
    switch (encodedClaimant.getDiscriminant()) {
      case CLAIMANT_TYPE_V0:
        ClaimantV0.encode(stream, encodedClaimant.v0);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static Claimant decode(XdrDataInputStream stream) throws IOException {
    Claimant decodedClaimant = new Claimant();
    ClaimantType discriminant = ClaimantType.decode(stream);
    decodedClaimant.setDiscriminant(discriminant);
    switch (decodedClaimant.getDiscriminant()) {
      case CLAIMANT_TYPE_V0:
        decodedClaimant.v0 = ClaimantV0.decode(stream);
        break;
    }
    return decodedClaimant;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.v0, this.type);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof Claimant)) {
      return false;
    }

    Claimant other = (Claimant) object;
    return Objects.equals(this.v0, other.v0) && Objects.equals(this.type, other.type);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static Claimant fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static Claimant fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static class ClaimantV0 implements XdrElement {
    public ClaimantV0() {}

    private AccountID destination;

    public AccountID getDestination() {
      return this.destination;
    }

    public void setDestination(AccountID value) {
      this.destination = value;
    }

    private ClaimPredicate predicate;

    public ClaimPredicate getPredicate() {
      return this.predicate;
    }

    public void setPredicate(ClaimPredicate value) {
      this.predicate = value;
    }

    public static void encode(XdrDataOutputStream stream, ClaimantV0 encodedClaimantV0)
        throws IOException {
      AccountID.encode(stream, encodedClaimantV0.destination);
      ClaimPredicate.encode(stream, encodedClaimantV0.predicate);
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static ClaimantV0 decode(XdrDataInputStream stream) throws IOException {
      ClaimantV0 decodedClaimantV0 = new ClaimantV0();
      decodedClaimantV0.destination = AccountID.decode(stream);
      decodedClaimantV0.predicate = ClaimPredicate.decode(stream);
      return decodedClaimantV0;
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.destination, this.predicate);
    }

    @Override
    public boolean equals(Object object) {
      if (!(object instanceof ClaimantV0)) {
        return false;
      }

      ClaimantV0 other = (ClaimantV0) object;
      return Objects.equals(this.destination, other.destination)
          && Objects.equals(this.predicate, other.predicate);
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static ClaimantV0 fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static ClaimantV0 fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }

    public static final class Builder {
      private AccountID destination;
      private ClaimPredicate predicate;

      public Builder destination(AccountID destination) {
        this.destination = destination;
        return this;
      }

      public Builder predicate(ClaimPredicate predicate) {
        this.predicate = predicate;
        return this;
      }

      public ClaimantV0 build() {
        ClaimantV0 val = new ClaimantV0();
        val.setDestination(this.destination);
        val.setPredicate(this.predicate);
        return val;
      }
    }
  }
}
