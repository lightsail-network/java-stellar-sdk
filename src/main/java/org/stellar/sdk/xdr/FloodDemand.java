// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import java.io.IOException;

// === xdr source ============================================================

//  struct FloodDemand
//  {
//      TxDemandVector txHashes;
//  };

//  ===========================================================================
public class FloodDemand implements XdrElement {
  public FloodDemand() {}

  private TxDemandVector txHashes;

  public TxDemandVector getTxHashes() {
    return this.txHashes;
  }

  public void setTxHashes(TxDemandVector value) {
    this.txHashes = value;
  }

  public static void encode(XdrDataOutputStream stream, FloodDemand encodedFloodDemand)
      throws IOException {
    TxDemandVector.encode(stream, encodedFloodDemand.txHashes);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static FloodDemand decode(XdrDataInputStream stream) throws IOException {
    FloodDemand decodedFloodDemand = new FloodDemand();
    decodedFloodDemand.txHashes = TxDemandVector.decode(stream);
    return decodedFloodDemand;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.txHashes);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof FloodDemand)) {
      return false;
    }

    FloodDemand other = (FloodDemand) object;
    return Objects.equal(this.txHashes, other.txHashes);
  }

  public static final class Builder {
    private TxDemandVector txHashes;

    public Builder txHashes(TxDemandVector txHashes) {
      this.txHashes = txHashes;
      return this;
    }

    public FloodDemand build() {
      FloodDemand val = new FloodDemand();
      val.setTxHashes(this.txHashes);
      return val;
    }
  }
}
