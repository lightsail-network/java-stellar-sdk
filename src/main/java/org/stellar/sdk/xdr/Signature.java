// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  typedef opaque Signature<64>;

//  ===========================================================================
public class Signature implements XdrElement {
  private byte[] Signature;

  public Signature() {}

  public Signature(byte[] Signature) {
    this.Signature = Signature;
  }

  public byte[] getSignature() {
    return this.Signature;
  }

  public void setSignature(byte[] value) {
    this.Signature = value;
  }

  public static void encode(XdrDataOutputStream stream, Signature encodedSignature)
      throws IOException {
    int Signaturesize = encodedSignature.Signature.length;
    stream.writeInt(Signaturesize);
    stream.write(encodedSignature.getSignature(), 0, Signaturesize);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static Signature decode(XdrDataInputStream stream) throws IOException {
    Signature decodedSignature = new Signature();
    int Signaturesize = stream.readInt();
    decodedSignature.Signature = new byte[Signaturesize];
    stream.read(decodedSignature.Signature, 0, Signaturesize);
    return decodedSignature;
  }

  @Override
  public int hashCode() {
    return Arrays.hashCode(this.Signature);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof Signature)) {
      return false;
    }

    Signature other = (Signature) object;
    return Arrays.equals(this.Signature, other.Signature);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static Signature fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static Signature fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
