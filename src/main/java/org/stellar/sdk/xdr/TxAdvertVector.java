// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  typedef Hash TxAdvertVector<TX_ADVERT_VECTOR_MAX_SIZE>;

//  ===========================================================================
public class TxAdvertVector implements XdrElement {
  private Hash[] TxAdvertVector;

  public TxAdvertVector() {}

  public TxAdvertVector(Hash[] TxAdvertVector) {
    this.TxAdvertVector = TxAdvertVector;
  }

  public Hash[] getTxAdvertVector() {
    return this.TxAdvertVector;
  }

  public void setTxAdvertVector(Hash[] value) {
    this.TxAdvertVector = value;
  }

  public static void encode(XdrDataOutputStream stream, TxAdvertVector encodedTxAdvertVector)
      throws IOException {
    int TxAdvertVectorsize = encodedTxAdvertVector.getTxAdvertVector().length;
    stream.writeInt(TxAdvertVectorsize);
    for (int i = 0; i < TxAdvertVectorsize; i++) {
      Hash.encode(stream, encodedTxAdvertVector.TxAdvertVector[i]);
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static TxAdvertVector decode(XdrDataInputStream stream) throws IOException {
    TxAdvertVector decodedTxAdvertVector = new TxAdvertVector();
    int TxAdvertVectorsize = stream.readInt();
    decodedTxAdvertVector.TxAdvertVector = new Hash[TxAdvertVectorsize];
    for (int i = 0; i < TxAdvertVectorsize; i++) {
      decodedTxAdvertVector.TxAdvertVector[i] = Hash.decode(stream);
    }
    return decodedTxAdvertVector;
  }

  @Override
  public int hashCode() {
    return Arrays.hashCode(this.TxAdvertVector);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof TxAdvertVector)) {
      return false;
    }

    TxAdvertVector other = (TxAdvertVector) object;
    return Arrays.equals(this.TxAdvertVector, other.TxAdvertVector);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static TxAdvertVector fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static TxAdvertVector fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
