// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import com.google.common.io.BaseEncoding;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

// === xdr source ============================================================

//  typedef string SCString<>;

//  ===========================================================================
public class SCString implements XdrElement {
  private XdrString SCString;

  public SCString() {}

  public SCString(XdrString SCString) {
    this.SCString = SCString;
  }

  public XdrString getSCString() {
    return this.SCString;
  }

  public void setSCString(XdrString value) {
    this.SCString = value;
  }

  public static void encode(XdrDataOutputStream stream, SCString encodedSCString)
      throws IOException {
    encodedSCString.SCString.encode(stream);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SCString decode(XdrDataInputStream stream) throws IOException {
    SCString decodedSCString = new SCString();
    decodedSCString.SCString = XdrString.decode(stream, Integer.MAX_VALUE);
    return decodedSCString;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.SCString);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SCString)) {
      return false;
    }

    SCString other = (SCString) object;
    return Objects.equal(this.SCString, other.SCString);
  }

  @Override
  public String toXdrBase64() throws IOException {
    BaseEncoding base64Encoding = BaseEncoding.base64();
    return base64Encoding.encode(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SCString fromXdrBase64(String xdr) throws IOException {
    BaseEncoding base64Encoding = BaseEncoding.base64();
    byte[] bytes = base64Encoding.decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SCString fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
