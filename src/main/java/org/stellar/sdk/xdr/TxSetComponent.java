// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * TxSetComponent's original definition in the XDR file is:
 *
 * <pre>
 * union TxSetComponent switch (TxSetComponentType type)
 * {
 * case TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE:
 *   struct
 *   {
 *     int64&#42; baseFee;
 *     TransactionEnvelope txs&lt;&gt;;
 *   } txsMaybeDiscountedFee;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class TxSetComponent implements XdrElement {
  private TxSetComponentType discriminant;
  private TxSetComponentTxsMaybeDiscountedFee txsMaybeDiscountedFee;

  public static void encode(XdrDataOutputStream stream, TxSetComponent encodedTxSetComponent)
      throws IOException {
    // Xdrgen::AST::Identifier
    // TxSetComponentType
    stream.writeInt(encodedTxSetComponent.getDiscriminant().getValue());
    switch (encodedTxSetComponent.getDiscriminant()) {
      case TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE:
        TxSetComponentTxsMaybeDiscountedFee.encode(
            stream, encodedTxSetComponent.txsMaybeDiscountedFee);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static TxSetComponent decode(XdrDataInputStream stream) throws IOException {
    TxSetComponent decodedTxSetComponent = new TxSetComponent();
    TxSetComponentType discriminant = TxSetComponentType.decode(stream);
    decodedTxSetComponent.setDiscriminant(discriminant);
    switch (decodedTxSetComponent.getDiscriminant()) {
      case TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE:
        decodedTxSetComponent.txsMaybeDiscountedFee =
            TxSetComponentTxsMaybeDiscountedFee.decode(stream);
        break;
    }
    return decodedTxSetComponent;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static TxSetComponent fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static TxSetComponent fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  /**
   * TxSetComponentTxsMaybeDiscountedFee's original definition in the XDR file is:
   *
   * <pre>
   * struct
   *   {
   *     int64&#42; baseFee;
   *     TransactionEnvelope txs&lt;&gt;;
   *   }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class TxSetComponentTxsMaybeDiscountedFee implements XdrElement {
    private Int64 baseFee;
    private TransactionEnvelope[] txs;

    public static void encode(
        XdrDataOutputStream stream,
        TxSetComponentTxsMaybeDiscountedFee encodedTxSetComponentTxsMaybeDiscountedFee)
        throws IOException {
      if (encodedTxSetComponentTxsMaybeDiscountedFee.baseFee != null) {
        stream.writeInt(1);
        Int64.encode(stream, encodedTxSetComponentTxsMaybeDiscountedFee.baseFee);
      } else {
        stream.writeInt(0);
      }
      int txsSize = encodedTxSetComponentTxsMaybeDiscountedFee.getTxs().length;
      stream.writeInt(txsSize);
      for (int i = 0; i < txsSize; i++) {
        TransactionEnvelope.encode(stream, encodedTxSetComponentTxsMaybeDiscountedFee.txs[i]);
      }
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static TxSetComponentTxsMaybeDiscountedFee decode(XdrDataInputStream stream)
        throws IOException {
      TxSetComponentTxsMaybeDiscountedFee decodedTxSetComponentTxsMaybeDiscountedFee =
          new TxSetComponentTxsMaybeDiscountedFee();
      int baseFeePresent = stream.readInt();
      if (baseFeePresent != 0) {
        decodedTxSetComponentTxsMaybeDiscountedFee.baseFee = Int64.decode(stream);
      }
      int txsSize = stream.readInt();
      decodedTxSetComponentTxsMaybeDiscountedFee.txs = new TransactionEnvelope[txsSize];
      for (int i = 0; i < txsSize; i++) {
        decodedTxSetComponentTxsMaybeDiscountedFee.txs[i] = TransactionEnvelope.decode(stream);
      }
      return decodedTxSetComponentTxsMaybeDiscountedFee;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static TxSetComponentTxsMaybeDiscountedFee fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static TxSetComponentTxsMaybeDiscountedFee fromXdrByteArray(byte[] xdr)
        throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }
}
