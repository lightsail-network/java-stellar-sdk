// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct SCPEnvelope
//  {
//      SCPStatement statement;
//      Signature signature;
//  };

//  ===========================================================================
public class SCPEnvelope implements XdrElement {
  public SCPEnvelope() {}

  private SCPStatement statement;

  public SCPStatement getStatement() {
    return this.statement;
  }

  public void setStatement(SCPStatement value) {
    this.statement = value;
  }

  private Signature signature;

  public Signature getSignature() {
    return this.signature;
  }

  public void setSignature(Signature value) {
    this.signature = value;
  }

  public static void encode(XdrDataOutputStream stream, SCPEnvelope encodedSCPEnvelope)
      throws IOException {
    SCPStatement.encode(stream, encodedSCPEnvelope.statement);
    Signature.encode(stream, encodedSCPEnvelope.signature);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SCPEnvelope decode(XdrDataInputStream stream) throws IOException {
    SCPEnvelope decodedSCPEnvelope = new SCPEnvelope();
    decodedSCPEnvelope.statement = SCPStatement.decode(stream);
    decodedSCPEnvelope.signature = Signature.decode(stream);
    return decodedSCPEnvelope;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.statement, this.signature);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SCPEnvelope)) {
      return false;
    }

    SCPEnvelope other = (SCPEnvelope) object;
    return Objects.equals(this.statement, other.statement)
        && Objects.equals(this.signature, other.signature);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SCPEnvelope fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SCPEnvelope fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private SCPStatement statement;
    private Signature signature;

    public Builder statement(SCPStatement statement) {
      this.statement = statement;
      return this;
    }

    public Builder signature(Signature signature) {
      this.signature = signature;
      return this;
    }

    public SCPEnvelope build() {
      SCPEnvelope val = new SCPEnvelope();
      val.setStatement(this.statement);
      val.setSignature(this.signature);
      return val;
    }
  }
}
