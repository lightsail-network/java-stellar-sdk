// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import com.google.common.base.Objects;
import java.io.IOException;

// === xdr source ============================================================

//  union LiquidityPoolDepositResult switch (LiquidityPoolDepositResultCode code)
//  {
//  case LIQUIDITY_POOL_DEPOSIT_SUCCESS:
//      void;
//  default:
//      void;
//  };

//  ===========================================================================
public class LiquidityPoolDepositResult implements XdrElement {
  public LiquidityPoolDepositResult() {}

  LiquidityPoolDepositResultCode code;

  public LiquidityPoolDepositResultCode getDiscriminant() {
    return this.code;
  }

  public void setDiscriminant(LiquidityPoolDepositResultCode value) {
    this.code = value;
  }

  public static final class Builder {
    private LiquidityPoolDepositResultCode discriminant;

    public Builder discriminant(LiquidityPoolDepositResultCode discriminant) {
      this.discriminant = discriminant;
      return this;
    }

    public LiquidityPoolDepositResult build() {
      LiquidityPoolDepositResult val = new LiquidityPoolDepositResult();
      val.setDiscriminant(discriminant);
      return val;
    }
  }

  public static void encode(
      XdrDataOutputStream stream, LiquidityPoolDepositResult encodedLiquidityPoolDepositResult)
      throws IOException {
    // Xdrgen::AST::Identifier
    // LiquidityPoolDepositResultCode
    stream.writeInt(encodedLiquidityPoolDepositResult.getDiscriminant().getValue());
    switch (encodedLiquidityPoolDepositResult.getDiscriminant()) {
      case LIQUIDITY_POOL_DEPOSIT_SUCCESS:
        break;
      default:
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static LiquidityPoolDepositResult decode(XdrDataInputStream stream) throws IOException {
    LiquidityPoolDepositResult decodedLiquidityPoolDepositResult = new LiquidityPoolDepositResult();
    LiquidityPoolDepositResultCode discriminant = LiquidityPoolDepositResultCode.decode(stream);
    decodedLiquidityPoolDepositResult.setDiscriminant(discriminant);
    switch (decodedLiquidityPoolDepositResult.getDiscriminant()) {
      case LIQUIDITY_POOL_DEPOSIT_SUCCESS:
        break;
      default:
        break;
    }
    return decodedLiquidityPoolDepositResult;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.code);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof LiquidityPoolDepositResult)) {
      return false;
    }

    LiquidityPoolDepositResult other = (LiquidityPoolDepositResult) object;
    return Objects.equal(this.code, other.code);
  }
}
