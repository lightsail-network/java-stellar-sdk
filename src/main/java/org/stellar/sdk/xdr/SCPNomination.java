// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * SCPNomination's original definition in the XDR file is:
 *
 * <pre>
 * struct SCPNomination
 * {
 *     Hash quorumSetHash; // D
 *     Value votes&lt;&gt;;      // X
 *     Value accepted&lt;&gt;;   // Y
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class SCPNomination implements XdrElement {
  private Hash quorumSetHash;
  private Value[] votes;
  private Value[] accepted;

  public static void encode(XdrDataOutputStream stream, SCPNomination encodedSCPNomination)
      throws IOException {
    Hash.encode(stream, encodedSCPNomination.quorumSetHash);
    int votessize = encodedSCPNomination.getVotes().length;
    stream.writeInt(votessize);
    for (int i = 0; i < votessize; i++) {
      Value.encode(stream, encodedSCPNomination.votes[i]);
    }
    int acceptedsize = encodedSCPNomination.getAccepted().length;
    stream.writeInt(acceptedsize);
    for (int i = 0; i < acceptedsize; i++) {
      Value.encode(stream, encodedSCPNomination.accepted[i]);
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SCPNomination decode(XdrDataInputStream stream) throws IOException {
    SCPNomination decodedSCPNomination = new SCPNomination();
    decodedSCPNomination.quorumSetHash = Hash.decode(stream);
    int votessize = stream.readInt();
    decodedSCPNomination.votes = new Value[votessize];
    for (int i = 0; i < votessize; i++) {
      decodedSCPNomination.votes[i] = Value.decode(stream);
    }
    int acceptedsize = stream.readInt();
    decodedSCPNomination.accepted = new Value[acceptedsize];
    for (int i = 0; i < acceptedsize; i++) {
      decodedSCPNomination.accepted[i] = Value.decode(stream);
    }
    return decodedSCPNomination;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SCPNomination fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SCPNomination fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
