// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct InvokeHostFunctionOp
//  {
//      // Host function to invoke.
//      HostFunction hostFunction;
//      // Per-address authorizations for this host function.
//      SorobanAuthorizationEntry auth<>;
//  };

//  ===========================================================================
public class InvokeHostFunctionOp implements XdrElement {
  public InvokeHostFunctionOp() {}

  private HostFunction hostFunction;

  public HostFunction getHostFunction() {
    return this.hostFunction;
  }

  public void setHostFunction(HostFunction value) {
    this.hostFunction = value;
  }

  private SorobanAuthorizationEntry[] auth;

  public SorobanAuthorizationEntry[] getAuth() {
    return this.auth;
  }

  public void setAuth(SorobanAuthorizationEntry[] value) {
    this.auth = value;
  }

  public static void encode(
      XdrDataOutputStream stream, InvokeHostFunctionOp encodedInvokeHostFunctionOp)
      throws IOException {
    HostFunction.encode(stream, encodedInvokeHostFunctionOp.hostFunction);
    int authsize = encodedInvokeHostFunctionOp.getAuth().length;
    stream.writeInt(authsize);
    for (int i = 0; i < authsize; i++) {
      SorobanAuthorizationEntry.encode(stream, encodedInvokeHostFunctionOp.auth[i]);
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static InvokeHostFunctionOp decode(XdrDataInputStream stream) throws IOException {
    InvokeHostFunctionOp decodedInvokeHostFunctionOp = new InvokeHostFunctionOp();
    decodedInvokeHostFunctionOp.hostFunction = HostFunction.decode(stream);
    int authsize = stream.readInt();
    decodedInvokeHostFunctionOp.auth = new SorobanAuthorizationEntry[authsize];
    for (int i = 0; i < authsize; i++) {
      decodedInvokeHostFunctionOp.auth[i] = SorobanAuthorizationEntry.decode(stream);
    }
    return decodedInvokeHostFunctionOp;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.hostFunction, Arrays.hashCode(this.auth));
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof InvokeHostFunctionOp)) {
      return false;
    }

    InvokeHostFunctionOp other = (InvokeHostFunctionOp) object;
    return Objects.equals(this.hostFunction, other.hostFunction)
        && Arrays.equals(this.auth, other.auth);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static InvokeHostFunctionOp fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static InvokeHostFunctionOp fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private HostFunction hostFunction;
    private SorobanAuthorizationEntry[] auth;

    public Builder hostFunction(HostFunction hostFunction) {
      this.hostFunction = hostFunction;
      return this;
    }

    public Builder auth(SorobanAuthorizationEntry[] auth) {
      this.auth = auth;
      return this;
    }

    public InvokeHostFunctionOp build() {
      InvokeHostFunctionOp val = new InvokeHostFunctionOp();
      val.setHostFunction(this.hostFunction);
      val.setAuth(this.auth);
      return val;
    }
  }
}
