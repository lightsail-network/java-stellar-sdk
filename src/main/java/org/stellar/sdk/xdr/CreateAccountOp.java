// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct CreateAccountOp
//  {
//      AccountID destination; // account to create
//      int64 startingBalance; // amount they end up with
//  };

//  ===========================================================================
public class CreateAccountOp implements XdrElement {
  public CreateAccountOp() {}

  private AccountID destination;

  public AccountID getDestination() {
    return this.destination;
  }

  public void setDestination(AccountID value) {
    this.destination = value;
  }

  private Int64 startingBalance;

  public Int64 getStartingBalance() {
    return this.startingBalance;
  }

  public void setStartingBalance(Int64 value) {
    this.startingBalance = value;
  }

  public static void encode(XdrDataOutputStream stream, CreateAccountOp encodedCreateAccountOp)
      throws IOException {
    AccountID.encode(stream, encodedCreateAccountOp.destination);
    Int64.encode(stream, encodedCreateAccountOp.startingBalance);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static CreateAccountOp decode(XdrDataInputStream stream) throws IOException {
    CreateAccountOp decodedCreateAccountOp = new CreateAccountOp();
    decodedCreateAccountOp.destination = AccountID.decode(stream);
    decodedCreateAccountOp.startingBalance = Int64.decode(stream);
    return decodedCreateAccountOp;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.destination, this.startingBalance);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof CreateAccountOp)) {
      return false;
    }

    CreateAccountOp other = (CreateAccountOp) object;
    return Objects.equals(this.destination, other.destination)
        && Objects.equals(this.startingBalance, other.startingBalance);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static CreateAccountOp fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static CreateAccountOp fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private AccountID destination;
    private Int64 startingBalance;

    public Builder destination(AccountID destination) {
      this.destination = destination;
      return this;
    }

    public Builder startingBalance(Int64 startingBalance) {
      this.startingBalance = startingBalance;
      return this;
    }

    public CreateAccountOp build() {
      CreateAccountOp val = new CreateAccountOp();
      val.setDestination(this.destination);
      val.setStartingBalance(this.startingBalance);
      return val;
    }
  }
}
