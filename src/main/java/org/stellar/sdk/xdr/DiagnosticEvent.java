// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * DiagnosticEvent's original definition in the XDR file is:
 *
 * <pre>
 * struct DiagnosticEvent
 * {
 *     bool inSuccessfulContractCall;
 *     ContractEvent event;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class DiagnosticEvent implements XdrElement {
  private Boolean inSuccessfulContractCall;
  private ContractEvent event;

  public void encode(XdrDataOutputStream stream) throws IOException {
    stream.writeInt(inSuccessfulContractCall ? 1 : 0);
    event.encode(stream);
  }

  public static DiagnosticEvent decode(XdrDataInputStream stream) throws IOException {
    DiagnosticEvent decodedDiagnosticEvent = new DiagnosticEvent();
    decodedDiagnosticEvent.inSuccessfulContractCall = stream.readInt() == 1 ? true : false;
    decodedDiagnosticEvent.event = ContractEvent.decode(stream);
    return decodedDiagnosticEvent;
  }

  public static DiagnosticEvent fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static DiagnosticEvent fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
