// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct EvictionIterator {
//      uint32 bucketListLevel;
//      bool isCurrBucket;
//      uint64 bucketFileOffset;
//  };

//  ===========================================================================
public class EvictionIterator implements XdrElement {
  public EvictionIterator() {}

  private Uint32 bucketListLevel;

  public Uint32 getBucketListLevel() {
    return this.bucketListLevel;
  }

  public void setBucketListLevel(Uint32 value) {
    this.bucketListLevel = value;
  }

  private Boolean isCurrBucket;

  public Boolean getIsCurrBucket() {
    return this.isCurrBucket;
  }

  public void setIsCurrBucket(Boolean value) {
    this.isCurrBucket = value;
  }

  private Uint64 bucketFileOffset;

  public Uint64 getBucketFileOffset() {
    return this.bucketFileOffset;
  }

  public void setBucketFileOffset(Uint64 value) {
    this.bucketFileOffset = value;
  }

  public static void encode(XdrDataOutputStream stream, EvictionIterator encodedEvictionIterator)
      throws IOException {
    Uint32.encode(stream, encodedEvictionIterator.bucketListLevel);
    stream.writeInt(encodedEvictionIterator.isCurrBucket ? 1 : 0);
    Uint64.encode(stream, encodedEvictionIterator.bucketFileOffset);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static EvictionIterator decode(XdrDataInputStream stream) throws IOException {
    EvictionIterator decodedEvictionIterator = new EvictionIterator();
    decodedEvictionIterator.bucketListLevel = Uint32.decode(stream);
    decodedEvictionIterator.isCurrBucket = stream.readInt() == 1 ? true : false;
    decodedEvictionIterator.bucketFileOffset = Uint64.decode(stream);
    return decodedEvictionIterator;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.bucketListLevel, this.isCurrBucket, this.bucketFileOffset);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof EvictionIterator)) {
      return false;
    }

    EvictionIterator other = (EvictionIterator) object;
    return Objects.equals(this.bucketListLevel, other.bucketListLevel)
        && Objects.equals(this.isCurrBucket, other.isCurrBucket)
        && Objects.equals(this.bucketFileOffset, other.bucketFileOffset);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static EvictionIterator fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static EvictionIterator fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private Uint32 bucketListLevel;
    private Boolean isCurrBucket;
    private Uint64 bucketFileOffset;

    public Builder bucketListLevel(Uint32 bucketListLevel) {
      this.bucketListLevel = bucketListLevel;
      return this;
    }

    public Builder isCurrBucket(Boolean isCurrBucket) {
      this.isCurrBucket = isCurrBucket;
      return this;
    }

    public Builder bucketFileOffset(Uint64 bucketFileOffset) {
      this.bucketFileOffset = bucketFileOffset;
      return this;
    }

    public EvictionIterator build() {
      EvictionIterator val = new EvictionIterator();
      val.setBucketListLevel(this.bucketListLevel);
      val.setIsCurrBucket(this.isCurrBucket);
      val.setBucketFileOffset(this.bucketFileOffset);
      return val;
    }
  }
}
