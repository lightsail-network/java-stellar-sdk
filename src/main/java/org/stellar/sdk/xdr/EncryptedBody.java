// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  typedef opaque EncryptedBody<64000>;

//  ===========================================================================
public class EncryptedBody implements XdrElement {
  private byte[] EncryptedBody;

  public EncryptedBody() {}

  public EncryptedBody(byte[] EncryptedBody) {
    this.EncryptedBody = EncryptedBody;
  }

  public byte[] getEncryptedBody() {
    return this.EncryptedBody;
  }

  public void setEncryptedBody(byte[] value) {
    this.EncryptedBody = value;
  }

  public static void encode(XdrDataOutputStream stream, EncryptedBody encodedEncryptedBody)
      throws IOException {
    int EncryptedBodysize = encodedEncryptedBody.EncryptedBody.length;
    stream.writeInt(EncryptedBodysize);
    stream.write(encodedEncryptedBody.getEncryptedBody(), 0, EncryptedBodysize);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static EncryptedBody decode(XdrDataInputStream stream) throws IOException {
    EncryptedBody decodedEncryptedBody = new EncryptedBody();
    int EncryptedBodysize = stream.readInt();
    decodedEncryptedBody.EncryptedBody = new byte[EncryptedBodysize];
    stream.read(decodedEncryptedBody.EncryptedBody, 0, EncryptedBodysize);
    return decodedEncryptedBody;
  }

  @Override
  public int hashCode() {
    return Arrays.hashCode(this.EncryptedBody);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof EncryptedBody)) {
      return false;
    }

    EncryptedBody other = (EncryptedBody) object;
    return Arrays.equals(this.EncryptedBody, other.EncryptedBody);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static EncryptedBody fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static EncryptedBody fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
