// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import java.io.IOException;

// === xdr source ============================================================

//  struct ContractDataEntry {
//      SCAddress contract;
//      SCVal key;
//      ContractDataDurability durability;
//
//      union switch (ContractEntryBodyType bodyType)
//      {
//      case DATA_ENTRY:
//      struct
//      {
//          uint32 flags;
//          SCVal val;
//      } data;
//      case EXPIRATION_EXTENSION:
//          void;
//      } body;
//
//      uint32 expirationLedgerSeq;
//  };

//  ===========================================================================
public class ContractDataEntry implements XdrElement {
  public ContractDataEntry() {}

  private SCAddress contract;

  public SCAddress getContract() {
    return this.contract;
  }

  public void setContract(SCAddress value) {
    this.contract = value;
  }

  private SCVal key;

  public SCVal getKey() {
    return this.key;
  }

  public void setKey(SCVal value) {
    this.key = value;
  }

  private ContractDataDurability durability;

  public ContractDataDurability getDurability() {
    return this.durability;
  }

  public void setDurability(ContractDataDurability value) {
    this.durability = value;
  }

  private ContractDataEntryBody body;

  public ContractDataEntryBody getBody() {
    return this.body;
  }

  public void setBody(ContractDataEntryBody value) {
    this.body = value;
  }

  private Uint32 expirationLedgerSeq;

  public Uint32 getExpirationLedgerSeq() {
    return this.expirationLedgerSeq;
  }

  public void setExpirationLedgerSeq(Uint32 value) {
    this.expirationLedgerSeq = value;
  }

  public static void encode(XdrDataOutputStream stream, ContractDataEntry encodedContractDataEntry)
      throws IOException {
    SCAddress.encode(stream, encodedContractDataEntry.contract);
    SCVal.encode(stream, encodedContractDataEntry.key);
    ContractDataDurability.encode(stream, encodedContractDataEntry.durability);
    ContractDataEntryBody.encode(stream, encodedContractDataEntry.body);
    Uint32.encode(stream, encodedContractDataEntry.expirationLedgerSeq);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static ContractDataEntry decode(XdrDataInputStream stream) throws IOException {
    ContractDataEntry decodedContractDataEntry = new ContractDataEntry();
    decodedContractDataEntry.contract = SCAddress.decode(stream);
    decodedContractDataEntry.key = SCVal.decode(stream);
    decodedContractDataEntry.durability = ContractDataDurability.decode(stream);
    decodedContractDataEntry.body = ContractDataEntryBody.decode(stream);
    decodedContractDataEntry.expirationLedgerSeq = Uint32.decode(stream);
    return decodedContractDataEntry;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(
        this.contract, this.key, this.durability, this.body, this.expirationLedgerSeq);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof ContractDataEntry)) {
      return false;
    }

    ContractDataEntry other = (ContractDataEntry) object;
    return Objects.equal(this.contract, other.contract)
        && Objects.equal(this.key, other.key)
        && Objects.equal(this.durability, other.durability)
        && Objects.equal(this.body, other.body)
        && Objects.equal(this.expirationLedgerSeq, other.expirationLedgerSeq);
  }

  public static final class Builder {
    private SCAddress contract;
    private SCVal key;
    private ContractDataDurability durability;
    private ContractDataEntryBody body;
    private Uint32 expirationLedgerSeq;

    public Builder contract(SCAddress contract) {
      this.contract = contract;
      return this;
    }

    public Builder key(SCVal key) {
      this.key = key;
      return this;
    }

    public Builder durability(ContractDataDurability durability) {
      this.durability = durability;
      return this;
    }

    public Builder body(ContractDataEntryBody body) {
      this.body = body;
      return this;
    }

    public Builder expirationLedgerSeq(Uint32 expirationLedgerSeq) {
      this.expirationLedgerSeq = expirationLedgerSeq;
      return this;
    }

    public ContractDataEntry build() {
      ContractDataEntry val = new ContractDataEntry();
      val.setContract(this.contract);
      val.setKey(this.key);
      val.setDurability(this.durability);
      val.setBody(this.body);
      val.setExpirationLedgerSeq(this.expirationLedgerSeq);
      return val;
    }
  }

  public static class ContractDataEntryBody {
    public ContractDataEntryBody() {}

    ContractEntryBodyType bodyType;

    public ContractEntryBodyType getDiscriminant() {
      return this.bodyType;
    }

    public void setDiscriminant(ContractEntryBodyType value) {
      this.bodyType = value;
    }

    private ContractDataEntryData data;

    public ContractDataEntryData getData() {
      return this.data;
    }

    public void setData(ContractDataEntryData value) {
      this.data = value;
    }

    public static final class Builder {
      private ContractEntryBodyType discriminant;
      private ContractDataEntryData data;

      public Builder discriminant(ContractEntryBodyType discriminant) {
        this.discriminant = discriminant;
        return this;
      }

      public Builder data(ContractDataEntryData data) {
        this.data = data;
        return this;
      }

      public ContractDataEntryBody build() {
        ContractDataEntryBody val = new ContractDataEntryBody();
        val.setDiscriminant(discriminant);
        val.setData(this.data);
        return val;
      }
    }

    public static void encode(
        XdrDataOutputStream stream, ContractDataEntryBody encodedContractDataEntryBody)
        throws IOException {
      // Xdrgen::AST::Identifier
      // ContractEntryBodyType
      stream.writeInt(encodedContractDataEntryBody.getDiscriminant().getValue());
      switch (encodedContractDataEntryBody.getDiscriminant()) {
        case DATA_ENTRY:
          ContractDataEntryData.encode(stream, encodedContractDataEntryBody.data);
          break;
        case EXPIRATION_EXTENSION:
          break;
      }
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static ContractDataEntryBody decode(XdrDataInputStream stream) throws IOException {
      ContractDataEntryBody decodedContractDataEntryBody = new ContractDataEntryBody();
      ContractEntryBodyType discriminant = ContractEntryBodyType.decode(stream);
      decodedContractDataEntryBody.setDiscriminant(discriminant);
      switch (decodedContractDataEntryBody.getDiscriminant()) {
        case DATA_ENTRY:
          decodedContractDataEntryBody.data = ContractDataEntryData.decode(stream);
          break;
        case EXPIRATION_EXTENSION:
          break;
      }
      return decodedContractDataEntryBody;
    }

    @Override
    public int hashCode() {
      return Objects.hashCode(this.data, this.bodyType);
    }

    @Override
    public boolean equals(Object object) {
      if (!(object instanceof ContractDataEntryBody)) {
        return false;
      }

      ContractDataEntryBody other = (ContractDataEntryBody) object;
      return Objects.equal(this.data, other.data) && Objects.equal(this.bodyType, other.bodyType);
    }

    public static class ContractDataEntryData {
      public ContractDataEntryData() {}

      private Uint32 flags;

      public Uint32 getFlags() {
        return this.flags;
      }

      public void setFlags(Uint32 value) {
        this.flags = value;
      }

      private SCVal val;

      public SCVal getVal() {
        return this.val;
      }

      public void setVal(SCVal value) {
        this.val = value;
      }

      public static void encode(
          XdrDataOutputStream stream, ContractDataEntryData encodedContractDataEntryData)
          throws IOException {
        Uint32.encode(stream, encodedContractDataEntryData.flags);
        SCVal.encode(stream, encodedContractDataEntryData.val);
      }

      public void encode(XdrDataOutputStream stream) throws IOException {
        encode(stream, this);
      }

      public static ContractDataEntryData decode(XdrDataInputStream stream) throws IOException {
        ContractDataEntryData decodedContractDataEntryData = new ContractDataEntryData();
        decodedContractDataEntryData.flags = Uint32.decode(stream);
        decodedContractDataEntryData.val = SCVal.decode(stream);
        return decodedContractDataEntryData;
      }

      @Override
      public int hashCode() {
        return Objects.hashCode(this.flags, this.val);
      }

      @Override
      public boolean equals(Object object) {
        if (!(object instanceof ContractDataEntryData)) {
          return false;
        }

        ContractDataEntryData other = (ContractDataEntryData) object;
        return Objects.equal(this.flags, other.flags) && Objects.equal(this.val, other.val);
      }

      public static final class Builder {
        private Uint32 flags;
        private SCVal val;

        public Builder flags(Uint32 flags) {
          this.flags = flags;
          return this;
        }

        public Builder val(SCVal val) {
          this.val = val;
          return this;
        }

        public ContractDataEntryData build() {
          ContractDataEntryData val = new ContractDataEntryData();
          val.setFlags(this.flags);
          val.setVal(this.val);
          return val;
        }
      }
    }
  }
}
