// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct TrustLineEntryExtensionV2
//  {
//      int32 liquidityPoolUseCount;
//
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public class TrustLineEntryExtensionV2 implements XdrElement {
  public TrustLineEntryExtensionV2() {}

  private Int32 liquidityPoolUseCount;

  public Int32 getLiquidityPoolUseCount() {
    return this.liquidityPoolUseCount;
  }

  public void setLiquidityPoolUseCount(Int32 value) {
    this.liquidityPoolUseCount = value;
  }

  private TrustLineEntryExtensionV2Ext ext;

  public TrustLineEntryExtensionV2Ext getExt() {
    return this.ext;
  }

  public void setExt(TrustLineEntryExtensionV2Ext value) {
    this.ext = value;
  }

  public static void encode(
      XdrDataOutputStream stream, TrustLineEntryExtensionV2 encodedTrustLineEntryExtensionV2)
      throws IOException {
    Int32.encode(stream, encodedTrustLineEntryExtensionV2.liquidityPoolUseCount);
    TrustLineEntryExtensionV2Ext.encode(stream, encodedTrustLineEntryExtensionV2.ext);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static TrustLineEntryExtensionV2 decode(XdrDataInputStream stream) throws IOException {
    TrustLineEntryExtensionV2 decodedTrustLineEntryExtensionV2 = new TrustLineEntryExtensionV2();
    decodedTrustLineEntryExtensionV2.liquidityPoolUseCount = Int32.decode(stream);
    decodedTrustLineEntryExtensionV2.ext = TrustLineEntryExtensionV2Ext.decode(stream);
    return decodedTrustLineEntryExtensionV2;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.liquidityPoolUseCount, this.ext);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof TrustLineEntryExtensionV2)) {
      return false;
    }

    TrustLineEntryExtensionV2 other = (TrustLineEntryExtensionV2) object;
    return Objects.equals(this.liquidityPoolUseCount, other.liquidityPoolUseCount)
        && Objects.equals(this.ext, other.ext);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static TrustLineEntryExtensionV2 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static TrustLineEntryExtensionV2 fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private Int32 liquidityPoolUseCount;
    private TrustLineEntryExtensionV2Ext ext;

    public Builder liquidityPoolUseCount(Int32 liquidityPoolUseCount) {
      this.liquidityPoolUseCount = liquidityPoolUseCount;
      return this;
    }

    public Builder ext(TrustLineEntryExtensionV2Ext ext) {
      this.ext = ext;
      return this;
    }

    public TrustLineEntryExtensionV2 build() {
      TrustLineEntryExtensionV2 val = new TrustLineEntryExtensionV2();
      val.setLiquidityPoolUseCount(this.liquidityPoolUseCount);
      val.setExt(this.ext);
      return val;
    }
  }

  public static class TrustLineEntryExtensionV2Ext implements XdrElement {
    public TrustLineEntryExtensionV2Ext() {}

    Integer v;

    public Integer getDiscriminant() {
      return this.v;
    }

    public void setDiscriminant(Integer value) {
      this.v = value;
    }

    public static final class Builder {
      private Integer discriminant;

      public Builder discriminant(Integer discriminant) {
        this.discriminant = discriminant;
        return this;
      }

      public TrustLineEntryExtensionV2Ext build() {
        TrustLineEntryExtensionV2Ext val = new TrustLineEntryExtensionV2Ext();
        val.setDiscriminant(discriminant);
        return val;
      }
    }

    public static void encode(
        XdrDataOutputStream stream,
        TrustLineEntryExtensionV2Ext encodedTrustLineEntryExtensionV2Ext)
        throws IOException {
      // Xdrgen::AST::Typespecs::Int
      // Integer
      stream.writeInt(encodedTrustLineEntryExtensionV2Ext.getDiscriminant().intValue());
      switch (encodedTrustLineEntryExtensionV2Ext.getDiscriminant()) {
        case 0:
          break;
      }
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static TrustLineEntryExtensionV2Ext decode(XdrDataInputStream stream)
        throws IOException {
      TrustLineEntryExtensionV2Ext decodedTrustLineEntryExtensionV2Ext =
          new TrustLineEntryExtensionV2Ext();
      Integer discriminant = stream.readInt();
      decodedTrustLineEntryExtensionV2Ext.setDiscriminant(discriminant);
      switch (decodedTrustLineEntryExtensionV2Ext.getDiscriminant()) {
        case 0:
          break;
      }
      return decodedTrustLineEntryExtensionV2Ext;
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.v);
    }

    @Override
    public boolean equals(Object object) {
      if (!(object instanceof TrustLineEntryExtensionV2Ext)) {
        return false;
      }

      TrustLineEntryExtensionV2Ext other = (TrustLineEntryExtensionV2Ext) object;
      return Objects.equals(this.v, other.v);
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static TrustLineEntryExtensionV2Ext fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static TrustLineEntryExtensionV2Ext fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }
}
