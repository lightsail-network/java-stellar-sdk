// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import java.io.IOException;

// === xdr source ============================================================

//  struct SorobanResources
//  {
//      // The ledger footprint of the transaction.
//      LedgerFootprint footprint;
//      // The maximum number of instructions this transaction can use
//      uint32 instructions;
//
//      // The maximum number of bytes this transaction can read from ledger
//      uint32 readBytes;
//      // The maximum number of bytes this transaction can write to ledger
//      uint32 writeBytes;
//
//      // Maximum size of dynamic metadata produced by this contract (
//      // bytes read from ledger + bytes written to ledger + event bytes written to meta).
//      uint32 extendedMetaDataSizeBytes;
//  };

//  ===========================================================================
public class SorobanResources implements XdrElement {
  public SorobanResources() {}

  private LedgerFootprint footprint;

  public LedgerFootprint getFootprint() {
    return this.footprint;
  }

  public void setFootprint(LedgerFootprint value) {
    this.footprint = value;
  }

  private Uint32 instructions;

  public Uint32 getInstructions() {
    return this.instructions;
  }

  public void setInstructions(Uint32 value) {
    this.instructions = value;
  }

  private Uint32 readBytes;

  public Uint32 getReadBytes() {
    return this.readBytes;
  }

  public void setReadBytes(Uint32 value) {
    this.readBytes = value;
  }

  private Uint32 writeBytes;

  public Uint32 getWriteBytes() {
    return this.writeBytes;
  }

  public void setWriteBytes(Uint32 value) {
    this.writeBytes = value;
  }

  private Uint32 extendedMetaDataSizeBytes;

  public Uint32 getExtendedMetaDataSizeBytes() {
    return this.extendedMetaDataSizeBytes;
  }

  public void setExtendedMetaDataSizeBytes(Uint32 value) {
    this.extendedMetaDataSizeBytes = value;
  }

  public static void encode(XdrDataOutputStream stream, SorobanResources encodedSorobanResources)
      throws IOException {
    LedgerFootprint.encode(stream, encodedSorobanResources.footprint);
    Uint32.encode(stream, encodedSorobanResources.instructions);
    Uint32.encode(stream, encodedSorobanResources.readBytes);
    Uint32.encode(stream, encodedSorobanResources.writeBytes);
    Uint32.encode(stream, encodedSorobanResources.extendedMetaDataSizeBytes);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SorobanResources decode(XdrDataInputStream stream) throws IOException {
    SorobanResources decodedSorobanResources = new SorobanResources();
    decodedSorobanResources.footprint = LedgerFootprint.decode(stream);
    decodedSorobanResources.instructions = Uint32.decode(stream);
    decodedSorobanResources.readBytes = Uint32.decode(stream);
    decodedSorobanResources.writeBytes = Uint32.decode(stream);
    decodedSorobanResources.extendedMetaDataSizeBytes = Uint32.decode(stream);
    return decodedSorobanResources;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(
        this.footprint,
        this.instructions,
        this.readBytes,
        this.writeBytes,
        this.extendedMetaDataSizeBytes);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SorobanResources)) {
      return false;
    }

    SorobanResources other = (SorobanResources) object;
    return Objects.equal(this.footprint, other.footprint)
        && Objects.equal(this.instructions, other.instructions)
        && Objects.equal(this.readBytes, other.readBytes)
        && Objects.equal(this.writeBytes, other.writeBytes)
        && Objects.equal(this.extendedMetaDataSizeBytes, other.extendedMetaDataSizeBytes);
  }

  public static final class Builder {
    private LedgerFootprint footprint;
    private Uint32 instructions;
    private Uint32 readBytes;
    private Uint32 writeBytes;
    private Uint32 extendedMetaDataSizeBytes;

    public Builder footprint(LedgerFootprint footprint) {
      this.footprint = footprint;
      return this;
    }

    public Builder instructions(Uint32 instructions) {
      this.instructions = instructions;
      return this;
    }

    public Builder readBytes(Uint32 readBytes) {
      this.readBytes = readBytes;
      return this;
    }

    public Builder writeBytes(Uint32 writeBytes) {
      this.writeBytes = writeBytes;
      return this;
    }

    public Builder extendedMetaDataSizeBytes(Uint32 extendedMetaDataSizeBytes) {
      this.extendedMetaDataSizeBytes = extendedMetaDataSizeBytes;
      return this;
    }

    public SorobanResources build() {
      SorobanResources val = new SorobanResources();
      val.setFootprint(this.footprint);
      val.setInstructions(this.instructions);
      val.setReadBytes(this.readBytes);
      val.setWriteBytes(this.writeBytes);
      val.setExtendedMetaDataSizeBytes(this.extendedMetaDataSizeBytes);
      return val;
    }
  }
}
