// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * SorobanAuthorizedFunction's original definition in the XDR file is:
 *
 * <pre>
 * union SorobanAuthorizedFunction switch (SorobanAuthorizedFunctionType type)
 * {
 * case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
 *     InvokeContractArgs contractFn;
 * case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
 *     CreateContractArgs createContractHostFn;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class SorobanAuthorizedFunction implements XdrElement {
  private SorobanAuthorizedFunctionType discriminant;
  private InvokeContractArgs contractFn;
  private CreateContractArgs createContractHostFn;

  public static void encode(
      XdrDataOutputStream stream, SorobanAuthorizedFunction encodedSorobanAuthorizedFunction)
      throws IOException {
    // Xdrgen::AST::Identifier
    // SorobanAuthorizedFunctionType
    stream.writeInt(encodedSorobanAuthorizedFunction.getDiscriminant().getValue());
    switch (encodedSorobanAuthorizedFunction.getDiscriminant()) {
      case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
        InvokeContractArgs.encode(stream, encodedSorobanAuthorizedFunction.contractFn);
        break;
      case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
        CreateContractArgs.encode(stream, encodedSorobanAuthorizedFunction.createContractHostFn);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SorobanAuthorizedFunction decode(XdrDataInputStream stream) throws IOException {
    SorobanAuthorizedFunction decodedSorobanAuthorizedFunction = new SorobanAuthorizedFunction();
    SorobanAuthorizedFunctionType discriminant = SorobanAuthorizedFunctionType.decode(stream);
    decodedSorobanAuthorizedFunction.setDiscriminant(discriminant);
    switch (decodedSorobanAuthorizedFunction.getDiscriminant()) {
      case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN:
        decodedSorobanAuthorizedFunction.contractFn = InvokeContractArgs.decode(stream);
        break;
      case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN:
        decodedSorobanAuthorizedFunction.createContractHostFn = CreateContractArgs.decode(stream);
        break;
    }
    return decodedSorobanAuthorizedFunction;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SorobanAuthorizedFunction fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SorobanAuthorizedFunction fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
