// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * LiquidityPoolParameters's original definition in the XDR file is:
 *
 * <pre>
 * union LiquidityPoolParameters switch (LiquidityPoolType type)
 * {
 * case LIQUIDITY_POOL_CONSTANT_PRODUCT:
 *     LiquidityPoolConstantProductParameters constantProduct;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class LiquidityPoolParameters implements XdrElement {
  private LiquidityPoolType discriminant;
  private LiquidityPoolConstantProductParameters constantProduct;

  public void encode(XdrDataOutputStream stream) throws IOException {
    stream.writeInt(discriminant.getValue());
    switch (discriminant) {
      case LIQUIDITY_POOL_CONSTANT_PRODUCT:
        constantProduct.encode(stream);
        break;
    }
  }

  public static LiquidityPoolParameters decode(XdrDataInputStream stream) throws IOException {
    LiquidityPoolParameters decodedLiquidityPoolParameters = new LiquidityPoolParameters();
    LiquidityPoolType discriminant = LiquidityPoolType.decode(stream);
    decodedLiquidityPoolParameters.setDiscriminant(discriminant);
    switch (decodedLiquidityPoolParameters.getDiscriminant()) {
      case LIQUIDITY_POOL_CONSTANT_PRODUCT:
        decodedLiquidityPoolParameters.constantProduct =
            LiquidityPoolConstantProductParameters.decode(stream);
        break;
    }
    return decodedLiquidityPoolParameters;
  }

  public static LiquidityPoolParameters fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static LiquidityPoolParameters fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
