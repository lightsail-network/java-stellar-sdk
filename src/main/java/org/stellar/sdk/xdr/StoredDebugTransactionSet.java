// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

/**
 * StoredDebugTransactionSet's original definition in the XDR file is:
 *
 * <pre>
 * struct StoredDebugTransactionSet
 * {
 * 	StoredTransactionSet txSet;
 * 	uint32 ledgerSeq;
 * 	StellarValue scpValue;
 * };
 * </pre>
 */
public class StoredDebugTransactionSet implements XdrElement {
  public StoredDebugTransactionSet() {}

  private StoredTransactionSet txSet;

  public StoredTransactionSet getTxSet() {
    return this.txSet;
  }

  public void setTxSet(StoredTransactionSet value) {
    this.txSet = value;
  }

  private Uint32 ledgerSeq;

  public Uint32 getLedgerSeq() {
    return this.ledgerSeq;
  }

  public void setLedgerSeq(Uint32 value) {
    this.ledgerSeq = value;
  }

  private StellarValue scpValue;

  public StellarValue getScpValue() {
    return this.scpValue;
  }

  public void setScpValue(StellarValue value) {
    this.scpValue = value;
  }

  public static void encode(
      XdrDataOutputStream stream, StoredDebugTransactionSet encodedStoredDebugTransactionSet)
      throws IOException {
    StoredTransactionSet.encode(stream, encodedStoredDebugTransactionSet.txSet);
    Uint32.encode(stream, encodedStoredDebugTransactionSet.ledgerSeq);
    StellarValue.encode(stream, encodedStoredDebugTransactionSet.scpValue);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static StoredDebugTransactionSet decode(XdrDataInputStream stream) throws IOException {
    StoredDebugTransactionSet decodedStoredDebugTransactionSet = new StoredDebugTransactionSet();
    decodedStoredDebugTransactionSet.txSet = StoredTransactionSet.decode(stream);
    decodedStoredDebugTransactionSet.ledgerSeq = Uint32.decode(stream);
    decodedStoredDebugTransactionSet.scpValue = StellarValue.decode(stream);
    return decodedStoredDebugTransactionSet;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.txSet, this.ledgerSeq, this.scpValue);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof StoredDebugTransactionSet)) {
      return false;
    }

    StoredDebugTransactionSet other = (StoredDebugTransactionSet) object;
    return Objects.equals(this.txSet, other.txSet)
        && Objects.equals(this.ledgerSeq, other.ledgerSeq)
        && Objects.equals(this.scpValue, other.scpValue);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static StoredDebugTransactionSet fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static StoredDebugTransactionSet fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private StoredTransactionSet txSet;
    private Uint32 ledgerSeq;
    private StellarValue scpValue;

    public Builder txSet(StoredTransactionSet txSet) {
      this.txSet = txSet;
      return this;
    }

    public Builder ledgerSeq(Uint32 ledgerSeq) {
      this.ledgerSeq = ledgerSeq;
      return this;
    }

    public Builder scpValue(StellarValue scpValue) {
      this.scpValue = scpValue;
      return this;
    }

    public StoredDebugTransactionSet build() {
      StoredDebugTransactionSet val = new StoredDebugTransactionSet();
      val.setTxSet(this.txSet);
      val.setLedgerSeq(this.ledgerSeq);
      val.setScpValue(this.scpValue);
      return val;
    }
  }
}
