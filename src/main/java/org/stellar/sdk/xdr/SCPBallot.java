// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct SCPBallot
//  {
//      uint32 counter; // n
//      Value value;    // x
//  };

//  ===========================================================================
public class SCPBallot implements XdrElement {
  public SCPBallot() {}

  private Uint32 counter;

  public Uint32 getCounter() {
    return this.counter;
  }

  public void setCounter(Uint32 value) {
    this.counter = value;
  }

  private Value value;

  public Value getValue() {
    return this.value;
  }

  public void setValue(Value value) {
    this.value = value;
  }

  public static void encode(XdrDataOutputStream stream, SCPBallot encodedSCPBallot)
      throws IOException {
    Uint32.encode(stream, encodedSCPBallot.counter);
    Value.encode(stream, encodedSCPBallot.value);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SCPBallot decode(XdrDataInputStream stream) throws IOException {
    SCPBallot decodedSCPBallot = new SCPBallot();
    decodedSCPBallot.counter = Uint32.decode(stream);
    decodedSCPBallot.value = Value.decode(stream);
    return decodedSCPBallot;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.counter, this.value);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SCPBallot)) {
      return false;
    }

    SCPBallot other = (SCPBallot) object;
    return Objects.equals(this.counter, other.counter) && Objects.equals(this.value, other.value);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SCPBallot fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SCPBallot fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private Uint32 counter;
    private Value value;

    public Builder counter(Uint32 counter) {
      this.counter = counter;
      return this;
    }

    public Builder value(Value value) {
      this.value = value;
      return this;
    }

    public SCPBallot build() {
      SCPBallot val = new SCPBallot();
      val.setCounter(this.counter);
      val.setValue(this.value);
      return val;
    }
  }
}
