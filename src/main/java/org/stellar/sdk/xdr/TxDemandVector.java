// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * TxDemandVector's original definition in the XDR file is:
 *
 * <pre>
 * typedef Hash TxDemandVector&lt;TX_DEMAND_VECTOR_MAX_SIZE&gt;;
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class TxDemandVector implements XdrElement {
  private Hash[] TxDemandVector;

  public void encode(XdrDataOutputStream stream) throws IOException {
    int TxDemandVectorSize = getTxDemandVector().length;
    stream.writeInt(TxDemandVectorSize);
    for (int i = 0; i < TxDemandVectorSize; i++) {
      TxDemandVector[i].encode(stream);
    }
  }

  public static TxDemandVector decode(XdrDataInputStream stream) throws IOException {
    TxDemandVector decodedTxDemandVector = new TxDemandVector();
    int TxDemandVectorSize = stream.readInt();
    decodedTxDemandVector.TxDemandVector = new Hash[TxDemandVectorSize];
    for (int i = 0; i < TxDemandVectorSize; i++) {
      decodedTxDemandVector.TxDemandVector[i] = Hash.decode(stream);
    }
    return decodedTxDemandVector;
  }

  public static TxDemandVector fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static TxDemandVector fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
