// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct ClaimLiquidityAtom
//  {
//      PoolID liquidityPoolID;
//
//      // amount and asset taken from the pool
//      Asset assetSold;
//      int64 amountSold;
//
//      // amount and asset sent to the pool
//      Asset assetBought;
//      int64 amountBought;
//  };

//  ===========================================================================
public class ClaimLiquidityAtom implements XdrElement {
  public ClaimLiquidityAtom() {}

  private PoolID liquidityPoolID;

  public PoolID getLiquidityPoolID() {
    return this.liquidityPoolID;
  }

  public void setLiquidityPoolID(PoolID value) {
    this.liquidityPoolID = value;
  }

  private Asset assetSold;

  public Asset getAssetSold() {
    return this.assetSold;
  }

  public void setAssetSold(Asset value) {
    this.assetSold = value;
  }

  private Int64 amountSold;

  public Int64 getAmountSold() {
    return this.amountSold;
  }

  public void setAmountSold(Int64 value) {
    this.amountSold = value;
  }

  private Asset assetBought;

  public Asset getAssetBought() {
    return this.assetBought;
  }

  public void setAssetBought(Asset value) {
    this.assetBought = value;
  }

  private Int64 amountBought;

  public Int64 getAmountBought() {
    return this.amountBought;
  }

  public void setAmountBought(Int64 value) {
    this.amountBought = value;
  }

  public static void encode(
      XdrDataOutputStream stream, ClaimLiquidityAtom encodedClaimLiquidityAtom) throws IOException {
    PoolID.encode(stream, encodedClaimLiquidityAtom.liquidityPoolID);
    Asset.encode(stream, encodedClaimLiquidityAtom.assetSold);
    Int64.encode(stream, encodedClaimLiquidityAtom.amountSold);
    Asset.encode(stream, encodedClaimLiquidityAtom.assetBought);
    Int64.encode(stream, encodedClaimLiquidityAtom.amountBought);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static ClaimLiquidityAtom decode(XdrDataInputStream stream) throws IOException {
    ClaimLiquidityAtom decodedClaimLiquidityAtom = new ClaimLiquidityAtom();
    decodedClaimLiquidityAtom.liquidityPoolID = PoolID.decode(stream);
    decodedClaimLiquidityAtom.assetSold = Asset.decode(stream);
    decodedClaimLiquidityAtom.amountSold = Int64.decode(stream);
    decodedClaimLiquidityAtom.assetBought = Asset.decode(stream);
    decodedClaimLiquidityAtom.amountBought = Int64.decode(stream);
    return decodedClaimLiquidityAtom;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        this.liquidityPoolID, this.assetSold, this.amountSold, this.assetBought, this.amountBought);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof ClaimLiquidityAtom)) {
      return false;
    }

    ClaimLiquidityAtom other = (ClaimLiquidityAtom) object;
    return Objects.equals(this.liquidityPoolID, other.liquidityPoolID)
        && Objects.equals(this.assetSold, other.assetSold)
        && Objects.equals(this.amountSold, other.amountSold)
        && Objects.equals(this.assetBought, other.assetBought)
        && Objects.equals(this.amountBought, other.amountBought);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static ClaimLiquidityAtom fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ClaimLiquidityAtom fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private PoolID liquidityPoolID;
    private Asset assetSold;
    private Int64 amountSold;
    private Asset assetBought;
    private Int64 amountBought;

    public Builder liquidityPoolID(PoolID liquidityPoolID) {
      this.liquidityPoolID = liquidityPoolID;
      return this;
    }

    public Builder assetSold(Asset assetSold) {
      this.assetSold = assetSold;
      return this;
    }

    public Builder amountSold(Int64 amountSold) {
      this.amountSold = amountSold;
      return this;
    }

    public Builder assetBought(Asset assetBought) {
      this.assetBought = assetBought;
      return this;
    }

    public Builder amountBought(Int64 amountBought) {
      this.amountBought = amountBought;
      return this;
    }

    public ClaimLiquidityAtom build() {
      ClaimLiquidityAtom val = new ClaimLiquidityAtom();
      val.setLiquidityPoolID(this.liquidityPoolID);
      val.setAssetSold(this.assetSold);
      val.setAmountSold(this.amountSold);
      val.setAssetBought(this.assetBought);
      val.setAmountBought(this.amountBought);
      return val;
    }
  }
}
