// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import java.io.IOException;

// === xdr source ============================================================

//  struct SCSpecTypeMap
//  {
//      SCSpecTypeDef keyType;
//      SCSpecTypeDef valueType;
//  };

//  ===========================================================================
public class SCSpecTypeMap implements XdrElement {
  public SCSpecTypeMap() {}

  private SCSpecTypeDef keyType;

  public SCSpecTypeDef getKeyType() {
    return this.keyType;
  }

  public void setKeyType(SCSpecTypeDef value) {
    this.keyType = value;
  }

  private SCSpecTypeDef valueType;

  public SCSpecTypeDef getValueType() {
    return this.valueType;
  }

  public void setValueType(SCSpecTypeDef value) {
    this.valueType = value;
  }

  public static void encode(XdrDataOutputStream stream, SCSpecTypeMap encodedSCSpecTypeMap)
      throws IOException {
    SCSpecTypeDef.encode(stream, encodedSCSpecTypeMap.keyType);
    SCSpecTypeDef.encode(stream, encodedSCSpecTypeMap.valueType);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SCSpecTypeMap decode(XdrDataInputStream stream) throws IOException {
    SCSpecTypeMap decodedSCSpecTypeMap = new SCSpecTypeMap();
    decodedSCSpecTypeMap.keyType = SCSpecTypeDef.decode(stream);
    decodedSCSpecTypeMap.valueType = SCSpecTypeDef.decode(stream);
    return decodedSCSpecTypeMap;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.keyType, this.valueType);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SCSpecTypeMap)) {
      return false;
    }

    SCSpecTypeMap other = (SCSpecTypeMap) object;
    return Objects.equal(this.keyType, other.keyType)
        && Objects.equal(this.valueType, other.valueType);
  }

  public static final class Builder {
    private SCSpecTypeDef keyType;
    private SCSpecTypeDef valueType;

    public Builder keyType(SCSpecTypeDef keyType) {
      this.keyType = keyType;
      return this;
    }

    public Builder valueType(SCSpecTypeDef valueType) {
      this.valueType = valueType;
      return this;
    }

    public SCSpecTypeMap build() {
      SCSpecTypeMap val = new SCSpecTypeMap();
      val.setKeyType(this.keyType);
      val.setValueType(this.valueType);
      return val;
    }
  }
}
