// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * SCPQuorumSet's original definition in the XDR file is:
 *
 * <pre>
 * struct SCPQuorumSet
 * {
 *     uint32 threshold;
 *     NodeID validators&lt;&gt;;
 *     SCPQuorumSet innerSets&lt;&gt;;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class SCPQuorumSet implements XdrElement {
  private Uint32 threshold;
  private NodeID[] validators;
  private SCPQuorumSet[] innerSets;

  public static void encode(XdrDataOutputStream stream, SCPQuorumSet encodedSCPQuorumSet)
      throws IOException {
    Uint32.encode(stream, encodedSCPQuorumSet.threshold);
    int validatorsSize = encodedSCPQuorumSet.getValidators().length;
    stream.writeInt(validatorsSize);
    for (int i = 0; i < validatorsSize; i++) {
      NodeID.encode(stream, encodedSCPQuorumSet.validators[i]);
    }
    int innerSetsSize = encodedSCPQuorumSet.getInnerSets().length;
    stream.writeInt(innerSetsSize);
    for (int i = 0; i < innerSetsSize; i++) {
      SCPQuorumSet.encode(stream, encodedSCPQuorumSet.innerSets[i]);
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SCPQuorumSet decode(XdrDataInputStream stream) throws IOException {
    SCPQuorumSet decodedSCPQuorumSet = new SCPQuorumSet();
    decodedSCPQuorumSet.threshold = Uint32.decode(stream);
    int validatorsSize = stream.readInt();
    decodedSCPQuorumSet.validators = new NodeID[validatorsSize];
    for (int i = 0; i < validatorsSize; i++) {
      decodedSCPQuorumSet.validators[i] = NodeID.decode(stream);
    }
    int innerSetsSize = stream.readInt();
    decodedSCPQuorumSet.innerSets = new SCPQuorumSet[innerSetsSize];
    for (int i = 0; i < innerSetsSize; i++) {
      decodedSCPQuorumSet.innerSets[i] = SCPQuorumSet.decode(stream);
    }
    return decodedSCPQuorumSet;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SCPQuorumSet fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SCPQuorumSet fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
