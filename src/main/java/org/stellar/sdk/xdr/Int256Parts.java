// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import java.io.IOException;

// === xdr source ============================================================

//  struct Int256Parts {
//      int64 hi_hi;
//      uint64 hi_lo;
//      uint64 lo_hi;
//      uint64 lo_lo;
//  };

//  ===========================================================================
public class Int256Parts implements XdrElement {
  public Int256Parts() {}

  private Int64 hi_hi;

  public Int64 getHi_hi() {
    return this.hi_hi;
  }

  public void setHi_hi(Int64 value) {
    this.hi_hi = value;
  }

  private Uint64 hi_lo;

  public Uint64 getHi_lo() {
    return this.hi_lo;
  }

  public void setHi_lo(Uint64 value) {
    this.hi_lo = value;
  }

  private Uint64 lo_hi;

  public Uint64 getLo_hi() {
    return this.lo_hi;
  }

  public void setLo_hi(Uint64 value) {
    this.lo_hi = value;
  }

  private Uint64 lo_lo;

  public Uint64 getLo_lo() {
    return this.lo_lo;
  }

  public void setLo_lo(Uint64 value) {
    this.lo_lo = value;
  }

  public static void encode(XdrDataOutputStream stream, Int256Parts encodedInt256Parts)
      throws IOException {
    Int64.encode(stream, encodedInt256Parts.hi_hi);
    Uint64.encode(stream, encodedInt256Parts.hi_lo);
    Uint64.encode(stream, encodedInt256Parts.lo_hi);
    Uint64.encode(stream, encodedInt256Parts.lo_lo);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static Int256Parts decode(XdrDataInputStream stream) throws IOException {
    Int256Parts decodedInt256Parts = new Int256Parts();
    decodedInt256Parts.hi_hi = Int64.decode(stream);
    decodedInt256Parts.hi_lo = Uint64.decode(stream);
    decodedInt256Parts.lo_hi = Uint64.decode(stream);
    decodedInt256Parts.lo_lo = Uint64.decode(stream);
    return decodedInt256Parts;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.hi_hi, this.hi_lo, this.lo_hi, this.lo_lo);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof Int256Parts)) {
      return false;
    }

    Int256Parts other = (Int256Parts) object;
    return Objects.equal(this.hi_hi, other.hi_hi)
        && Objects.equal(this.hi_lo, other.hi_lo)
        && Objects.equal(this.lo_hi, other.lo_hi)
        && Objects.equal(this.lo_lo, other.lo_lo);
  }

  public static final class Builder {
    private Int64 hi_hi;
    private Uint64 hi_lo;
    private Uint64 lo_hi;
    private Uint64 lo_lo;

    public Builder hi_hi(Int64 hi_hi) {
      this.hi_hi = hi_hi;
      return this;
    }

    public Builder hi_lo(Uint64 hi_lo) {
      this.hi_lo = hi_lo;
      return this;
    }

    public Builder lo_hi(Uint64 lo_hi) {
      this.lo_hi = lo_hi;
      return this;
    }

    public Builder lo_lo(Uint64 lo_lo) {
      this.lo_lo = lo_lo;
      return this;
    }

    public Int256Parts build() {
      Int256Parts val = new Int256Parts();
      val.setHi_hi(this.hi_hi);
      val.setHi_lo(this.hi_lo);
      val.setLo_hi(this.lo_hi);
      val.setLo_lo(this.lo_lo);
      return val;
    }
  }
}
