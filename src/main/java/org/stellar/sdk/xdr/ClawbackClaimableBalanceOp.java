// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import com.google.common.io.BaseEncoding;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

// === xdr source ============================================================

//  struct ClawbackClaimableBalanceOp
//  {
//      ClaimableBalanceID balanceID;
//  };

//  ===========================================================================
public class ClawbackClaimableBalanceOp implements XdrElement {
  public ClawbackClaimableBalanceOp() {}

  private ClaimableBalanceID balanceID;

  public ClaimableBalanceID getBalanceID() {
    return this.balanceID;
  }

  public void setBalanceID(ClaimableBalanceID value) {
    this.balanceID = value;
  }

  public static void encode(
      XdrDataOutputStream stream, ClawbackClaimableBalanceOp encodedClawbackClaimableBalanceOp)
      throws IOException {
    ClaimableBalanceID.encode(stream, encodedClawbackClaimableBalanceOp.balanceID);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static ClawbackClaimableBalanceOp decode(XdrDataInputStream stream) throws IOException {
    ClawbackClaimableBalanceOp decodedClawbackClaimableBalanceOp = new ClawbackClaimableBalanceOp();
    decodedClawbackClaimableBalanceOp.balanceID = ClaimableBalanceID.decode(stream);
    return decodedClawbackClaimableBalanceOp;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.balanceID);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof ClawbackClaimableBalanceOp)) {
      return false;
    }

    ClawbackClaimableBalanceOp other = (ClawbackClaimableBalanceOp) object;
    return Objects.equal(this.balanceID, other.balanceID);
  }

  @Override
  public String toXdrBase64() throws IOException {
    BaseEncoding base64Encoding = BaseEncoding.base64();
    return base64Encoding.encode(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static ClawbackClaimableBalanceOp fromXdrBase64(String xdr) throws IOException {
    BaseEncoding base64Encoding = BaseEncoding.base64();
    byte[] bytes = base64Encoding.decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ClawbackClaimableBalanceOp fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private ClaimableBalanceID balanceID;

    public Builder balanceID(ClaimableBalanceID balanceID) {
      this.balanceID = balanceID;
      return this;
    }

    public ClawbackClaimableBalanceOp build() {
      ClawbackClaimableBalanceOp val = new ClawbackClaimableBalanceOp();
      val.setBalanceID(this.balanceID);
      return val;
    }
  }
}
