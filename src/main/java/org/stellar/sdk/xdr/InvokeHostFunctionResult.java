// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import java.io.IOException;

// === xdr source ============================================================

//  union InvokeHostFunctionResult switch (InvokeHostFunctionResultCode code)
//  {
//  case INVOKE_HOST_FUNCTION_SUCCESS:
//      Hash success; // sha256(InvokeHostFunctionSuccessPreImage)
//  case INVOKE_HOST_FUNCTION_MALFORMED:
//  case INVOKE_HOST_FUNCTION_TRAPPED:
//  case INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED:
//  case INVOKE_HOST_FUNCTION_ENTRY_EXPIRED:
//      void;
//  };

//  ===========================================================================
public class InvokeHostFunctionResult implements XdrElement {
  public InvokeHostFunctionResult() {}

  InvokeHostFunctionResultCode code;

  public InvokeHostFunctionResultCode getDiscriminant() {
    return this.code;
  }

  public void setDiscriminant(InvokeHostFunctionResultCode value) {
    this.code = value;
  }

  private Hash success;

  public Hash getSuccess() {
    return this.success;
  }

  public void setSuccess(Hash value) {
    this.success = value;
  }

  public static final class Builder {
    private InvokeHostFunctionResultCode discriminant;
    private Hash success;

    public Builder discriminant(InvokeHostFunctionResultCode discriminant) {
      this.discriminant = discriminant;
      return this;
    }

    public Builder success(Hash success) {
      this.success = success;
      return this;
    }

    public InvokeHostFunctionResult build() {
      InvokeHostFunctionResult val = new InvokeHostFunctionResult();
      val.setDiscriminant(discriminant);
      val.setSuccess(this.success);
      return val;
    }
  }

  public static void encode(
      XdrDataOutputStream stream, InvokeHostFunctionResult encodedInvokeHostFunctionResult)
      throws IOException {
    // Xdrgen::AST::Identifier
    // InvokeHostFunctionResultCode
    stream.writeInt(encodedInvokeHostFunctionResult.getDiscriminant().getValue());
    switch (encodedInvokeHostFunctionResult.getDiscriminant()) {
      case INVOKE_HOST_FUNCTION_SUCCESS:
        Hash.encode(stream, encodedInvokeHostFunctionResult.success);
        break;
      case INVOKE_HOST_FUNCTION_MALFORMED:
      case INVOKE_HOST_FUNCTION_TRAPPED:
      case INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED:
      case INVOKE_HOST_FUNCTION_ENTRY_EXPIRED:
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static InvokeHostFunctionResult decode(XdrDataInputStream stream) throws IOException {
    InvokeHostFunctionResult decodedInvokeHostFunctionResult = new InvokeHostFunctionResult();
    InvokeHostFunctionResultCode discriminant = InvokeHostFunctionResultCode.decode(stream);
    decodedInvokeHostFunctionResult.setDiscriminant(discriminant);
    switch (decodedInvokeHostFunctionResult.getDiscriminant()) {
      case INVOKE_HOST_FUNCTION_SUCCESS:
        decodedInvokeHostFunctionResult.success = Hash.decode(stream);
        break;
      case INVOKE_HOST_FUNCTION_MALFORMED:
      case INVOKE_HOST_FUNCTION_TRAPPED:
      case INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED:
      case INVOKE_HOST_FUNCTION_ENTRY_EXPIRED:
        break;
    }
    return decodedInvokeHostFunctionResult;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.success, this.code);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof InvokeHostFunctionResult)) {
      return false;
    }

    InvokeHostFunctionResult other = (InvokeHostFunctionResult) object;
    return Objects.equal(this.success, other.success) && Objects.equal(this.code, other.code);
  }
}
