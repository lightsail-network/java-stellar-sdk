// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * CreateClaimableBalanceResult's original definition in the XDR file is:
 *
 * <pre>
 * union CreateClaimableBalanceResult switch (
 *     CreateClaimableBalanceResultCode code)
 * {
 * case CREATE_CLAIMABLE_BALANCE_SUCCESS:
 *     ClaimableBalanceID balanceID;
 * case CREATE_CLAIMABLE_BALANCE_MALFORMED:
 * case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE:
 * case CREATE_CLAIMABLE_BALANCE_NO_TRUST:
 * case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
 * case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED:
 *     void;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class CreateClaimableBalanceResult implements XdrElement {
  private CreateClaimableBalanceResultCode discriminant;
  private ClaimableBalanceID balanceID;

  public void encode(XdrDataOutputStream stream) throws IOException {
    stream.writeInt(discriminant.getValue());
    switch (discriminant) {
      case CREATE_CLAIMABLE_BALANCE_SUCCESS:
        balanceID.encode(stream);
        break;
      case CREATE_CLAIMABLE_BALANCE_MALFORMED:
      case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE:
      case CREATE_CLAIMABLE_BALANCE_NO_TRUST:
      case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
      case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED:
        break;
    }
  }

  public static CreateClaimableBalanceResult decode(XdrDataInputStream stream) throws IOException {
    CreateClaimableBalanceResult decodedCreateClaimableBalanceResult =
        new CreateClaimableBalanceResult();
    CreateClaimableBalanceResultCode discriminant = CreateClaimableBalanceResultCode.decode(stream);
    decodedCreateClaimableBalanceResult.setDiscriminant(discriminant);
    switch (decodedCreateClaimableBalanceResult.getDiscriminant()) {
      case CREATE_CLAIMABLE_BALANCE_SUCCESS:
        decodedCreateClaimableBalanceResult.balanceID = ClaimableBalanceID.decode(stream);
        break;
      case CREATE_CLAIMABLE_BALANCE_MALFORMED:
      case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE:
      case CREATE_CLAIMABLE_BALANCE_NO_TRUST:
      case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
      case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED:
        break;
    }
    return decodedCreateClaimableBalanceResult;
  }

  public static CreateClaimableBalanceResult fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static CreateClaimableBalanceResult fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
