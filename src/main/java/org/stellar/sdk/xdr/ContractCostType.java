// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  enum ContractCostType {
//      // Cost of running 1 wasm instruction
//      WasmInsnExec = 0,
//      // Cost of growing wasm linear memory by 1 page
//      WasmMemAlloc = 1,
//      // Cost of allocating a chuck of host memory (in bytes)
//      HostMemAlloc = 2,
//      // Cost of copying a chuck of bytes into a pre-allocated host memory
//      HostMemCpy = 3,
//      // Cost of comparing two slices of host memory
//      HostMemCmp = 4,
//      // Cost of a host function dispatch, not including the actual work done by
//      // the function nor the cost of VM invocation machinary
//      DispatchHostFunction = 5,
//      // Cost of visiting a host object from the host object storage. Exists to
//      // make sure some baseline cost coverage, i.e. repeatly visiting objects
//      // by the guest will always incur some charges.
//      VisitObject = 6,
//      // Cost of serializing an xdr object to bytes
//      ValSer = 7,
//      // Cost of deserializing an xdr object from bytes
//      ValDeser = 8,
//      // Cost of computing the sha256 hash from bytes
//      ComputeSha256Hash = 9,
//      // Cost of computing the ed25519 pubkey from bytes
//      ComputeEd25519PubKey = 10,
//      // Cost of accessing an entry in a Map.
//      MapEntry = 11,
//      // Cost of accessing an entry in a Vec
//      VecEntry = 12,
//      // Cost of verifying ed25519 signature of a payload.
//      VerifyEd25519Sig = 13,
//      // Cost of reading a slice of vm linear memory
//      VmMemRead = 14,
//      // Cost of writing to a slice of vm linear memory
//      VmMemWrite = 15,
//      // Cost of instantiation a VM from wasm bytes code.
//      VmInstantiation = 16,
//      // Cost of instantiation a VM from a cached state.
//      VmCachedInstantiation = 17,
//      // Cost of invoking a function on the VM. If the function is a host function,
//      // additional cost will be covered by `DispatchHostFunction`.
//      InvokeVmFunction = 18,
//      // Cost of computing a keccak256 hash from bytes.
//      ComputeKeccak256Hash = 19,
//      // Cost of computing an ECDSA secp256k1 pubkey from bytes.
//      ComputeEcdsaSecp256k1Key = 20,
//      // Cost of computing an ECDSA secp256k1 signature from bytes.
//      ComputeEcdsaSecp256k1Sig = 21,
//      // Cost of recovering an ECDSA secp256k1 key from a signature.
//      RecoverEcdsaSecp256k1Key = 22,
//      // Cost of int256 addition (`+`) and subtraction (`-`) operations
//      Int256AddSub = 23,
//      // Cost of int256 multiplication (`*`) operation
//      Int256Mul = 24,
//      // Cost of int256 division (`/`) operation
//      Int256Div = 25,
//      // Cost of int256 power (`exp`) operation
//      Int256Pow = 26,
//      // Cost of int256 shift (`shl`, `shr`) operation
//      Int256Shift = 27
//  };

//  ===========================================================================
public enum ContractCostType implements XdrElement {
  WasmInsnExec(0),
  WasmMemAlloc(1),
  HostMemAlloc(2),
  HostMemCpy(3),
  HostMemCmp(4),
  DispatchHostFunction(5),
  VisitObject(6),
  ValSer(7),
  ValDeser(8),
  ComputeSha256Hash(9),
  ComputeEd25519PubKey(10),
  MapEntry(11),
  VecEntry(12),
  VerifyEd25519Sig(13),
  VmMemRead(14),
  VmMemWrite(15),
  VmInstantiation(16),
  VmCachedInstantiation(17),
  InvokeVmFunction(18),
  ComputeKeccak256Hash(19),
  ComputeEcdsaSecp256k1Key(20),
  ComputeEcdsaSecp256k1Sig(21),
  RecoverEcdsaSecp256k1Key(22),
  Int256AddSub(23),
  Int256Mul(24),
  Int256Div(25),
  Int256Pow(26),
  Int256Shift(27),
  ;
  private int mValue;

  ContractCostType(int value) {
    mValue = value;
  }

  public int getValue() {
    return mValue;
  }

  public static ContractCostType decode(XdrDataInputStream stream) throws IOException {
    int value = stream.readInt();
    switch (value) {
      case 0:
        return WasmInsnExec;
      case 1:
        return WasmMemAlloc;
      case 2:
        return HostMemAlloc;
      case 3:
        return HostMemCpy;
      case 4:
        return HostMemCmp;
      case 5:
        return DispatchHostFunction;
      case 6:
        return VisitObject;
      case 7:
        return ValSer;
      case 8:
        return ValDeser;
      case 9:
        return ComputeSha256Hash;
      case 10:
        return ComputeEd25519PubKey;
      case 11:
        return MapEntry;
      case 12:
        return VecEntry;
      case 13:
        return VerifyEd25519Sig;
      case 14:
        return VmMemRead;
      case 15:
        return VmMemWrite;
      case 16:
        return VmInstantiation;
      case 17:
        return VmCachedInstantiation;
      case 18:
        return InvokeVmFunction;
      case 19:
        return ComputeKeccak256Hash;
      case 20:
        return ComputeEcdsaSecp256k1Key;
      case 21:
        return ComputeEcdsaSecp256k1Sig;
      case 22:
        return RecoverEcdsaSecp256k1Key;
      case 23:
        return Int256AddSub;
      case 24:
        return Int256Mul;
      case 25:
        return Int256Div;
      case 26:
        return Int256Pow;
      case 27:
        return Int256Shift;
      default:
        throw new RuntimeException("Unknown enum value: " + value);
    }
  }

  public static void encode(XdrDataOutputStream stream, ContractCostType value) throws IOException {
    stream.writeInt(value.getValue());
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static ContractCostType fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ContractCostType fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
