// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import com.google.common.io.BaseEncoding;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

// === xdr source ============================================================

//  typedef int64 SequenceNumber;

//  ===========================================================================
public class SequenceNumber implements XdrElement {
  private Int64 SequenceNumber;

  public SequenceNumber() {}

  public SequenceNumber(Int64 SequenceNumber) {
    this.SequenceNumber = SequenceNumber;
  }

  public Int64 getSequenceNumber() {
    return this.SequenceNumber;
  }

  public void setSequenceNumber(Int64 value) {
    this.SequenceNumber = value;
  }

  public static void encode(XdrDataOutputStream stream, SequenceNumber encodedSequenceNumber)
      throws IOException {
    Int64.encode(stream, encodedSequenceNumber.SequenceNumber);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SequenceNumber decode(XdrDataInputStream stream) throws IOException {
    SequenceNumber decodedSequenceNumber = new SequenceNumber();
    decodedSequenceNumber.SequenceNumber = Int64.decode(stream);
    return decodedSequenceNumber;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.SequenceNumber);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SequenceNumber)) {
      return false;
    }

    SequenceNumber other = (SequenceNumber) object;
    return Objects.equal(this.SequenceNumber, other.SequenceNumber);
  }

  @Override
  public String toXdrBase64() throws IOException {
    BaseEncoding base64Encoding = BaseEncoding.base64();
    return base64Encoding.encode(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SequenceNumber fromXdrBase64(String xdr) throws IOException {
    BaseEncoding base64Encoding = BaseEncoding.base64();
    byte[] bytes = base64Encoding.decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SequenceNumber fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
