// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * ConfigSettingContractLedgerCostExtV0's original definition in the XDR file is:
 *
 * <pre>
 * struct ConfigSettingContractLedgerCostExtV0
 * {
 *     // Maximum number of RO+RW entries in the transaction footprint.
 *     uint32 txMaxFootprintEntries;
 *     // Fee per 1 KB of data written to the ledger.
 *     // Unlike the rent fee, this is a flat fee that is charged for any ledger
 *     // write, independent of the type of the entry being written.
 *     int64 feeWrite1KB;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class ConfigSettingContractLedgerCostExtV0 implements XdrElement {
  private Uint32 txMaxFootprintEntries;
  private Int64 feeWrite1KB;

  public void encode(XdrDataOutputStream stream) throws IOException {
    txMaxFootprintEntries.encode(stream);
    feeWrite1KB.encode(stream);
  }

  public static ConfigSettingContractLedgerCostExtV0 decode(XdrDataInputStream stream)
      throws IOException {
    ConfigSettingContractLedgerCostExtV0 decodedConfigSettingContractLedgerCostExtV0 =
        new ConfigSettingContractLedgerCostExtV0();
    decodedConfigSettingContractLedgerCostExtV0.txMaxFootprintEntries = Uint32.decode(stream);
    decodedConfigSettingContractLedgerCostExtV0.feeWrite1KB = Int64.decode(stream);
    return decodedConfigSettingContractLedgerCostExtV0;
  }

  public static ConfigSettingContractLedgerCostExtV0 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ConfigSettingContractLedgerCostExtV0 fromXdrByteArray(byte[] xdr)
      throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
