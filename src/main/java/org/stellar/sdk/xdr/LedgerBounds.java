// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import com.google.common.io.BaseEncoding;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

// === xdr source ============================================================

//  struct LedgerBounds
//  {
//      uint32 minLedger;
//      uint32 maxLedger; // 0 here means no maxLedger
//  };

//  ===========================================================================
public class LedgerBounds implements XdrElement {
  public LedgerBounds() {}

  private Uint32 minLedger;

  public Uint32 getMinLedger() {
    return this.minLedger;
  }

  public void setMinLedger(Uint32 value) {
    this.minLedger = value;
  }

  private Uint32 maxLedger;

  public Uint32 getMaxLedger() {
    return this.maxLedger;
  }

  public void setMaxLedger(Uint32 value) {
    this.maxLedger = value;
  }

  public static void encode(XdrDataOutputStream stream, LedgerBounds encodedLedgerBounds)
      throws IOException {
    Uint32.encode(stream, encodedLedgerBounds.minLedger);
    Uint32.encode(stream, encodedLedgerBounds.maxLedger);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static LedgerBounds decode(XdrDataInputStream stream) throws IOException {
    LedgerBounds decodedLedgerBounds = new LedgerBounds();
    decodedLedgerBounds.minLedger = Uint32.decode(stream);
    decodedLedgerBounds.maxLedger = Uint32.decode(stream);
    return decodedLedgerBounds;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.minLedger, this.maxLedger);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof LedgerBounds)) {
      return false;
    }

    LedgerBounds other = (LedgerBounds) object;
    return Objects.equal(this.minLedger, other.minLedger)
        && Objects.equal(this.maxLedger, other.maxLedger);
  }

  @Override
  public String toXdrBase64() throws IOException {
    BaseEncoding base64Encoding = BaseEncoding.base64();
    return base64Encoding.encode(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static LedgerBounds fromXdrBase64(String xdr) throws IOException {
    BaseEncoding base64Encoding = BaseEncoding.base64();
    byte[] bytes = base64Encoding.decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static LedgerBounds fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private Uint32 minLedger;
    private Uint32 maxLedger;

    public Builder minLedger(Uint32 minLedger) {
      this.minLedger = minLedger;
      return this;
    }

    public Builder maxLedger(Uint32 maxLedger) {
      this.maxLedger = maxLedger;
      return this;
    }

    public LedgerBounds build() {
      LedgerBounds val = new LedgerBounds();
      val.setMinLedger(this.minLedger);
      val.setMaxLedger(this.maxLedger);
      return val;
    }
  }
}
