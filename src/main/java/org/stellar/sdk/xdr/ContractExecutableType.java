// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import org.stellar.sdk.Base64Factory;

/**
 * ContractExecutableType's original definition in the XDR file is:
 *
 * <pre>
 * enum ContractExecutableType
 * {
 *     CONTRACT_EXECUTABLE_WASM = 0,
 *     CONTRACT_EXECUTABLE_STELLAR_ASSET = 1
 * };
 * </pre>
 */
public enum ContractExecutableType implements XdrElement {
  CONTRACT_EXECUTABLE_WASM(0),
  CONTRACT_EXECUTABLE_STELLAR_ASSET(1);

  private final int value;

  ContractExecutableType(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static ContractExecutableType decode(XdrDataInputStream stream) throws IOException {
    int value = stream.readInt();
    switch (value) {
      case 0:
        return CONTRACT_EXECUTABLE_WASM;
      case 1:
        return CONTRACT_EXECUTABLE_STELLAR_ASSET;
      default:
        throw new IllegalArgumentException("Unknown enum value: " + value);
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    stream.writeInt(value);
  }

  public static ContractExecutableType fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ContractExecutableType fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
