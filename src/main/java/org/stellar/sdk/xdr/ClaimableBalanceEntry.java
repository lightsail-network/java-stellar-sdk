// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * ClaimableBalanceEntry's original definition in the XDR file is:
 *
 * <pre>
 * struct ClaimableBalanceEntry
 * {
 *     // Unique identifier for this ClaimableBalanceEntry
 *     ClaimableBalanceID balanceID;
 *
 *     // List of claimants with associated predicate
 *     Claimant claimants&lt;10&gt;;
 *
 *     // Any asset including native
 *     Asset asset;
 *
 *     // Amount of asset
 *     int64 amount;
 *
 *     // reserved for future use
 *     union switch (int v)
 *     {
 *     case 0:
 *         void;
 *     case 1:
 *         ClaimableBalanceEntryExtensionV1 v1;
 *     }
 *     ext;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class ClaimableBalanceEntry implements XdrElement {
  private ClaimableBalanceID balanceID;
  private Claimant[] claimants;
  private Asset asset;
  private Int64 amount;
  private ClaimableBalanceEntryExt ext;

  public static void encode(
      XdrDataOutputStream stream, ClaimableBalanceEntry encodedClaimableBalanceEntry)
      throws IOException {
    ClaimableBalanceID.encode(stream, encodedClaimableBalanceEntry.balanceID);
    int claimantsSize = encodedClaimableBalanceEntry.getClaimants().length;
    stream.writeInt(claimantsSize);
    for (int i = 0; i < claimantsSize; i++) {
      Claimant.encode(stream, encodedClaimableBalanceEntry.claimants[i]);
    }
    Asset.encode(stream, encodedClaimableBalanceEntry.asset);
    Int64.encode(stream, encodedClaimableBalanceEntry.amount);
    ClaimableBalanceEntryExt.encode(stream, encodedClaimableBalanceEntry.ext);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static ClaimableBalanceEntry decode(XdrDataInputStream stream) throws IOException {
    ClaimableBalanceEntry decodedClaimableBalanceEntry = new ClaimableBalanceEntry();
    decodedClaimableBalanceEntry.balanceID = ClaimableBalanceID.decode(stream);
    int claimantsSize = stream.readInt();
    decodedClaimableBalanceEntry.claimants = new Claimant[claimantsSize];
    for (int i = 0; i < claimantsSize; i++) {
      decodedClaimableBalanceEntry.claimants[i] = Claimant.decode(stream);
    }
    decodedClaimableBalanceEntry.asset = Asset.decode(stream);
    decodedClaimableBalanceEntry.amount = Int64.decode(stream);
    decodedClaimableBalanceEntry.ext = ClaimableBalanceEntryExt.decode(stream);
    return decodedClaimableBalanceEntry;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static ClaimableBalanceEntry fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ClaimableBalanceEntry fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  /**
   * ClaimableBalanceEntryExt's original definition in the XDR file is:
   *
   * <pre>
   * union switch (int v)
   *     {
   *     case 0:
   *         void;
   *     case 1:
   *         ClaimableBalanceEntryExtensionV1 v1;
   *     }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class ClaimableBalanceEntryExt implements XdrElement {
    private Integer discriminant;
    private ClaimableBalanceEntryExtensionV1 v1;

    public static void encode(
        XdrDataOutputStream stream, ClaimableBalanceEntryExt encodedClaimableBalanceEntryExt)
        throws IOException {
      // Xdrgen::AST::Typespecs::Int
      // Integer
      stream.writeInt(encodedClaimableBalanceEntryExt.getDiscriminant().intValue());
      switch (encodedClaimableBalanceEntryExt.getDiscriminant()) {
        case 0:
          break;
        case 1:
          ClaimableBalanceEntryExtensionV1.encode(stream, encodedClaimableBalanceEntryExt.v1);
          break;
      }
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static ClaimableBalanceEntryExt decode(XdrDataInputStream stream) throws IOException {
      ClaimableBalanceEntryExt decodedClaimableBalanceEntryExt = new ClaimableBalanceEntryExt();
      Integer discriminant = stream.readInt();
      decodedClaimableBalanceEntryExt.setDiscriminant(discriminant);
      switch (decodedClaimableBalanceEntryExt.getDiscriminant()) {
        case 0:
          break;
        case 1:
          decodedClaimableBalanceEntryExt.v1 = ClaimableBalanceEntryExtensionV1.decode(stream);
          break;
      }
      return decodedClaimableBalanceEntryExt;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static ClaimableBalanceEntryExt fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static ClaimableBalanceEntryExt fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }
}
