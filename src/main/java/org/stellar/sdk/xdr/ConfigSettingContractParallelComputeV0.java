// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * ConfigSettingContractParallelComputeV0's original definition in the XDR file is:
 *
 * <pre>
 * struct ConfigSettingContractParallelComputeV0
 * {
 *     // Maximum number of clusters with dependent transactions allowed in a
 *     // stage of parallel tx set component.
 *     // This effectively sets the lower bound on the number of physical threads
 *     // necessary to effectively apply transaction sets in parallel.
 *     uint32 ledgerMaxDependentTxClusters;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class ConfigSettingContractParallelComputeV0 implements XdrElement {
  private Uint32 ledgerMaxDependentTxClusters;

  public void encode(XdrDataOutputStream stream) throws IOException {
    ledgerMaxDependentTxClusters.encode(stream);
  }

  public static ConfigSettingContractParallelComputeV0 decode(XdrDataInputStream stream)
      throws IOException {
    ConfigSettingContractParallelComputeV0 decodedConfigSettingContractParallelComputeV0 =
        new ConfigSettingContractParallelComputeV0();
    decodedConfigSettingContractParallelComputeV0.ledgerMaxDependentTxClusters =
        Uint32.decode(stream);
    return decodedConfigSettingContractParallelComputeV0;
  }

  public static ConfigSettingContractParallelComputeV0 fromXdrBase64(String xdr)
      throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ConfigSettingContractParallelComputeV0 fromXdrByteArray(byte[] xdr)
      throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
