// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;


import java.io.IOException;

import com.google.common.base.Objects;

// === xdr source ============================================================

//  union LedgerUpgrade switch (LedgerUpgradeType type)
//  {
//  case LEDGER_UPGRADE_VERSION:
//      uint32 newLedgerVersion; // update ledgerVersion
//  case LEDGER_UPGRADE_BASE_FEE:
//      uint32 newBaseFee; // update baseFee
//  case LEDGER_UPGRADE_MAX_TX_SET_SIZE:
//      uint32 newMaxTxSetSize; // update maxTxSetSize
//  case LEDGER_UPGRADE_BASE_RESERVE:
//      uint32 newBaseReserve; // update baseReserve
//  };

//  ===========================================================================
public class LedgerUpgrade  {
  public LedgerUpgrade () {}
  LedgerUpgradeType type;
  public LedgerUpgradeType getDiscriminant() {
    return this.type;
  }
  public void setDiscriminant(LedgerUpgradeType value) {
    this.type = value;
  }
  private Uint32 newLedgerVersion;
  public Uint32 getNewLedgerVersion() {
    return this.newLedgerVersion;
  }
  public void setNewLedgerVersion(Uint32 value) {
    this.newLedgerVersion = value;
  }
  private Uint32 newBaseFee;
  public Uint32 getNewBaseFee() {
    return this.newBaseFee;
  }
  public void setNewBaseFee(Uint32 value) {
    this.newBaseFee = value;
  }
  private Uint32 newMaxTxSetSize;
  public Uint32 getNewMaxTxSetSize() {
    return this.newMaxTxSetSize;
  }
  public void setNewMaxTxSetSize(Uint32 value) {
    this.newMaxTxSetSize = value;
  }
  private Uint32 newBaseReserve;
  public Uint32 getNewBaseReserve() {
    return this.newBaseReserve;
  }
  public void setNewBaseReserve(Uint32 value) {
    this.newBaseReserve = value;
  }
  public static void encode(XdrDataOutputStream stream, LedgerUpgrade encodedLedgerUpgrade) throws IOException {
  //Xdrgen::AST::Identifier
  //LedgerUpgradeType
  stream.writeInt(encodedLedgerUpgrade.getDiscriminant().getValue());
  switch (encodedLedgerUpgrade.getDiscriminant()) {
  case LEDGER_UPGRADE_VERSION:
  Uint32.encode(stream, encodedLedgerUpgrade.newLedgerVersion);
  break;
  case LEDGER_UPGRADE_BASE_FEE:
  Uint32.encode(stream, encodedLedgerUpgrade.newBaseFee);
  break;
  case LEDGER_UPGRADE_MAX_TX_SET_SIZE:
  Uint32.encode(stream, encodedLedgerUpgrade.newMaxTxSetSize);
  break;
  case LEDGER_UPGRADE_BASE_RESERVE:
  Uint32.encode(stream, encodedLedgerUpgrade.newBaseReserve);
  break;
  }
  }
  public static LedgerUpgrade decode(XdrDataInputStream stream) throws IOException {
  LedgerUpgrade decodedLedgerUpgrade = new LedgerUpgrade();
  LedgerUpgradeType discriminant = LedgerUpgradeType.decode(stream);
  decodedLedgerUpgrade.setDiscriminant(discriminant);
  switch (decodedLedgerUpgrade.getDiscriminant()) {
  case LEDGER_UPGRADE_VERSION:
  decodedLedgerUpgrade.newLedgerVersion = Uint32.decode(stream);
  break;
  case LEDGER_UPGRADE_BASE_FEE:
  decodedLedgerUpgrade.newBaseFee = Uint32.decode(stream);
  break;
  case LEDGER_UPGRADE_MAX_TX_SET_SIZE:
  decodedLedgerUpgrade.newMaxTxSetSize = Uint32.decode(stream);
  break;
  case LEDGER_UPGRADE_BASE_RESERVE:
  decodedLedgerUpgrade.newBaseReserve = Uint32.decode(stream);
  break;
  }
    return decodedLedgerUpgrade;
  }
  @Override
  public int hashCode() {
    return Objects.hashCode(this.newLedgerVersion, this.newBaseFee, this.newMaxTxSetSize, this.newBaseReserve, this.type);
  }
  @Override
  public boolean equals(Object object) {
    if (object == null || !(object instanceof LedgerUpgrade)) {
      return false;
    }

    LedgerUpgrade other = (LedgerUpgrade) object;
    return Objects.equal(this.newLedgerVersion, other.newLedgerVersion) && Objects.equal(this.newBaseFee, other.newBaseFee) && Objects.equal(this.newMaxTxSetSize, other.newMaxTxSetSize) && Objects.equal(this.newBaseReserve, other.newBaseReserve) && Objects.equal(this.type, other.type);
  }
}
