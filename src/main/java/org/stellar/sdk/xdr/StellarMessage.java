// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * StellarMessage's original definition in the XDR file is:
 *
 * <pre>
 * union StellarMessage switch (MessageType type)
 * {
 * case ERROR_MSG:
 *     Error error;
 * case HELLO:
 *     Hello hello;
 * case AUTH:
 *     Auth auth;
 * case DONT_HAVE:
 *     DontHave dontHave;
 * case GET_PEERS:
 *     void;
 * case PEERS:
 *     PeerAddress peers&lt;100&gt;;
 *
 * case GET_TX_SET:
 *     uint256 txSetHash;
 * case TX_SET:
 *     TransactionSet txSet;
 * case GENERALIZED_TX_SET:
 *     GeneralizedTransactionSet generalizedTxSet;
 *
 * case TRANSACTION:
 *     TransactionEnvelope transaction;
 *
 * case SURVEY_REQUEST:
 *     SignedSurveyRequestMessage signedSurveyRequestMessage;
 *
 * case SURVEY_RESPONSE:
 *     SignedSurveyResponseMessage signedSurveyResponseMessage;
 *
 * // SCP
 * case GET_SCP_QUORUMSET:
 *     uint256 qSetHash;
 * case SCP_QUORUMSET:
 *     SCPQuorumSet qSet;
 * case SCP_MESSAGE:
 *     SCPEnvelope envelope;
 * case GET_SCP_STATE:
 *     uint32 getSCPLedgerSeq; // ledger seq requested ; if 0, requests the latest
 * case SEND_MORE:
 *     SendMore sendMoreMessage;
 * case SEND_MORE_EXTENDED:
 *     SendMoreExtended sendMoreExtendedMessage;
 * // Pull mode
 * case FLOOD_ADVERT:
 *      FloodAdvert floodAdvert;
 * case FLOOD_DEMAND:
 *      FloodDemand floodDemand;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class StellarMessage implements XdrElement {
  private MessageType discriminant;
  private Error error;
  private Hello hello;
  private Auth auth;
  private DontHave dontHave;
  private PeerAddress[] peers;
  private Uint256 txSetHash;
  private TransactionSet txSet;
  private GeneralizedTransactionSet generalizedTxSet;
  private TransactionEnvelope transaction;
  private SignedSurveyRequestMessage signedSurveyRequestMessage;
  private SignedSurveyResponseMessage signedSurveyResponseMessage;
  private Uint256 qSetHash;
  private SCPQuorumSet qSet;
  private SCPEnvelope envelope;
  private Uint32 getSCPLedgerSeq;
  private SendMore sendMoreMessage;
  private SendMoreExtended sendMoreExtendedMessage;
  private FloodAdvert floodAdvert;
  private FloodDemand floodDemand;

  public static void encode(XdrDataOutputStream stream, StellarMessage encodedStellarMessage)
      throws IOException {
    // Xdrgen::AST::Identifier
    // MessageType
    stream.writeInt(encodedStellarMessage.getDiscriminant().getValue());
    switch (encodedStellarMessage.getDiscriminant()) {
      case ERROR_MSG:
        Error.encode(stream, encodedStellarMessage.error);
        break;
      case HELLO:
        Hello.encode(stream, encodedStellarMessage.hello);
        break;
      case AUTH:
        Auth.encode(stream, encodedStellarMessage.auth);
        break;
      case DONT_HAVE:
        DontHave.encode(stream, encodedStellarMessage.dontHave);
        break;
      case GET_PEERS:
        break;
      case PEERS:
        int peersSize = encodedStellarMessage.getPeers().length;
        stream.writeInt(peersSize);
        for (int i = 0; i < peersSize; i++) {
          PeerAddress.encode(stream, encodedStellarMessage.peers[i]);
        }
        break;
      case GET_TX_SET:
        Uint256.encode(stream, encodedStellarMessage.txSetHash);
        break;
      case TX_SET:
        TransactionSet.encode(stream, encodedStellarMessage.txSet);
        break;
      case GENERALIZED_TX_SET:
        GeneralizedTransactionSet.encode(stream, encodedStellarMessage.generalizedTxSet);
        break;
      case TRANSACTION:
        TransactionEnvelope.encode(stream, encodedStellarMessage.transaction);
        break;
      case SURVEY_REQUEST:
        SignedSurveyRequestMessage.encode(stream, encodedStellarMessage.signedSurveyRequestMessage);
        break;
      case SURVEY_RESPONSE:
        SignedSurveyResponseMessage.encode(
            stream, encodedStellarMessage.signedSurveyResponseMessage);
        break;
      case GET_SCP_QUORUMSET:
        Uint256.encode(stream, encodedStellarMessage.qSetHash);
        break;
      case SCP_QUORUMSET:
        SCPQuorumSet.encode(stream, encodedStellarMessage.qSet);
        break;
      case SCP_MESSAGE:
        SCPEnvelope.encode(stream, encodedStellarMessage.envelope);
        break;
      case GET_SCP_STATE:
        Uint32.encode(stream, encodedStellarMessage.getSCPLedgerSeq);
        break;
      case SEND_MORE:
        SendMore.encode(stream, encodedStellarMessage.sendMoreMessage);
        break;
      case SEND_MORE_EXTENDED:
        SendMoreExtended.encode(stream, encodedStellarMessage.sendMoreExtendedMessage);
        break;
      case FLOOD_ADVERT:
        FloodAdvert.encode(stream, encodedStellarMessage.floodAdvert);
        break;
      case FLOOD_DEMAND:
        FloodDemand.encode(stream, encodedStellarMessage.floodDemand);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static StellarMessage decode(XdrDataInputStream stream) throws IOException {
    StellarMessage decodedStellarMessage = new StellarMessage();
    MessageType discriminant = MessageType.decode(stream);
    decodedStellarMessage.setDiscriminant(discriminant);
    switch (decodedStellarMessage.getDiscriminant()) {
      case ERROR_MSG:
        decodedStellarMessage.error = Error.decode(stream);
        break;
      case HELLO:
        decodedStellarMessage.hello = Hello.decode(stream);
        break;
      case AUTH:
        decodedStellarMessage.auth = Auth.decode(stream);
        break;
      case DONT_HAVE:
        decodedStellarMessage.dontHave = DontHave.decode(stream);
        break;
      case GET_PEERS:
        break;
      case PEERS:
        int peersSize = stream.readInt();
        decodedStellarMessage.peers = new PeerAddress[peersSize];
        for (int i = 0; i < peersSize; i++) {
          decodedStellarMessage.peers[i] = PeerAddress.decode(stream);
        }
        break;
      case GET_TX_SET:
        decodedStellarMessage.txSetHash = Uint256.decode(stream);
        break;
      case TX_SET:
        decodedStellarMessage.txSet = TransactionSet.decode(stream);
        break;
      case GENERALIZED_TX_SET:
        decodedStellarMessage.generalizedTxSet = GeneralizedTransactionSet.decode(stream);
        break;
      case TRANSACTION:
        decodedStellarMessage.transaction = TransactionEnvelope.decode(stream);
        break;
      case SURVEY_REQUEST:
        decodedStellarMessage.signedSurveyRequestMessage =
            SignedSurveyRequestMessage.decode(stream);
        break;
      case SURVEY_RESPONSE:
        decodedStellarMessage.signedSurveyResponseMessage =
            SignedSurveyResponseMessage.decode(stream);
        break;
      case GET_SCP_QUORUMSET:
        decodedStellarMessage.qSetHash = Uint256.decode(stream);
        break;
      case SCP_QUORUMSET:
        decodedStellarMessage.qSet = SCPQuorumSet.decode(stream);
        break;
      case SCP_MESSAGE:
        decodedStellarMessage.envelope = SCPEnvelope.decode(stream);
        break;
      case GET_SCP_STATE:
        decodedStellarMessage.getSCPLedgerSeq = Uint32.decode(stream);
        break;
      case SEND_MORE:
        decodedStellarMessage.sendMoreMessage = SendMore.decode(stream);
        break;
      case SEND_MORE_EXTENDED:
        decodedStellarMessage.sendMoreExtendedMessage = SendMoreExtended.decode(stream);
        break;
      case FLOOD_ADVERT:
        decodedStellarMessage.floodAdvert = FloodAdvert.decode(stream);
        break;
      case FLOOD_DEMAND:
        decodedStellarMessage.floodDemand = FloodDemand.decode(stream);
        break;
    }
    return decodedStellarMessage;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static StellarMessage fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static StellarMessage fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
