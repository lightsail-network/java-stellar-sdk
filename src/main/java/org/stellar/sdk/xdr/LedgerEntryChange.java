// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * LedgerEntryChange's original definition in the XDR file is:
 *
 * <pre>
 * union LedgerEntryChange switch (LedgerEntryChangeType type)
 * {
 * case LEDGER_ENTRY_CREATED:
 *     LedgerEntry created;
 * case LEDGER_ENTRY_UPDATED:
 *     LedgerEntry updated;
 * case LEDGER_ENTRY_REMOVED:
 *     LedgerKey removed;
 * case LEDGER_ENTRY_STATE:
 *     LedgerEntry state;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class LedgerEntryChange implements XdrElement {
  private LedgerEntryChangeType discriminant;
  private LedgerEntry created;
  private LedgerEntry updated;
  private LedgerKey removed;
  private LedgerEntry state;

  public static void encode(XdrDataOutputStream stream, LedgerEntryChange encodedLedgerEntryChange)
      throws IOException {
    // Xdrgen::AST::Identifier
    // LedgerEntryChangeType
    stream.writeInt(encodedLedgerEntryChange.getDiscriminant().getValue());
    switch (encodedLedgerEntryChange.getDiscriminant()) {
      case LEDGER_ENTRY_CREATED:
        LedgerEntry.encode(stream, encodedLedgerEntryChange.created);
        break;
      case LEDGER_ENTRY_UPDATED:
        LedgerEntry.encode(stream, encodedLedgerEntryChange.updated);
        break;
      case LEDGER_ENTRY_REMOVED:
        LedgerKey.encode(stream, encodedLedgerEntryChange.removed);
        break;
      case LEDGER_ENTRY_STATE:
        LedgerEntry.encode(stream, encodedLedgerEntryChange.state);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static LedgerEntryChange decode(XdrDataInputStream stream) throws IOException {
    LedgerEntryChange decodedLedgerEntryChange = new LedgerEntryChange();
    LedgerEntryChangeType discriminant = LedgerEntryChangeType.decode(stream);
    decodedLedgerEntryChange.setDiscriminant(discriminant);
    switch (decodedLedgerEntryChange.getDiscriminant()) {
      case LEDGER_ENTRY_CREATED:
        decodedLedgerEntryChange.created = LedgerEntry.decode(stream);
        break;
      case LEDGER_ENTRY_UPDATED:
        decodedLedgerEntryChange.updated = LedgerEntry.decode(stream);
        break;
      case LEDGER_ENTRY_REMOVED:
        decodedLedgerEntryChange.removed = LedgerKey.decode(stream);
        break;
      case LEDGER_ENTRY_STATE:
        decodedLedgerEntryChange.state = LedgerEntry.decode(stream);
        break;
    }
    return decodedLedgerEntryChange;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static LedgerEntryChange fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static LedgerEntryChange fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
