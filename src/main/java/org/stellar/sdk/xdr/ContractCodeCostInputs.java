// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * ContractCodeCostInputs's original definition in the XDR file is:
 *
 * <pre>
 * struct ContractCodeCostInputs {
 *     ExtensionPoint ext;
 *     uint32 nInstructions;
 *     uint32 nFunctions;
 *     uint32 nGlobals;
 *     uint32 nTableEntries;
 *     uint32 nTypes;
 *     uint32 nDataSegments;
 *     uint32 nElemSegments;
 *     uint32 nImports;
 *     uint32 nExports;
 *     uint32 nDataSegmentBytes;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class ContractCodeCostInputs implements XdrElement {
  private ExtensionPoint ext;
  private Uint32 nInstructions;
  private Uint32 nFunctions;
  private Uint32 nGlobals;
  private Uint32 nTableEntries;
  private Uint32 nTypes;
  private Uint32 nDataSegments;
  private Uint32 nElemSegments;
  private Uint32 nImports;
  private Uint32 nExports;
  private Uint32 nDataSegmentBytes;

  public static void encode(
      XdrDataOutputStream stream, ContractCodeCostInputs encodedContractCodeCostInputs)
      throws IOException {
    ExtensionPoint.encode(stream, encodedContractCodeCostInputs.ext);
    Uint32.encode(stream, encodedContractCodeCostInputs.nInstructions);
    Uint32.encode(stream, encodedContractCodeCostInputs.nFunctions);
    Uint32.encode(stream, encodedContractCodeCostInputs.nGlobals);
    Uint32.encode(stream, encodedContractCodeCostInputs.nTableEntries);
    Uint32.encode(stream, encodedContractCodeCostInputs.nTypes);
    Uint32.encode(stream, encodedContractCodeCostInputs.nDataSegments);
    Uint32.encode(stream, encodedContractCodeCostInputs.nElemSegments);
    Uint32.encode(stream, encodedContractCodeCostInputs.nImports);
    Uint32.encode(stream, encodedContractCodeCostInputs.nExports);
    Uint32.encode(stream, encodedContractCodeCostInputs.nDataSegmentBytes);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static ContractCodeCostInputs decode(XdrDataInputStream stream) throws IOException {
    ContractCodeCostInputs decodedContractCodeCostInputs = new ContractCodeCostInputs();
    decodedContractCodeCostInputs.ext = ExtensionPoint.decode(stream);
    decodedContractCodeCostInputs.nInstructions = Uint32.decode(stream);
    decodedContractCodeCostInputs.nFunctions = Uint32.decode(stream);
    decodedContractCodeCostInputs.nGlobals = Uint32.decode(stream);
    decodedContractCodeCostInputs.nTableEntries = Uint32.decode(stream);
    decodedContractCodeCostInputs.nTypes = Uint32.decode(stream);
    decodedContractCodeCostInputs.nDataSegments = Uint32.decode(stream);
    decodedContractCodeCostInputs.nElemSegments = Uint32.decode(stream);
    decodedContractCodeCostInputs.nImports = Uint32.decode(stream);
    decodedContractCodeCostInputs.nExports = Uint32.decode(stream);
    decodedContractCodeCostInputs.nDataSegmentBytes = Uint32.decode(stream);
    return decodedContractCodeCostInputs;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static ContractCodeCostInputs fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ContractCodeCostInputs fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
