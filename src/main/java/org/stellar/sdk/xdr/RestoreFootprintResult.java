// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * RestoreFootprintResult's original definition in the XDR file is:
 *
 * <pre>
 * union RestoreFootprintResult switch (RestoreFootprintResultCode code)
 * {
 * case RESTORE_FOOTPRINT_SUCCESS:
 *     void;
 * case RESTORE_FOOTPRINT_MALFORMED:
 * case RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED:
 * case RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE:
 *     void;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class RestoreFootprintResult implements XdrElement {
  private RestoreFootprintResultCode discriminant;

  public static void encode(
      XdrDataOutputStream stream, RestoreFootprintResult encodedRestoreFootprintResult)
      throws IOException {
    // Xdrgen::AST::Identifier
    // RestoreFootprintResultCode
    stream.writeInt(encodedRestoreFootprintResult.getDiscriminant().getValue());
    switch (encodedRestoreFootprintResult.getDiscriminant()) {
      case RESTORE_FOOTPRINT_SUCCESS:
        break;
      case RESTORE_FOOTPRINT_MALFORMED:
      case RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED:
      case RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE:
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static RestoreFootprintResult decode(XdrDataInputStream stream) throws IOException {
    RestoreFootprintResult decodedRestoreFootprintResult = new RestoreFootprintResult();
    RestoreFootprintResultCode discriminant = RestoreFootprintResultCode.decode(stream);
    decodedRestoreFootprintResult.setDiscriminant(discriminant);
    switch (decodedRestoreFootprintResult.getDiscriminant()) {
      case RESTORE_FOOTPRINT_SUCCESS:
        break;
      case RESTORE_FOOTPRINT_MALFORMED:
      case RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED:
      case RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE:
        break;
    }
    return decodedRestoreFootprintResult;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static RestoreFootprintResult fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static RestoreFootprintResult fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
