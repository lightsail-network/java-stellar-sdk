// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * SignerKey's original definition in the XDR file is:
 *
 * <pre>
 * union SignerKey switch (SignerKeyType type)
 * {
 * case SIGNER_KEY_TYPE_ED25519:
 *     uint256 ed25519;
 * case SIGNER_KEY_TYPE_PRE_AUTH_TX:
 *     /&#42; SHA-256 Hash of TransactionSignaturePayload structure &#42;/
 *     uint256 preAuthTx;
 * case SIGNER_KEY_TYPE_HASH_X:
 *     /&#42; Hash of random 256 bit preimage X &#42;/
 *     uint256 hashX;
 * case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
 *     struct
 *     {
 *         /&#42; Public key that must sign the payload. &#42;/
 *         uint256 ed25519;
 *         /&#42; Payload to be raw signed by ed25519. &#42;/
 *         opaque payload&lt;64&gt;;
 *     } ed25519SignedPayload;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class SignerKey implements XdrElement {
  private SignerKeyType discriminant;
  private Uint256 ed25519;
  private Uint256 preAuthTx;
  private Uint256 hashX;
  private SignerKeyEd25519SignedPayload ed25519SignedPayload;

  public static void encode(XdrDataOutputStream stream, SignerKey encodedSignerKey)
      throws IOException {
    // Xdrgen::AST::Identifier
    // SignerKeyType
    stream.writeInt(encodedSignerKey.getDiscriminant().getValue());
    switch (encodedSignerKey.getDiscriminant()) {
      case SIGNER_KEY_TYPE_ED25519:
        Uint256.encode(stream, encodedSignerKey.ed25519);
        break;
      case SIGNER_KEY_TYPE_PRE_AUTH_TX:
        Uint256.encode(stream, encodedSignerKey.preAuthTx);
        break;
      case SIGNER_KEY_TYPE_HASH_X:
        Uint256.encode(stream, encodedSignerKey.hashX);
        break;
      case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
        SignerKeyEd25519SignedPayload.encode(stream, encodedSignerKey.ed25519SignedPayload);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SignerKey decode(XdrDataInputStream stream) throws IOException {
    SignerKey decodedSignerKey = new SignerKey();
    SignerKeyType discriminant = SignerKeyType.decode(stream);
    decodedSignerKey.setDiscriminant(discriminant);
    switch (decodedSignerKey.getDiscriminant()) {
      case SIGNER_KEY_TYPE_ED25519:
        decodedSignerKey.ed25519 = Uint256.decode(stream);
        break;
      case SIGNER_KEY_TYPE_PRE_AUTH_TX:
        decodedSignerKey.preAuthTx = Uint256.decode(stream);
        break;
      case SIGNER_KEY_TYPE_HASH_X:
        decodedSignerKey.hashX = Uint256.decode(stream);
        break;
      case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
        decodedSignerKey.ed25519SignedPayload = SignerKeyEd25519SignedPayload.decode(stream);
        break;
    }
    return decodedSignerKey;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SignerKey fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SignerKey fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  /**
   * SignerKeyEd25519SignedPayload's original definition in the XDR file is:
   *
   * <pre>
   * struct
   *     {
   *         /&#42; Public key that must sign the payload. &#42;/
   *         uint256 ed25519;
   *         /&#42; Payload to be raw signed by ed25519. &#42;/
   *         opaque payload&lt;64&gt;;
   *     }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class SignerKeyEd25519SignedPayload implements XdrElement {
    private Uint256 ed25519;
    private byte[] payload;

    public static void encode(
        XdrDataOutputStream stream,
        SignerKeyEd25519SignedPayload encodedSignerKeyEd25519SignedPayload)
        throws IOException {
      Uint256.encode(stream, encodedSignerKeyEd25519SignedPayload.ed25519);
      int payloadSize = encodedSignerKeyEd25519SignedPayload.payload.length;
      stream.writeInt(payloadSize);
      stream.write(encodedSignerKeyEd25519SignedPayload.getPayload(), 0, payloadSize);
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static SignerKeyEd25519SignedPayload decode(XdrDataInputStream stream)
        throws IOException {
      SignerKeyEd25519SignedPayload decodedSignerKeyEd25519SignedPayload =
          new SignerKeyEd25519SignedPayload();
      decodedSignerKeyEd25519SignedPayload.ed25519 = Uint256.decode(stream);
      int payloadSize = stream.readInt();
      decodedSignerKeyEd25519SignedPayload.payload = new byte[payloadSize];
      stream.read(decodedSignerKeyEd25519SignedPayload.payload, 0, payloadSize);
      return decodedSignerKeyEd25519SignedPayload;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static SignerKeyEd25519SignedPayload fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static SignerKeyEd25519SignedPayload fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }
}
