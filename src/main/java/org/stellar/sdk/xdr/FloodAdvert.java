// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct FloodAdvert
//  {
//      TxAdvertVector txHashes;
//  };

//  ===========================================================================
public class FloodAdvert implements XdrElement {
  public FloodAdvert() {}

  private TxAdvertVector txHashes;

  public TxAdvertVector getTxHashes() {
    return this.txHashes;
  }

  public void setTxHashes(TxAdvertVector value) {
    this.txHashes = value;
  }

  public static void encode(XdrDataOutputStream stream, FloodAdvert encodedFloodAdvert)
      throws IOException {
    TxAdvertVector.encode(stream, encodedFloodAdvert.txHashes);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static FloodAdvert decode(XdrDataInputStream stream) throws IOException {
    FloodAdvert decodedFloodAdvert = new FloodAdvert();
    decodedFloodAdvert.txHashes = TxAdvertVector.decode(stream);
    return decodedFloodAdvert;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.txHashes);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof FloodAdvert)) {
      return false;
    }

    FloodAdvert other = (FloodAdvert) object;
    return Objects.equals(this.txHashes, other.txHashes);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static FloodAdvert fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static FloodAdvert fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private TxAdvertVector txHashes;

    public Builder txHashes(TxAdvertVector txHashes) {
      this.txHashes = txHashes;
      return this;
    }

    public FloodAdvert build() {
      FloodAdvert val = new FloodAdvert();
      val.setTxHashes(this.txHashes);
      return val;
    }
  }
}
