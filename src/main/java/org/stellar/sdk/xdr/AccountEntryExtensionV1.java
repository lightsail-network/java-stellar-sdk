// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import com.google.common.base.Objects;
import java.io.IOException;

// === xdr source ============================================================

//  struct AccountEntryExtensionV1
//  {
//      Liabilities liabilities;
//
//      union switch (int v)
//      {
//      case 0:
//          void;
//      case 2:
//          AccountEntryExtensionV2 v2;
//      }
//      ext;
//  };

//  ===========================================================================
public class AccountEntryExtensionV1 implements XdrElement {
  public AccountEntryExtensionV1() {}

  private Liabilities liabilities;

  public Liabilities getLiabilities() {
    return this.liabilities;
  }

  public void setLiabilities(Liabilities value) {
    this.liabilities = value;
  }

  private AccountEntryExtensionV1Ext ext;

  public AccountEntryExtensionV1Ext getExt() {
    return this.ext;
  }

  public void setExt(AccountEntryExtensionV1Ext value) {
    this.ext = value;
  }

  public static void encode(
      XdrDataOutputStream stream, AccountEntryExtensionV1 encodedAccountEntryExtensionV1)
      throws IOException {
    Liabilities.encode(stream, encodedAccountEntryExtensionV1.liabilities);
    AccountEntryExtensionV1Ext.encode(stream, encodedAccountEntryExtensionV1.ext);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static AccountEntryExtensionV1 decode(XdrDataInputStream stream) throws IOException {
    AccountEntryExtensionV1 decodedAccountEntryExtensionV1 = new AccountEntryExtensionV1();
    decodedAccountEntryExtensionV1.liabilities = Liabilities.decode(stream);
    decodedAccountEntryExtensionV1.ext = AccountEntryExtensionV1Ext.decode(stream);
    return decodedAccountEntryExtensionV1;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.liabilities, this.ext);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof AccountEntryExtensionV1)) {
      return false;
    }

    AccountEntryExtensionV1 other = (AccountEntryExtensionV1) object;
    return Objects.equal(this.liabilities, other.liabilities) && Objects.equal(this.ext, other.ext);
  }

  public static final class Builder {
    private Liabilities liabilities;
    private AccountEntryExtensionV1Ext ext;

    public Builder liabilities(Liabilities liabilities) {
      this.liabilities = liabilities;
      return this;
    }

    public Builder ext(AccountEntryExtensionV1Ext ext) {
      this.ext = ext;
      return this;
    }

    public AccountEntryExtensionV1 build() {
      AccountEntryExtensionV1 val = new AccountEntryExtensionV1();
      val.setLiabilities(liabilities);
      val.setExt(ext);
      return val;
    }
  }

  public static class AccountEntryExtensionV1Ext {
    public AccountEntryExtensionV1Ext() {}

    Integer v;

    public Integer getDiscriminant() {
      return this.v;
    }

    public void setDiscriminant(Integer value) {
      this.v = value;
    }

    private AccountEntryExtensionV2 v2;

    public AccountEntryExtensionV2 getV2() {
      return this.v2;
    }

    public void setV2(AccountEntryExtensionV2 value) {
      this.v2 = value;
    }

    public static final class Builder {
      private Integer discriminant;
      private AccountEntryExtensionV2 v2;

      public Builder discriminant(Integer discriminant) {
        this.discriminant = discriminant;
        return this;
      }

      public Builder v2(AccountEntryExtensionV2 v2) {
        this.v2 = v2;
        return this;
      }

      public AccountEntryExtensionV1Ext build() {
        AccountEntryExtensionV1Ext val = new AccountEntryExtensionV1Ext();
        val.setDiscriminant(discriminant);
        val.setV2(v2);
        return val;
      }
    }

    public static void encode(
        XdrDataOutputStream stream, AccountEntryExtensionV1Ext encodedAccountEntryExtensionV1Ext)
        throws IOException {
      // Xdrgen::AST::Typespecs::Int
      // Integer
      stream.writeInt(encodedAccountEntryExtensionV1Ext.getDiscriminant().intValue());
      switch (encodedAccountEntryExtensionV1Ext.getDiscriminant()) {
        case 0:
          break;
        case 2:
          AccountEntryExtensionV2.encode(stream, encodedAccountEntryExtensionV1Ext.v2);
          break;
      }
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static AccountEntryExtensionV1Ext decode(XdrDataInputStream stream) throws IOException {
      AccountEntryExtensionV1Ext decodedAccountEntryExtensionV1Ext =
          new AccountEntryExtensionV1Ext();
      Integer discriminant = stream.readInt();
      decodedAccountEntryExtensionV1Ext.setDiscriminant(discriminant);
      switch (decodedAccountEntryExtensionV1Ext.getDiscriminant()) {
        case 0:
          break;
        case 2:
          decodedAccountEntryExtensionV1Ext.v2 = AccountEntryExtensionV2.decode(stream);
          break;
      }
      return decodedAccountEntryExtensionV1Ext;
    }

    @Override
    public int hashCode() {
      return Objects.hashCode(this.v2, this.v);
    }

    @Override
    public boolean equals(Object object) {
      if (!(object instanceof AccountEntryExtensionV1Ext)) {
        return false;
      }

      AccountEntryExtensionV1Ext other = (AccountEntryExtensionV1Ext) object;
      return Objects.equal(this.v2, other.v2) && Objects.equal(this.v, other.v);
    }
  }
}
