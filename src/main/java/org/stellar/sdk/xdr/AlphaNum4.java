// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct AlphaNum4
//  {
//      AssetCode4 assetCode;
//      AccountID issuer;
//  };

//  ===========================================================================
public class AlphaNum4 implements XdrElement {
  public AlphaNum4() {}

  private AssetCode4 assetCode;

  public AssetCode4 getAssetCode() {
    return this.assetCode;
  }

  public void setAssetCode(AssetCode4 value) {
    this.assetCode = value;
  }

  private AccountID issuer;

  public AccountID getIssuer() {
    return this.issuer;
  }

  public void setIssuer(AccountID value) {
    this.issuer = value;
  }

  public static void encode(XdrDataOutputStream stream, AlphaNum4 encodedAlphaNum4)
      throws IOException {
    AssetCode4.encode(stream, encodedAlphaNum4.assetCode);
    AccountID.encode(stream, encodedAlphaNum4.issuer);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static AlphaNum4 decode(XdrDataInputStream stream) throws IOException {
    AlphaNum4 decodedAlphaNum4 = new AlphaNum4();
    decodedAlphaNum4.assetCode = AssetCode4.decode(stream);
    decodedAlphaNum4.issuer = AccountID.decode(stream);
    return decodedAlphaNum4;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.assetCode, this.issuer);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof AlphaNum4)) {
      return false;
    }

    AlphaNum4 other = (AlphaNum4) object;
    return Objects.equals(this.assetCode, other.assetCode)
        && Objects.equals(this.issuer, other.issuer);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static AlphaNum4 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static AlphaNum4 fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private AssetCode4 assetCode;
    private AccountID issuer;

    public Builder assetCode(AssetCode4 assetCode) {
      this.assetCode = assetCode;
      return this;
    }

    public Builder issuer(AccountID issuer) {
      this.issuer = issuer;
      return this;
    }

    public AlphaNum4 build() {
      AlphaNum4 val = new AlphaNum4();
      val.setAssetCode(this.assetCode);
      val.setIssuer(this.issuer);
      return val;
    }
  }
}
