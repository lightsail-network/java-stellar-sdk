// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * SorobanAuthorizationEntries's original definition in the XDR file is:
 *
 * <pre>
 * typedef SorobanAuthorizationEntry SorobanAuthorizationEntries&lt;&gt;;
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class SorobanAuthorizationEntries implements XdrElement {
  private SorobanAuthorizationEntry[] SorobanAuthorizationEntries;

  public void encode(XdrDataOutputStream stream) throws IOException {
    int SorobanAuthorizationEntriesSize = getSorobanAuthorizationEntries().length;
    stream.writeInt(SorobanAuthorizationEntriesSize);
    for (int i = 0; i < SorobanAuthorizationEntriesSize; i++) {
      SorobanAuthorizationEntries[i].encode(stream);
    }
  }

  public static SorobanAuthorizationEntries decode(XdrDataInputStream stream) throws IOException {
    SorobanAuthorizationEntries decodedSorobanAuthorizationEntries =
        new SorobanAuthorizationEntries();
    int SorobanAuthorizationEntriesSize = stream.readInt();
    decodedSorobanAuthorizationEntries.SorobanAuthorizationEntries =
        new SorobanAuthorizationEntry[SorobanAuthorizationEntriesSize];
    for (int i = 0; i < SorobanAuthorizationEntriesSize; i++) {
      decodedSorobanAuthorizationEntries.SorobanAuthorizationEntries[i] =
          SorobanAuthorizationEntry.decode(stream);
    }
    return decodedSorobanAuthorizationEntries;
  }

  public static SorobanAuthorizationEntries fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SorobanAuthorizationEntries fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
