// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * SCVec's original definition in the XDR file is:
 *
 * <pre>
 * typedef SCVal SCVec&lt;&gt;;
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class SCVec implements XdrElement {
  private SCVal[] SCVec;

  public void encode(XdrDataOutputStream stream) throws IOException {
    int SCVecSize = getSCVec().length;
    stream.writeInt(SCVecSize);
    for (int i = 0; i < SCVecSize; i++) {
      SCVec[i].encode(stream);
    }
  }

  public static SCVec decode(XdrDataInputStream stream) throws IOException {
    SCVec decodedSCVec = new SCVec();
    int SCVecSize = stream.readInt();
    decodedSCVec.SCVec = new SCVal[SCVecSize];
    for (int i = 0; i < SCVecSize; i++) {
      decodedSCVec.SCVec[i] = SCVal.decode(stream);
    }
    return decodedSCVec;
  }

  public static SCVec fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SCVec fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
