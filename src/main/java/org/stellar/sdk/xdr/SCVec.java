// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  typedef SCVal SCVec<>;

//  ===========================================================================
public class SCVec implements XdrElement {
  private SCVal[] SCVec;

  public SCVec() {}

  public SCVec(SCVal[] SCVec) {
    this.SCVec = SCVec;
  }

  public SCVal[] getSCVec() {
    return this.SCVec;
  }

  public void setSCVec(SCVal[] value) {
    this.SCVec = value;
  }

  public static void encode(XdrDataOutputStream stream, SCVec encodedSCVec) throws IOException {
    int SCVecsize = encodedSCVec.getSCVec().length;
    stream.writeInt(SCVecsize);
    for (int i = 0; i < SCVecsize; i++) {
      SCVal.encode(stream, encodedSCVec.SCVec[i]);
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SCVec decode(XdrDataInputStream stream) throws IOException {
    SCVec decodedSCVec = new SCVec();
    int SCVecsize = stream.readInt();
    decodedSCVec.SCVec = new SCVal[SCVecsize];
    for (int i = 0; i < SCVecsize; i++) {
      decodedSCVec.SCVec[i] = SCVal.decode(stream);
    }
    return decodedSCVec;
  }

  @Override
  public int hashCode() {
    return Arrays.hashCode(this.SCVec);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SCVec)) {
      return false;
    }

    SCVec other = (SCVec) object;
    return Arrays.equals(this.SCVec, other.SCVec);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SCVec fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SCVec fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
