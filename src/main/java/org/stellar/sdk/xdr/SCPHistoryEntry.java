// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  union SCPHistoryEntry switch (int v)
//  {
//  case 0:
//      SCPHistoryEntryV0 v0;
//  };

//  ===========================================================================
public class SCPHistoryEntry implements XdrElement {
  public SCPHistoryEntry() {}

  Integer v;

  public Integer getDiscriminant() {
    return this.v;
  }

  public void setDiscriminant(Integer value) {
    this.v = value;
  }

  private SCPHistoryEntryV0 v0;

  public SCPHistoryEntryV0 getV0() {
    return this.v0;
  }

  public void setV0(SCPHistoryEntryV0 value) {
    this.v0 = value;
  }

  public static final class Builder {
    private Integer discriminant;
    private SCPHistoryEntryV0 v0;

    public Builder discriminant(Integer discriminant) {
      this.discriminant = discriminant;
      return this;
    }

    public Builder v0(SCPHistoryEntryV0 v0) {
      this.v0 = v0;
      return this;
    }

    public SCPHistoryEntry build() {
      SCPHistoryEntry val = new SCPHistoryEntry();
      val.setDiscriminant(discriminant);
      val.setV0(this.v0);
      return val;
    }
  }

  public static void encode(XdrDataOutputStream stream, SCPHistoryEntry encodedSCPHistoryEntry)
      throws IOException {
    // Xdrgen::AST::Typespecs::Int
    // Integer
    stream.writeInt(encodedSCPHistoryEntry.getDiscriminant().intValue());
    switch (encodedSCPHistoryEntry.getDiscriminant()) {
      case 0:
        SCPHistoryEntryV0.encode(stream, encodedSCPHistoryEntry.v0);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SCPHistoryEntry decode(XdrDataInputStream stream) throws IOException {
    SCPHistoryEntry decodedSCPHistoryEntry = new SCPHistoryEntry();
    Integer discriminant = stream.readInt();
    decodedSCPHistoryEntry.setDiscriminant(discriminant);
    switch (decodedSCPHistoryEntry.getDiscriminant()) {
      case 0:
        decodedSCPHistoryEntry.v0 = SCPHistoryEntryV0.decode(stream);
        break;
    }
    return decodedSCPHistoryEntry;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.v0, this.v);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SCPHistoryEntry)) {
      return false;
    }

    SCPHistoryEntry other = (SCPHistoryEntry) object;
    return Objects.equals(this.v0, other.v0) && Objects.equals(this.v, other.v);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SCPHistoryEntry fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SCPHistoryEntry fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
