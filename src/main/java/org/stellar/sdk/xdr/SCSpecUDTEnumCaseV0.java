// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * SCSpecUDTEnumCaseV0's original definition in the XDR file is:
 *
 * <pre>
 * struct SCSpecUDTEnumCaseV0
 * {
 *     string doc&lt;SC_SPEC_DOC_LIMIT&gt;;
 *     string name&lt;60&gt;;
 *     uint32 value;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class SCSpecUDTEnumCaseV0 implements XdrElement {
  private XdrString doc;
  private XdrString name;
  private Uint32 value;

  public void encode(XdrDataOutputStream stream) throws IOException {
    doc.encode(stream);
    name.encode(stream);
    value.encode(stream);
  }

  public static SCSpecUDTEnumCaseV0 decode(XdrDataInputStream stream) throws IOException {
    SCSpecUDTEnumCaseV0 decodedSCSpecUDTEnumCaseV0 = new SCSpecUDTEnumCaseV0();
    decodedSCSpecUDTEnumCaseV0.doc = XdrString.decode(stream, Constants.SC_SPEC_DOC_LIMIT);
    decodedSCSpecUDTEnumCaseV0.name = XdrString.decode(stream, 60);
    decodedSCSpecUDTEnumCaseV0.value = Uint32.decode(stream);
    return decodedSCSpecUDTEnumCaseV0;
  }

  public static SCSpecUDTEnumCaseV0 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SCSpecUDTEnumCaseV0 fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
