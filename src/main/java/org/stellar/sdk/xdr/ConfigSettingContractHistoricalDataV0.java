// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct ConfigSettingContractHistoricalDataV0
//  {
//      int64 feeHistorical1KB; // Fee for storing 1KB in archives
//  };

//  ===========================================================================
public class ConfigSettingContractHistoricalDataV0 implements XdrElement {
  public ConfigSettingContractHistoricalDataV0() {}

  private Int64 feeHistorical1KB;

  public Int64 getFeeHistorical1KB() {
    return this.feeHistorical1KB;
  }

  public void setFeeHistorical1KB(Int64 value) {
    this.feeHistorical1KB = value;
  }

  public static void encode(
      XdrDataOutputStream stream,
      ConfigSettingContractHistoricalDataV0 encodedConfigSettingContractHistoricalDataV0)
      throws IOException {
    Int64.encode(stream, encodedConfigSettingContractHistoricalDataV0.feeHistorical1KB);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static ConfigSettingContractHistoricalDataV0 decode(XdrDataInputStream stream)
      throws IOException {
    ConfigSettingContractHistoricalDataV0 decodedConfigSettingContractHistoricalDataV0 =
        new ConfigSettingContractHistoricalDataV0();
    decodedConfigSettingContractHistoricalDataV0.feeHistorical1KB = Int64.decode(stream);
    return decodedConfigSettingContractHistoricalDataV0;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.feeHistorical1KB);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof ConfigSettingContractHistoricalDataV0)) {
      return false;
    }

    ConfigSettingContractHistoricalDataV0 other = (ConfigSettingContractHistoricalDataV0) object;
    return Objects.equals(this.feeHistorical1KB, other.feeHistorical1KB);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static ConfigSettingContractHistoricalDataV0 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ConfigSettingContractHistoricalDataV0 fromXdrByteArray(byte[] xdr)
      throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private Int64 feeHistorical1KB;

    public Builder feeHistorical1KB(Int64 feeHistorical1KB) {
      this.feeHistorical1KB = feeHistorical1KB;
      return this;
    }

    public ConfigSettingContractHistoricalDataV0 build() {
      ConfigSettingContractHistoricalDataV0 val = new ConfigSettingContractHistoricalDataV0();
      val.setFeeHistorical1KB(this.feeHistorical1KB);
      return val;
    }
  }
}
