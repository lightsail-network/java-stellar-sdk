// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;


import java.io.IOException;

import com.google.common.base.Objects;
import java.util.Arrays;

// === xdr source ============================================================

//  union TransactionMeta switch (int v)
//  {
//  case 0:
//      OperationMeta operations<>;
//  case 1:
//      TransactionMetaV1 v1;
//  };

//  ===========================================================================
public class TransactionMeta  {
  public TransactionMeta () {}
  Integer v;
  public Integer getDiscriminant() {
    return this.v;
  }
  public void setDiscriminant(Integer value) {
    this.v = value;
  }
  private OperationMeta[] operations;
  public OperationMeta[] getOperations() {
    return this.operations;
  }
  public void setOperations(OperationMeta[] value) {
    this.operations = value;
  }
  private TransactionMetaV1 v1;
  public TransactionMetaV1 getV1() {
    return this.v1;
  }
  public void setV1(TransactionMetaV1 value) {
    this.v1 = value;
  }
  public static void encode(XdrDataOutputStream stream, TransactionMeta encodedTransactionMeta) throws IOException {
  //Xdrgen::AST::Typespecs::Int
  //Integer
  stream.writeInt(encodedTransactionMeta.getDiscriminant().intValue());
  switch (encodedTransactionMeta.getDiscriminant()) {
  case 0:
  int operationssize = encodedTransactionMeta.getOperations().length;
  stream.writeInt(operationssize);
  for (int i = 0; i < operationssize; i++) {
    OperationMeta.encode(stream, encodedTransactionMeta.operations[i]);
  }
  break;
  case 1:
  TransactionMetaV1.encode(stream, encodedTransactionMeta.v1);
  break;
  }
  }
  public static TransactionMeta decode(XdrDataInputStream stream) throws IOException {
  TransactionMeta decodedTransactionMeta = new TransactionMeta();
  Integer discriminant = stream.readInt();
  decodedTransactionMeta.setDiscriminant(discriminant);
  switch (decodedTransactionMeta.getDiscriminant()) {
  case 0:
  int operationssize = stream.readInt();
  decodedTransactionMeta.operations = new OperationMeta[operationssize];
  for (int i = 0; i < operationssize; i++) {
    decodedTransactionMeta.operations[i] = OperationMeta.decode(stream);
  }
  break;
  case 1:
  decodedTransactionMeta.v1 = TransactionMetaV1.decode(stream);
  break;
  }
    return decodedTransactionMeta;
  }
  @Override
  public int hashCode() {
    return Objects.hashCode(Arrays.hashCode(this.operations), this.v1, this.v);
  }
  @Override
  public boolean equals(Object object) {
    if (object == null || !(object instanceof TransactionMeta)) {
      return false;
    }

    TransactionMeta other = (TransactionMeta) object;
    return Arrays.equals(this.operations, other.operations) && Objects.equal(this.v1, other.v1) && Objects.equal(this.v, other.v);
  }
}
