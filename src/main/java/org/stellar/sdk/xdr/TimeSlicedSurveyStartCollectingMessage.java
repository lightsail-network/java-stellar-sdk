// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * TimeSlicedSurveyStartCollectingMessage's original definition in the XDR file is:
 *
 * <pre>
 * struct TimeSlicedSurveyStartCollectingMessage
 * {
 *     NodeID surveyorID;
 *     uint32 nonce;
 *     uint32 ledgerNum;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class TimeSlicedSurveyStartCollectingMessage implements XdrElement {
  private NodeID surveyorID;
  private Uint32 nonce;
  private Uint32 ledgerNum;

  public void encode(XdrDataOutputStream stream) throws IOException {
    surveyorID.encode(stream);
    nonce.encode(stream);
    ledgerNum.encode(stream);
  }

  public static TimeSlicedSurveyStartCollectingMessage decode(XdrDataInputStream stream)
      throws IOException {
    TimeSlicedSurveyStartCollectingMessage decodedTimeSlicedSurveyStartCollectingMessage =
        new TimeSlicedSurveyStartCollectingMessage();
    decodedTimeSlicedSurveyStartCollectingMessage.surveyorID = NodeID.decode(stream);
    decodedTimeSlicedSurveyStartCollectingMessage.nonce = Uint32.decode(stream);
    decodedTimeSlicedSurveyStartCollectingMessage.ledgerNum = Uint32.decode(stream);
    return decodedTimeSlicedSurveyStartCollectingMessage;
  }

  public static TimeSlicedSurveyStartCollectingMessage fromXdrBase64(String xdr)
      throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static TimeSlicedSurveyStartCollectingMessage fromXdrByteArray(byte[] xdr)
      throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
