// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct StateExpirationSettings {
//      uint32 maxEntryExpiration;
//      uint32 minTempEntryExpiration;
//      uint32 minPersistentEntryExpiration;
//
//      // rent_fee = wfee_rate_average / rent_rate_denominator_for_type
//      int64 persistentRentRateDenominator;
//      int64 tempRentRateDenominator;
//
//      // max number of entries that emit expiration meta in a single ledger
//      uint32 maxEntriesToExpire;
//
//      // Number of snapshots to use when calculating average BucketList size
//      uint32 bucketListSizeWindowSampleSize;
//
//      // Maximum number of bytes that we scan for eviction per ledger
//      uint64 evictionScanSize;
//
//      // Lowest BucketList level to be scanned to evict entries
//      uint32 startingEvictionScanLevel;
//  };

//  ===========================================================================
public class StateExpirationSettings implements XdrElement {
  public StateExpirationSettings() {}

  private Uint32 maxEntryExpiration;

  public Uint32 getMaxEntryExpiration() {
    return this.maxEntryExpiration;
  }

  public void setMaxEntryExpiration(Uint32 value) {
    this.maxEntryExpiration = value;
  }

  private Uint32 minTempEntryExpiration;

  public Uint32 getMinTempEntryExpiration() {
    return this.minTempEntryExpiration;
  }

  public void setMinTempEntryExpiration(Uint32 value) {
    this.minTempEntryExpiration = value;
  }

  private Uint32 minPersistentEntryExpiration;

  public Uint32 getMinPersistentEntryExpiration() {
    return this.minPersistentEntryExpiration;
  }

  public void setMinPersistentEntryExpiration(Uint32 value) {
    this.minPersistentEntryExpiration = value;
  }

  private Int64 persistentRentRateDenominator;

  public Int64 getPersistentRentRateDenominator() {
    return this.persistentRentRateDenominator;
  }

  public void setPersistentRentRateDenominator(Int64 value) {
    this.persistentRentRateDenominator = value;
  }

  private Int64 tempRentRateDenominator;

  public Int64 getTempRentRateDenominator() {
    return this.tempRentRateDenominator;
  }

  public void setTempRentRateDenominator(Int64 value) {
    this.tempRentRateDenominator = value;
  }

  private Uint32 maxEntriesToExpire;

  public Uint32 getMaxEntriesToExpire() {
    return this.maxEntriesToExpire;
  }

  public void setMaxEntriesToExpire(Uint32 value) {
    this.maxEntriesToExpire = value;
  }

  private Uint32 bucketListSizeWindowSampleSize;

  public Uint32 getBucketListSizeWindowSampleSize() {
    return this.bucketListSizeWindowSampleSize;
  }

  public void setBucketListSizeWindowSampleSize(Uint32 value) {
    this.bucketListSizeWindowSampleSize = value;
  }

  private Uint64 evictionScanSize;

  public Uint64 getEvictionScanSize() {
    return this.evictionScanSize;
  }

  public void setEvictionScanSize(Uint64 value) {
    this.evictionScanSize = value;
  }

  private Uint32 startingEvictionScanLevel;

  public Uint32 getStartingEvictionScanLevel() {
    return this.startingEvictionScanLevel;
  }

  public void setStartingEvictionScanLevel(Uint32 value) {
    this.startingEvictionScanLevel = value;
  }

  public static void encode(
      XdrDataOutputStream stream, StateExpirationSettings encodedStateExpirationSettings)
      throws IOException {
    Uint32.encode(stream, encodedStateExpirationSettings.maxEntryExpiration);
    Uint32.encode(stream, encodedStateExpirationSettings.minTempEntryExpiration);
    Uint32.encode(stream, encodedStateExpirationSettings.minPersistentEntryExpiration);
    Int64.encode(stream, encodedStateExpirationSettings.persistentRentRateDenominator);
    Int64.encode(stream, encodedStateExpirationSettings.tempRentRateDenominator);
    Uint32.encode(stream, encodedStateExpirationSettings.maxEntriesToExpire);
    Uint32.encode(stream, encodedStateExpirationSettings.bucketListSizeWindowSampleSize);
    Uint64.encode(stream, encodedStateExpirationSettings.evictionScanSize);
    Uint32.encode(stream, encodedStateExpirationSettings.startingEvictionScanLevel);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static StateExpirationSettings decode(XdrDataInputStream stream) throws IOException {
    StateExpirationSettings decodedStateExpirationSettings = new StateExpirationSettings();
    decodedStateExpirationSettings.maxEntryExpiration = Uint32.decode(stream);
    decodedStateExpirationSettings.minTempEntryExpiration = Uint32.decode(stream);
    decodedStateExpirationSettings.minPersistentEntryExpiration = Uint32.decode(stream);
    decodedStateExpirationSettings.persistentRentRateDenominator = Int64.decode(stream);
    decodedStateExpirationSettings.tempRentRateDenominator = Int64.decode(stream);
    decodedStateExpirationSettings.maxEntriesToExpire = Uint32.decode(stream);
    decodedStateExpirationSettings.bucketListSizeWindowSampleSize = Uint32.decode(stream);
    decodedStateExpirationSettings.evictionScanSize = Uint64.decode(stream);
    decodedStateExpirationSettings.startingEvictionScanLevel = Uint32.decode(stream);
    return decodedStateExpirationSettings;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        this.maxEntryExpiration,
        this.minTempEntryExpiration,
        this.minPersistentEntryExpiration,
        this.persistentRentRateDenominator,
        this.tempRentRateDenominator,
        this.maxEntriesToExpire,
        this.bucketListSizeWindowSampleSize,
        this.evictionScanSize,
        this.startingEvictionScanLevel);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof StateExpirationSettings)) {
      return false;
    }

    StateExpirationSettings other = (StateExpirationSettings) object;
    return Objects.equals(this.maxEntryExpiration, other.maxEntryExpiration)
        && Objects.equals(this.minTempEntryExpiration, other.minTempEntryExpiration)
        && Objects.equals(this.minPersistentEntryExpiration, other.minPersistentEntryExpiration)
        && Objects.equals(this.persistentRentRateDenominator, other.persistentRentRateDenominator)
        && Objects.equals(this.tempRentRateDenominator, other.tempRentRateDenominator)
        && Objects.equals(this.maxEntriesToExpire, other.maxEntriesToExpire)
        && Objects.equals(this.bucketListSizeWindowSampleSize, other.bucketListSizeWindowSampleSize)
        && Objects.equals(this.evictionScanSize, other.evictionScanSize)
        && Objects.equals(this.startingEvictionScanLevel, other.startingEvictionScanLevel);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static StateExpirationSettings fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static StateExpirationSettings fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private Uint32 maxEntryExpiration;
    private Uint32 minTempEntryExpiration;
    private Uint32 minPersistentEntryExpiration;
    private Int64 persistentRentRateDenominator;
    private Int64 tempRentRateDenominator;
    private Uint32 maxEntriesToExpire;
    private Uint32 bucketListSizeWindowSampleSize;
    private Uint64 evictionScanSize;
    private Uint32 startingEvictionScanLevel;

    public Builder maxEntryExpiration(Uint32 maxEntryExpiration) {
      this.maxEntryExpiration = maxEntryExpiration;
      return this;
    }

    public Builder minTempEntryExpiration(Uint32 minTempEntryExpiration) {
      this.minTempEntryExpiration = minTempEntryExpiration;
      return this;
    }

    public Builder minPersistentEntryExpiration(Uint32 minPersistentEntryExpiration) {
      this.minPersistentEntryExpiration = minPersistentEntryExpiration;
      return this;
    }

    public Builder persistentRentRateDenominator(Int64 persistentRentRateDenominator) {
      this.persistentRentRateDenominator = persistentRentRateDenominator;
      return this;
    }

    public Builder tempRentRateDenominator(Int64 tempRentRateDenominator) {
      this.tempRentRateDenominator = tempRentRateDenominator;
      return this;
    }

    public Builder maxEntriesToExpire(Uint32 maxEntriesToExpire) {
      this.maxEntriesToExpire = maxEntriesToExpire;
      return this;
    }

    public Builder bucketListSizeWindowSampleSize(Uint32 bucketListSizeWindowSampleSize) {
      this.bucketListSizeWindowSampleSize = bucketListSizeWindowSampleSize;
      return this;
    }

    public Builder evictionScanSize(Uint64 evictionScanSize) {
      this.evictionScanSize = evictionScanSize;
      return this;
    }

    public Builder startingEvictionScanLevel(Uint32 startingEvictionScanLevel) {
      this.startingEvictionScanLevel = startingEvictionScanLevel;
      return this;
    }

    public StateExpirationSettings build() {
      StateExpirationSettings val = new StateExpirationSettings();
      val.setMaxEntryExpiration(this.maxEntryExpiration);
      val.setMinTempEntryExpiration(this.minTempEntryExpiration);
      val.setMinPersistentEntryExpiration(this.minPersistentEntryExpiration);
      val.setPersistentRentRateDenominator(this.persistentRentRateDenominator);
      val.setTempRentRateDenominator(this.tempRentRateDenominator);
      val.setMaxEntriesToExpire(this.maxEntriesToExpire);
      val.setBucketListSizeWindowSampleSize(this.bucketListSizeWindowSampleSize);
      val.setEvictionScanSize(this.evictionScanSize);
      val.setStartingEvictionScanLevel(this.startingEvictionScanLevel);
      return val;
    }
  }
}
