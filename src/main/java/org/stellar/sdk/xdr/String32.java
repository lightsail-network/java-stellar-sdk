// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  typedef string string32<32>;

//  ===========================================================================
public class String32 implements XdrElement {
  private XdrString string32;

  public String32() {}

  public String32(XdrString string32) {
    this.string32 = string32;
  }

  public XdrString getString32() {
    return this.string32;
  }

  public void setString32(XdrString value) {
    this.string32 = value;
  }

  public static void encode(XdrDataOutputStream stream, String32 encodedString32)
      throws IOException {
    encodedString32.string32.encode(stream);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static String32 decode(XdrDataInputStream stream) throws IOException {
    String32 decodedString32 = new String32();
    decodedString32.string32 = XdrString.decode(stream, 32);
    return decodedString32;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.string32);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof String32)) {
      return false;
    }

    String32 other = (String32) object;
    return Objects.equals(this.string32, other.string32);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static String32 fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static String32 fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
