// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  union RevokeSponsorshipResult switch (RevokeSponsorshipResultCode code)
//  {
//  case REVOKE_SPONSORSHIP_SUCCESS:
//      void;
//  case REVOKE_SPONSORSHIP_DOES_NOT_EXIST:
//  case REVOKE_SPONSORSHIP_NOT_SPONSOR:
//  case REVOKE_SPONSORSHIP_LOW_RESERVE:
//  case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE:
//  case REVOKE_SPONSORSHIP_MALFORMED:
//      void;
//  };

//  ===========================================================================
public class RevokeSponsorshipResult implements XdrElement {
  public RevokeSponsorshipResult() {}

  RevokeSponsorshipResultCode code;

  public RevokeSponsorshipResultCode getDiscriminant() {
    return this.code;
  }

  public void setDiscriminant(RevokeSponsorshipResultCode value) {
    this.code = value;
  }

  public static final class Builder {
    private RevokeSponsorshipResultCode discriminant;

    public Builder discriminant(RevokeSponsorshipResultCode discriminant) {
      this.discriminant = discriminant;
      return this;
    }

    public RevokeSponsorshipResult build() {
      RevokeSponsorshipResult val = new RevokeSponsorshipResult();
      val.setDiscriminant(discriminant);
      return val;
    }
  }

  public static void encode(
      XdrDataOutputStream stream, RevokeSponsorshipResult encodedRevokeSponsorshipResult)
      throws IOException {
    // Xdrgen::AST::Identifier
    // RevokeSponsorshipResultCode
    stream.writeInt(encodedRevokeSponsorshipResult.getDiscriminant().getValue());
    switch (encodedRevokeSponsorshipResult.getDiscriminant()) {
      case REVOKE_SPONSORSHIP_SUCCESS:
        break;
      case REVOKE_SPONSORSHIP_DOES_NOT_EXIST:
      case REVOKE_SPONSORSHIP_NOT_SPONSOR:
      case REVOKE_SPONSORSHIP_LOW_RESERVE:
      case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE:
      case REVOKE_SPONSORSHIP_MALFORMED:
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static RevokeSponsorshipResult decode(XdrDataInputStream stream) throws IOException {
    RevokeSponsorshipResult decodedRevokeSponsorshipResult = new RevokeSponsorshipResult();
    RevokeSponsorshipResultCode discriminant = RevokeSponsorshipResultCode.decode(stream);
    decodedRevokeSponsorshipResult.setDiscriminant(discriminant);
    switch (decodedRevokeSponsorshipResult.getDiscriminant()) {
      case REVOKE_SPONSORSHIP_SUCCESS:
        break;
      case REVOKE_SPONSORSHIP_DOES_NOT_EXIST:
      case REVOKE_SPONSORSHIP_NOT_SPONSOR:
      case REVOKE_SPONSORSHIP_LOW_RESERVE:
      case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE:
      case REVOKE_SPONSORSHIP_MALFORMED:
        break;
    }
    return decodedRevokeSponsorshipResult;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.code);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof RevokeSponsorshipResult)) {
      return false;
    }

    RevokeSponsorshipResult other = (RevokeSponsorshipResult) object;
    return Objects.equals(this.code, other.code);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static RevokeSponsorshipResult fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static RevokeSponsorshipResult fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
