// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.io.BaseEncoding;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;

// === xdr source ============================================================

//  typedef opaque Thresholds[4];

//  ===========================================================================
public class Thresholds implements XdrElement {
  private byte[] Thresholds;

  public Thresholds() {}

  public Thresholds(byte[] Thresholds) {
    this.Thresholds = Thresholds;
  }

  public byte[] getThresholds() {
    return this.Thresholds;
  }

  public void setThresholds(byte[] value) {
    this.Thresholds = value;
  }

  public static void encode(XdrDataOutputStream stream, Thresholds encodedThresholds)
      throws IOException {
    int Thresholdssize = encodedThresholds.Thresholds.length;
    stream.write(encodedThresholds.getThresholds(), 0, Thresholdssize);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static Thresholds decode(XdrDataInputStream stream) throws IOException {
    Thresholds decodedThresholds = new Thresholds();
    int Thresholdssize = 4;
    decodedThresholds.Thresholds = new byte[Thresholdssize];
    stream.read(decodedThresholds.Thresholds, 0, Thresholdssize);
    return decodedThresholds;
  }

  @Override
  public int hashCode() {
    return Arrays.hashCode(this.Thresholds);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof Thresholds)) {
      return false;
    }

    Thresholds other = (Thresholds) object;
    return Arrays.equals(this.Thresholds, other.Thresholds);
  }

  @Override
  public String toXdrBase64() throws IOException {
    BaseEncoding base64Encoding = BaseEncoding.base64();
    return base64Encoding.encode(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static Thresholds fromXdrBase64(String xdr) throws IOException {
    BaseEncoding base64Encoding = BaseEncoding.base64();
    byte[] bytes = base64Encoding.decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static Thresholds fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
