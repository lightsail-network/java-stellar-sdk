// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * LiquidityPoolWithdrawResult's original definition in the XDR file is:
 *
 * <pre>
 * union LiquidityPoolWithdrawResult switch (LiquidityPoolWithdrawResultCode code)
 * {
 * case LIQUIDITY_POOL_WITHDRAW_SUCCESS:
 *     void;
 * case LIQUIDITY_POOL_WITHDRAW_MALFORMED:
 * case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:
 * case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:
 * case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:
 * case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:
 *     void;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class LiquidityPoolWithdrawResult implements XdrElement {
  private LiquidityPoolWithdrawResultCode discriminant;

  public void encode(XdrDataOutputStream stream) throws IOException {
    stream.writeInt(discriminant.getValue());
    switch (discriminant) {
      case LIQUIDITY_POOL_WITHDRAW_SUCCESS:
        break;
      case LIQUIDITY_POOL_WITHDRAW_MALFORMED:
      case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:
      case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:
      case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:
      case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:
        break;
    }
  }

  public static LiquidityPoolWithdrawResult decode(XdrDataInputStream stream) throws IOException {
    LiquidityPoolWithdrawResult decodedLiquidityPoolWithdrawResult =
        new LiquidityPoolWithdrawResult();
    LiquidityPoolWithdrawResultCode discriminant = LiquidityPoolWithdrawResultCode.decode(stream);
    decodedLiquidityPoolWithdrawResult.setDiscriminant(discriminant);
    switch (decodedLiquidityPoolWithdrawResult.getDiscriminant()) {
      case LIQUIDITY_POOL_WITHDRAW_SUCCESS:
        break;
      case LIQUIDITY_POOL_WITHDRAW_MALFORMED:
      case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:
      case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:
      case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:
      case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:
        break;
    }
    return decodedLiquidityPoolWithdrawResult;
  }

  public static LiquidityPoolWithdrawResult fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static LiquidityPoolWithdrawResult fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
