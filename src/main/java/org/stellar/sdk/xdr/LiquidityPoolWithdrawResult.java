// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  union LiquidityPoolWithdrawResult switch (LiquidityPoolWithdrawResultCode code)
//  {
//  case LIQUIDITY_POOL_WITHDRAW_SUCCESS:
//      void;
//  case LIQUIDITY_POOL_WITHDRAW_MALFORMED:
//  case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:
//  case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:
//  case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:
//  case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:
//      void;
//  };

//  ===========================================================================
public class LiquidityPoolWithdrawResult implements XdrElement {
  public LiquidityPoolWithdrawResult() {}

  LiquidityPoolWithdrawResultCode code;

  public LiquidityPoolWithdrawResultCode getDiscriminant() {
    return this.code;
  }

  public void setDiscriminant(LiquidityPoolWithdrawResultCode value) {
    this.code = value;
  }

  public static final class Builder {
    private LiquidityPoolWithdrawResultCode discriminant;

    public Builder discriminant(LiquidityPoolWithdrawResultCode discriminant) {
      this.discriminant = discriminant;
      return this;
    }

    public LiquidityPoolWithdrawResult build() {
      LiquidityPoolWithdrawResult val = new LiquidityPoolWithdrawResult();
      val.setDiscriminant(discriminant);
      return val;
    }
  }

  public static void encode(
      XdrDataOutputStream stream, LiquidityPoolWithdrawResult encodedLiquidityPoolWithdrawResult)
      throws IOException {
    // Xdrgen::AST::Identifier
    // LiquidityPoolWithdrawResultCode
    stream.writeInt(encodedLiquidityPoolWithdrawResult.getDiscriminant().getValue());
    switch (encodedLiquidityPoolWithdrawResult.getDiscriminant()) {
      case LIQUIDITY_POOL_WITHDRAW_SUCCESS:
        break;
      case LIQUIDITY_POOL_WITHDRAW_MALFORMED:
      case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:
      case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:
      case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:
      case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static LiquidityPoolWithdrawResult decode(XdrDataInputStream stream) throws IOException {
    LiquidityPoolWithdrawResult decodedLiquidityPoolWithdrawResult =
        new LiquidityPoolWithdrawResult();
    LiquidityPoolWithdrawResultCode discriminant = LiquidityPoolWithdrawResultCode.decode(stream);
    decodedLiquidityPoolWithdrawResult.setDiscriminant(discriminant);
    switch (decodedLiquidityPoolWithdrawResult.getDiscriminant()) {
      case LIQUIDITY_POOL_WITHDRAW_SUCCESS:
        break;
      case LIQUIDITY_POOL_WITHDRAW_MALFORMED:
      case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:
      case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:
      case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:
      case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:
        break;
    }
    return decodedLiquidityPoolWithdrawResult;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.code);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof LiquidityPoolWithdrawResult)) {
      return false;
    }

    LiquidityPoolWithdrawResult other = (LiquidityPoolWithdrawResult) object;
    return Objects.equals(this.code, other.code);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static LiquidityPoolWithdrawResult fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static LiquidityPoolWithdrawResult fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
