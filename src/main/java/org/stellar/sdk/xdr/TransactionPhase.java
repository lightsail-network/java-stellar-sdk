// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  union TransactionPhase switch (int v)
//  {
//  case 0:
//      TxSetComponent v0Components<>;
//  };

//  ===========================================================================
public class TransactionPhase implements XdrElement {
  public TransactionPhase() {}

  Integer v;

  public Integer getDiscriminant() {
    return this.v;
  }

  public void setDiscriminant(Integer value) {
    this.v = value;
  }

  private TxSetComponent[] v0Components;

  public TxSetComponent[] getV0Components() {
    return this.v0Components;
  }

  public void setV0Components(TxSetComponent[] value) {
    this.v0Components = value;
  }

  public static final class Builder {
    private Integer discriminant;
    private TxSetComponent[] v0Components;

    public Builder discriminant(Integer discriminant) {
      this.discriminant = discriminant;
      return this;
    }

    public Builder v0Components(TxSetComponent[] v0Components) {
      this.v0Components = v0Components;
      return this;
    }

    public TransactionPhase build() {
      TransactionPhase val = new TransactionPhase();
      val.setDiscriminant(discriminant);
      val.setV0Components(this.v0Components);
      return val;
    }
  }

  public static void encode(XdrDataOutputStream stream, TransactionPhase encodedTransactionPhase)
      throws IOException {
    // Xdrgen::AST::Typespecs::Int
    // Integer
    stream.writeInt(encodedTransactionPhase.getDiscriminant().intValue());
    switch (encodedTransactionPhase.getDiscriminant()) {
      case 0:
        int v0Componentssize = encodedTransactionPhase.getV0Components().length;
        stream.writeInt(v0Componentssize);
        for (int i = 0; i < v0Componentssize; i++) {
          TxSetComponent.encode(stream, encodedTransactionPhase.v0Components[i]);
        }
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static TransactionPhase decode(XdrDataInputStream stream) throws IOException {
    TransactionPhase decodedTransactionPhase = new TransactionPhase();
    Integer discriminant = stream.readInt();
    decodedTransactionPhase.setDiscriminant(discriminant);
    switch (decodedTransactionPhase.getDiscriminant()) {
      case 0:
        int v0Componentssize = stream.readInt();
        decodedTransactionPhase.v0Components = new TxSetComponent[v0Componentssize];
        for (int i = 0; i < v0Componentssize; i++) {
          decodedTransactionPhase.v0Components[i] = TxSetComponent.decode(stream);
        }
        break;
    }
    return decodedTransactionPhase;
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(this.v0Components), this.v);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof TransactionPhase)) {
      return false;
    }

    TransactionPhase other = (TransactionPhase) object;
    return Arrays.equals(this.v0Components, other.v0Components) && Objects.equals(this.v, other.v);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static TransactionPhase fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static TransactionPhase fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
