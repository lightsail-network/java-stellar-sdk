// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct Error
//  {
//      ErrorCode code;
//      string msg<100>;
//  };

//  ===========================================================================
public class Error implements XdrElement {
  public Error() {}

  private ErrorCode code;

  public ErrorCode getCode() {
    return this.code;
  }

  public void setCode(ErrorCode value) {
    this.code = value;
  }

  private XdrString msg;

  public XdrString getMsg() {
    return this.msg;
  }

  public void setMsg(XdrString value) {
    this.msg = value;
  }

  public static void encode(XdrDataOutputStream stream, Error encodedError) throws IOException {
    ErrorCode.encode(stream, encodedError.code);
    encodedError.msg.encode(stream);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static Error decode(XdrDataInputStream stream) throws IOException {
    Error decodedError = new Error();
    decodedError.code = ErrorCode.decode(stream);
    decodedError.msg = XdrString.decode(stream, 100);
    return decodedError;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.code, this.msg);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof Error)) {
      return false;
    }

    Error other = (Error) object;
    return Objects.equals(this.code, other.code) && Objects.equals(this.msg, other.msg);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static Error fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static Error fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private ErrorCode code;
    private XdrString msg;

    public Builder code(ErrorCode code) {
      this.code = code;
      return this;
    }

    public Builder msg(XdrString msg) {
      this.msg = msg;
      return this;
    }

    public Error build() {
      Error val = new Error();
      val.setCode(this.code);
      val.setMsg(this.msg);
      return val;
    }
  }
}
