// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct TransactionResultPair
//  {
//      Hash transactionHash;
//      TransactionResult result; // result for the transaction
//  };

//  ===========================================================================
public class TransactionResultPair implements XdrElement {
  public TransactionResultPair() {}

  private Hash transactionHash;

  public Hash getTransactionHash() {
    return this.transactionHash;
  }

  public void setTransactionHash(Hash value) {
    this.transactionHash = value;
  }

  private TransactionResult result;

  public TransactionResult getResult() {
    return this.result;
  }

  public void setResult(TransactionResult value) {
    this.result = value;
  }

  public static void encode(
      XdrDataOutputStream stream, TransactionResultPair encodedTransactionResultPair)
      throws IOException {
    Hash.encode(stream, encodedTransactionResultPair.transactionHash);
    TransactionResult.encode(stream, encodedTransactionResultPair.result);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static TransactionResultPair decode(XdrDataInputStream stream) throws IOException {
    TransactionResultPair decodedTransactionResultPair = new TransactionResultPair();
    decodedTransactionResultPair.transactionHash = Hash.decode(stream);
    decodedTransactionResultPair.result = TransactionResult.decode(stream);
    return decodedTransactionResultPair;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.transactionHash, this.result);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof TransactionResultPair)) {
      return false;
    }

    TransactionResultPair other = (TransactionResultPair) object;
    return Objects.equals(this.transactionHash, other.transactionHash)
        && Objects.equals(this.result, other.result);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static TransactionResultPair fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static TransactionResultPair fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private Hash transactionHash;
    private TransactionResult result;

    public Builder transactionHash(Hash transactionHash) {
      this.transactionHash = transactionHash;
      return this;
    }

    public Builder result(TransactionResult result) {
      this.result = result;
      return this;
    }

    public TransactionResultPair build() {
      TransactionResultPair val = new TransactionResultPair();
      val.setTransactionHash(this.transactionHash);
      val.setResult(this.result);
      return val;
    }
  }
}
