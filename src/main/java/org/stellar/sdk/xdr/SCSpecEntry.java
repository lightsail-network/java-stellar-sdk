// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import java.io.IOException;

// === xdr source ============================================================

//  union SCSpecEntry switch (SCSpecEntryKind kind)
//  {
//  case SC_SPEC_ENTRY_FUNCTION_V0:
//      SCSpecFunctionV0 functionV0;
//  case SC_SPEC_ENTRY_UDT_STRUCT_V0:
//      SCSpecUDTStructV0 udtStructV0;
//  case SC_SPEC_ENTRY_UDT_UNION_V0:
//      SCSpecUDTUnionV0 udtUnionV0;
//  case SC_SPEC_ENTRY_UDT_ENUM_V0:
//      SCSpecUDTEnumV0 udtEnumV0;
//  case SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0:
//      SCSpecUDTErrorEnumV0 udtErrorEnumV0;
//  };

//  ===========================================================================
public class SCSpecEntry implements XdrElement {
  public SCSpecEntry() {}

  SCSpecEntryKind kind;

  public SCSpecEntryKind getDiscriminant() {
    return this.kind;
  }

  public void setDiscriminant(SCSpecEntryKind value) {
    this.kind = value;
  }

  private SCSpecFunctionV0 functionV0;

  public SCSpecFunctionV0 getFunctionV0() {
    return this.functionV0;
  }

  public void setFunctionV0(SCSpecFunctionV0 value) {
    this.functionV0 = value;
  }

  private SCSpecUDTStructV0 udtStructV0;

  public SCSpecUDTStructV0 getUdtStructV0() {
    return this.udtStructV0;
  }

  public void setUdtStructV0(SCSpecUDTStructV0 value) {
    this.udtStructV0 = value;
  }

  private SCSpecUDTUnionV0 udtUnionV0;

  public SCSpecUDTUnionV0 getUdtUnionV0() {
    return this.udtUnionV0;
  }

  public void setUdtUnionV0(SCSpecUDTUnionV0 value) {
    this.udtUnionV0 = value;
  }

  private SCSpecUDTEnumV0 udtEnumV0;

  public SCSpecUDTEnumV0 getUdtEnumV0() {
    return this.udtEnumV0;
  }

  public void setUdtEnumV0(SCSpecUDTEnumV0 value) {
    this.udtEnumV0 = value;
  }

  private SCSpecUDTErrorEnumV0 udtErrorEnumV0;

  public SCSpecUDTErrorEnumV0 getUdtErrorEnumV0() {
    return this.udtErrorEnumV0;
  }

  public void setUdtErrorEnumV0(SCSpecUDTErrorEnumV0 value) {
    this.udtErrorEnumV0 = value;
  }

  public static final class Builder {
    private SCSpecEntryKind discriminant;
    private SCSpecFunctionV0 functionV0;
    private SCSpecUDTStructV0 udtStructV0;
    private SCSpecUDTUnionV0 udtUnionV0;
    private SCSpecUDTEnumV0 udtEnumV0;
    private SCSpecUDTErrorEnumV0 udtErrorEnumV0;

    public Builder discriminant(SCSpecEntryKind discriminant) {
      this.discriminant = discriminant;
      return this;
    }

    public Builder functionV0(SCSpecFunctionV0 functionV0) {
      this.functionV0 = functionV0;
      return this;
    }

    public Builder udtStructV0(SCSpecUDTStructV0 udtStructV0) {
      this.udtStructV0 = udtStructV0;
      return this;
    }

    public Builder udtUnionV0(SCSpecUDTUnionV0 udtUnionV0) {
      this.udtUnionV0 = udtUnionV0;
      return this;
    }

    public Builder udtEnumV0(SCSpecUDTEnumV0 udtEnumV0) {
      this.udtEnumV0 = udtEnumV0;
      return this;
    }

    public Builder udtErrorEnumV0(SCSpecUDTErrorEnumV0 udtErrorEnumV0) {
      this.udtErrorEnumV0 = udtErrorEnumV0;
      return this;
    }

    public SCSpecEntry build() {
      SCSpecEntry val = new SCSpecEntry();
      val.setDiscriminant(discriminant);
      val.setFunctionV0(this.functionV0);
      val.setUdtStructV0(this.udtStructV0);
      val.setUdtUnionV0(this.udtUnionV0);
      val.setUdtEnumV0(this.udtEnumV0);
      val.setUdtErrorEnumV0(this.udtErrorEnumV0);
      return val;
    }
  }

  public static void encode(XdrDataOutputStream stream, SCSpecEntry encodedSCSpecEntry)
      throws IOException {
    // Xdrgen::AST::Identifier
    // SCSpecEntryKind
    stream.writeInt(encodedSCSpecEntry.getDiscriminant().getValue());
    switch (encodedSCSpecEntry.getDiscriminant()) {
      case SC_SPEC_ENTRY_FUNCTION_V0:
        SCSpecFunctionV0.encode(stream, encodedSCSpecEntry.functionV0);
        break;
      case SC_SPEC_ENTRY_UDT_STRUCT_V0:
        SCSpecUDTStructV0.encode(stream, encodedSCSpecEntry.udtStructV0);
        break;
      case SC_SPEC_ENTRY_UDT_UNION_V0:
        SCSpecUDTUnionV0.encode(stream, encodedSCSpecEntry.udtUnionV0);
        break;
      case SC_SPEC_ENTRY_UDT_ENUM_V0:
        SCSpecUDTEnumV0.encode(stream, encodedSCSpecEntry.udtEnumV0);
        break;
      case SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0:
        SCSpecUDTErrorEnumV0.encode(stream, encodedSCSpecEntry.udtErrorEnumV0);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SCSpecEntry decode(XdrDataInputStream stream) throws IOException {
    SCSpecEntry decodedSCSpecEntry = new SCSpecEntry();
    SCSpecEntryKind discriminant = SCSpecEntryKind.decode(stream);
    decodedSCSpecEntry.setDiscriminant(discriminant);
    switch (decodedSCSpecEntry.getDiscriminant()) {
      case SC_SPEC_ENTRY_FUNCTION_V0:
        decodedSCSpecEntry.functionV0 = SCSpecFunctionV0.decode(stream);
        break;
      case SC_SPEC_ENTRY_UDT_STRUCT_V0:
        decodedSCSpecEntry.udtStructV0 = SCSpecUDTStructV0.decode(stream);
        break;
      case SC_SPEC_ENTRY_UDT_UNION_V0:
        decodedSCSpecEntry.udtUnionV0 = SCSpecUDTUnionV0.decode(stream);
        break;
      case SC_SPEC_ENTRY_UDT_ENUM_V0:
        decodedSCSpecEntry.udtEnumV0 = SCSpecUDTEnumV0.decode(stream);
        break;
      case SC_SPEC_ENTRY_UDT_ERROR_ENUM_V0:
        decodedSCSpecEntry.udtErrorEnumV0 = SCSpecUDTErrorEnumV0.decode(stream);
        break;
    }
    return decodedSCSpecEntry;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(
        this.functionV0,
        this.udtStructV0,
        this.udtUnionV0,
        this.udtEnumV0,
        this.udtErrorEnumV0,
        this.kind);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SCSpecEntry)) {
      return false;
    }

    SCSpecEntry other = (SCSpecEntry) object;
    return Objects.equal(this.functionV0, other.functionV0)
        && Objects.equal(this.udtStructV0, other.udtStructV0)
        && Objects.equal(this.udtUnionV0, other.udtUnionV0)
        && Objects.equal(this.udtEnumV0, other.udtEnumV0)
        && Objects.equal(this.udtErrorEnumV0, other.udtErrorEnumV0)
        && Objects.equal(this.kind, other.kind);
  }
}
