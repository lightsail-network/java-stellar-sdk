// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * TransactionV0Envelope's original definition in the XDR file is:
 *
 * <pre>
 * struct TransactionV0Envelope
 * {
 *     TransactionV0 tx;
 *     /&#42; Each decorated signature is a signature over the SHA256 hash of
 *      &#42; a TransactionSignaturePayload &#42;/
 *     DecoratedSignature signatures&lt;20&gt;;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class TransactionV0Envelope implements XdrElement {
  private TransactionV0 tx;
  private DecoratedSignature[] signatures;

  public static void encode(
      XdrDataOutputStream stream, TransactionV0Envelope encodedTransactionV0Envelope)
      throws IOException {
    TransactionV0.encode(stream, encodedTransactionV0Envelope.tx);
    int signaturesSize = encodedTransactionV0Envelope.getSignatures().length;
    stream.writeInt(signaturesSize);
    for (int i = 0; i < signaturesSize; i++) {
      DecoratedSignature.encode(stream, encodedTransactionV0Envelope.signatures[i]);
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static TransactionV0Envelope decode(XdrDataInputStream stream) throws IOException {
    TransactionV0Envelope decodedTransactionV0Envelope = new TransactionV0Envelope();
    decodedTransactionV0Envelope.tx = TransactionV0.decode(stream);
    int signaturesSize = stream.readInt();
    decodedTransactionV0Envelope.signatures = new DecoratedSignature[signaturesSize];
    for (int i = 0; i < signaturesSize; i++) {
      decodedTransactionV0Envelope.signatures[i] = DecoratedSignature.decode(stream);
    }
    return decodedTransactionV0Envelope;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static TransactionV0Envelope fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static TransactionV0Envelope fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
