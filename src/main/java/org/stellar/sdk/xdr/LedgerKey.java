// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * LedgerKey's original definition in the XDR file is:
 *
 * <pre>
 * union LedgerKey switch (LedgerEntryType type)
 * {
 * case ACCOUNT:
 *     struct
 *     {
 *         AccountID accountID;
 *     } account;
 *
 * case TRUSTLINE:
 *     struct
 *     {
 *         AccountID accountID;
 *         TrustLineAsset asset;
 *     } trustLine;
 *
 * case OFFER:
 *     struct
 *     {
 *         AccountID sellerID;
 *         int64 offerID;
 *     } offer;
 *
 * case DATA:
 *     struct
 *     {
 *         AccountID accountID;
 *         string64 dataName;
 *     } data;
 *
 * case CLAIMABLE_BALANCE:
 *     struct
 *     {
 *         ClaimableBalanceID balanceID;
 *     } claimableBalance;
 *
 * case LIQUIDITY_POOL:
 *     struct
 *     {
 *         PoolID liquidityPoolID;
 *     } liquidityPool;
 * case CONTRACT_DATA:
 *     struct
 *     {
 *         SCAddress contract;
 *         SCVal key;
 *         ContractDataDurability durability;
 *     } contractData;
 * case CONTRACT_CODE:
 *     struct
 *     {
 *         Hash hash;
 *     } contractCode;
 * case CONFIG_SETTING:
 *     struct
 *     {
 *         ConfigSettingID configSettingID;
 *     } configSetting;
 * case TTL:
 *     struct
 *     {
 *         // Hash of the LedgerKey that is associated with this TTLEntry
 *         Hash keyHash;
 *     } ttl;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class LedgerKey implements XdrElement {
  private LedgerEntryType discriminant;
  private LedgerKeyAccount account;
  private LedgerKeyTrustLine trustLine;
  private LedgerKeyOffer offer;
  private LedgerKeyData data;
  private LedgerKeyClaimableBalance claimableBalance;
  private LedgerKeyLiquidityPool liquidityPool;
  private LedgerKeyContractData contractData;
  private LedgerKeyContractCode contractCode;
  private LedgerKeyConfigSetting configSetting;
  private LedgerKeyTtl ttl;

  public static void encode(XdrDataOutputStream stream, LedgerKey encodedLedgerKey)
      throws IOException {
    // Xdrgen::AST::Identifier
    // LedgerEntryType
    stream.writeInt(encodedLedgerKey.getDiscriminant().getValue());
    switch (encodedLedgerKey.getDiscriminant()) {
      case ACCOUNT:
        LedgerKeyAccount.encode(stream, encodedLedgerKey.account);
        break;
      case TRUSTLINE:
        LedgerKeyTrustLine.encode(stream, encodedLedgerKey.trustLine);
        break;
      case OFFER:
        LedgerKeyOffer.encode(stream, encodedLedgerKey.offer);
        break;
      case DATA:
        LedgerKeyData.encode(stream, encodedLedgerKey.data);
        break;
      case CLAIMABLE_BALANCE:
        LedgerKeyClaimableBalance.encode(stream, encodedLedgerKey.claimableBalance);
        break;
      case LIQUIDITY_POOL:
        LedgerKeyLiquidityPool.encode(stream, encodedLedgerKey.liquidityPool);
        break;
      case CONTRACT_DATA:
        LedgerKeyContractData.encode(stream, encodedLedgerKey.contractData);
        break;
      case CONTRACT_CODE:
        LedgerKeyContractCode.encode(stream, encodedLedgerKey.contractCode);
        break;
      case CONFIG_SETTING:
        LedgerKeyConfigSetting.encode(stream, encodedLedgerKey.configSetting);
        break;
      case TTL:
        LedgerKeyTtl.encode(stream, encodedLedgerKey.ttl);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static LedgerKey decode(XdrDataInputStream stream) throws IOException {
    LedgerKey decodedLedgerKey = new LedgerKey();
    LedgerEntryType discriminant = LedgerEntryType.decode(stream);
    decodedLedgerKey.setDiscriminant(discriminant);
    switch (decodedLedgerKey.getDiscriminant()) {
      case ACCOUNT:
        decodedLedgerKey.account = LedgerKeyAccount.decode(stream);
        break;
      case TRUSTLINE:
        decodedLedgerKey.trustLine = LedgerKeyTrustLine.decode(stream);
        break;
      case OFFER:
        decodedLedgerKey.offer = LedgerKeyOffer.decode(stream);
        break;
      case DATA:
        decodedLedgerKey.data = LedgerKeyData.decode(stream);
        break;
      case CLAIMABLE_BALANCE:
        decodedLedgerKey.claimableBalance = LedgerKeyClaimableBalance.decode(stream);
        break;
      case LIQUIDITY_POOL:
        decodedLedgerKey.liquidityPool = LedgerKeyLiquidityPool.decode(stream);
        break;
      case CONTRACT_DATA:
        decodedLedgerKey.contractData = LedgerKeyContractData.decode(stream);
        break;
      case CONTRACT_CODE:
        decodedLedgerKey.contractCode = LedgerKeyContractCode.decode(stream);
        break;
      case CONFIG_SETTING:
        decodedLedgerKey.configSetting = LedgerKeyConfigSetting.decode(stream);
        break;
      case TTL:
        decodedLedgerKey.ttl = LedgerKeyTtl.decode(stream);
        break;
    }
    return decodedLedgerKey;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static LedgerKey fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static LedgerKey fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  /**
   * LedgerKeyAccount's original definition in the XDR file is:
   *
   * <pre>
   * struct
   *     {
   *         AccountID accountID;
   *     }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class LedgerKeyAccount implements XdrElement {
    private AccountID accountID;

    public static void encode(XdrDataOutputStream stream, LedgerKeyAccount encodedLedgerKeyAccount)
        throws IOException {
      AccountID.encode(stream, encodedLedgerKeyAccount.accountID);
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static LedgerKeyAccount decode(XdrDataInputStream stream) throws IOException {
      LedgerKeyAccount decodedLedgerKeyAccount = new LedgerKeyAccount();
      decodedLedgerKeyAccount.accountID = AccountID.decode(stream);
      return decodedLedgerKeyAccount;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static LedgerKeyAccount fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static LedgerKeyAccount fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }

  /**
   * LedgerKeyTrustLine's original definition in the XDR file is:
   *
   * <pre>
   * struct
   *     {
   *         AccountID accountID;
   *         TrustLineAsset asset;
   *     }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class LedgerKeyTrustLine implements XdrElement {
    private AccountID accountID;
    private TrustLineAsset asset;

    public static void encode(
        XdrDataOutputStream stream, LedgerKeyTrustLine encodedLedgerKeyTrustLine)
        throws IOException {
      AccountID.encode(stream, encodedLedgerKeyTrustLine.accountID);
      TrustLineAsset.encode(stream, encodedLedgerKeyTrustLine.asset);
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static LedgerKeyTrustLine decode(XdrDataInputStream stream) throws IOException {
      LedgerKeyTrustLine decodedLedgerKeyTrustLine = new LedgerKeyTrustLine();
      decodedLedgerKeyTrustLine.accountID = AccountID.decode(stream);
      decodedLedgerKeyTrustLine.asset = TrustLineAsset.decode(stream);
      return decodedLedgerKeyTrustLine;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static LedgerKeyTrustLine fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static LedgerKeyTrustLine fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }

  /**
   * LedgerKeyOffer's original definition in the XDR file is:
   *
   * <pre>
   * struct
   *     {
   *         AccountID sellerID;
   *         int64 offerID;
   *     }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class LedgerKeyOffer implements XdrElement {
    private AccountID sellerID;
    private Int64 offerID;

    public static void encode(XdrDataOutputStream stream, LedgerKeyOffer encodedLedgerKeyOffer)
        throws IOException {
      AccountID.encode(stream, encodedLedgerKeyOffer.sellerID);
      Int64.encode(stream, encodedLedgerKeyOffer.offerID);
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static LedgerKeyOffer decode(XdrDataInputStream stream) throws IOException {
      LedgerKeyOffer decodedLedgerKeyOffer = new LedgerKeyOffer();
      decodedLedgerKeyOffer.sellerID = AccountID.decode(stream);
      decodedLedgerKeyOffer.offerID = Int64.decode(stream);
      return decodedLedgerKeyOffer;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static LedgerKeyOffer fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static LedgerKeyOffer fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }

  /**
   * LedgerKeyData's original definition in the XDR file is:
   *
   * <pre>
   * struct
   *     {
   *         AccountID accountID;
   *         string64 dataName;
   *     }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class LedgerKeyData implements XdrElement {
    private AccountID accountID;
    private String64 dataName;

    public static void encode(XdrDataOutputStream stream, LedgerKeyData encodedLedgerKeyData)
        throws IOException {
      AccountID.encode(stream, encodedLedgerKeyData.accountID);
      String64.encode(stream, encodedLedgerKeyData.dataName);
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static LedgerKeyData decode(XdrDataInputStream stream) throws IOException {
      LedgerKeyData decodedLedgerKeyData = new LedgerKeyData();
      decodedLedgerKeyData.accountID = AccountID.decode(stream);
      decodedLedgerKeyData.dataName = String64.decode(stream);
      return decodedLedgerKeyData;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static LedgerKeyData fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static LedgerKeyData fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }

  /**
   * LedgerKeyClaimableBalance's original definition in the XDR file is:
   *
   * <pre>
   * struct
   *     {
   *         ClaimableBalanceID balanceID;
   *     }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class LedgerKeyClaimableBalance implements XdrElement {
    private ClaimableBalanceID balanceID;

    public static void encode(
        XdrDataOutputStream stream, LedgerKeyClaimableBalance encodedLedgerKeyClaimableBalance)
        throws IOException {
      ClaimableBalanceID.encode(stream, encodedLedgerKeyClaimableBalance.balanceID);
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static LedgerKeyClaimableBalance decode(XdrDataInputStream stream) throws IOException {
      LedgerKeyClaimableBalance decodedLedgerKeyClaimableBalance = new LedgerKeyClaimableBalance();
      decodedLedgerKeyClaimableBalance.balanceID = ClaimableBalanceID.decode(stream);
      return decodedLedgerKeyClaimableBalance;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static LedgerKeyClaimableBalance fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static LedgerKeyClaimableBalance fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }

  /**
   * LedgerKeyLiquidityPool's original definition in the XDR file is:
   *
   * <pre>
   * struct
   *     {
   *         PoolID liquidityPoolID;
   *     }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class LedgerKeyLiquidityPool implements XdrElement {
    private PoolID liquidityPoolID;

    public static void encode(
        XdrDataOutputStream stream, LedgerKeyLiquidityPool encodedLedgerKeyLiquidityPool)
        throws IOException {
      PoolID.encode(stream, encodedLedgerKeyLiquidityPool.liquidityPoolID);
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static LedgerKeyLiquidityPool decode(XdrDataInputStream stream) throws IOException {
      LedgerKeyLiquidityPool decodedLedgerKeyLiquidityPool = new LedgerKeyLiquidityPool();
      decodedLedgerKeyLiquidityPool.liquidityPoolID = PoolID.decode(stream);
      return decodedLedgerKeyLiquidityPool;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static LedgerKeyLiquidityPool fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static LedgerKeyLiquidityPool fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }

  /**
   * LedgerKeyContractData's original definition in the XDR file is:
   *
   * <pre>
   * struct
   *     {
   *         SCAddress contract;
   *         SCVal key;
   *         ContractDataDurability durability;
   *     }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class LedgerKeyContractData implements XdrElement {
    private SCAddress contract;
    private SCVal key;
    private ContractDataDurability durability;

    public static void encode(
        XdrDataOutputStream stream, LedgerKeyContractData encodedLedgerKeyContractData)
        throws IOException {
      SCAddress.encode(stream, encodedLedgerKeyContractData.contract);
      SCVal.encode(stream, encodedLedgerKeyContractData.key);
      ContractDataDurability.encode(stream, encodedLedgerKeyContractData.durability);
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static LedgerKeyContractData decode(XdrDataInputStream stream) throws IOException {
      LedgerKeyContractData decodedLedgerKeyContractData = new LedgerKeyContractData();
      decodedLedgerKeyContractData.contract = SCAddress.decode(stream);
      decodedLedgerKeyContractData.key = SCVal.decode(stream);
      decodedLedgerKeyContractData.durability = ContractDataDurability.decode(stream);
      return decodedLedgerKeyContractData;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static LedgerKeyContractData fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static LedgerKeyContractData fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }

  /**
   * LedgerKeyContractCode's original definition in the XDR file is:
   *
   * <pre>
   * struct
   *     {
   *         Hash hash;
   *     }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class LedgerKeyContractCode implements XdrElement {
    private Hash hash;

    public static void encode(
        XdrDataOutputStream stream, LedgerKeyContractCode encodedLedgerKeyContractCode)
        throws IOException {
      Hash.encode(stream, encodedLedgerKeyContractCode.hash);
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static LedgerKeyContractCode decode(XdrDataInputStream stream) throws IOException {
      LedgerKeyContractCode decodedLedgerKeyContractCode = new LedgerKeyContractCode();
      decodedLedgerKeyContractCode.hash = Hash.decode(stream);
      return decodedLedgerKeyContractCode;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static LedgerKeyContractCode fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static LedgerKeyContractCode fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }

  /**
   * LedgerKeyConfigSetting's original definition in the XDR file is:
   *
   * <pre>
   * struct
   *     {
   *         ConfigSettingID configSettingID;
   *     }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class LedgerKeyConfigSetting implements XdrElement {
    private ConfigSettingID configSettingID;

    public static void encode(
        XdrDataOutputStream stream, LedgerKeyConfigSetting encodedLedgerKeyConfigSetting)
        throws IOException {
      ConfigSettingID.encode(stream, encodedLedgerKeyConfigSetting.configSettingID);
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static LedgerKeyConfigSetting decode(XdrDataInputStream stream) throws IOException {
      LedgerKeyConfigSetting decodedLedgerKeyConfigSetting = new LedgerKeyConfigSetting();
      decodedLedgerKeyConfigSetting.configSettingID = ConfigSettingID.decode(stream);
      return decodedLedgerKeyConfigSetting;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static LedgerKeyConfigSetting fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static LedgerKeyConfigSetting fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }

  /**
   * LedgerKeyTtl's original definition in the XDR file is:
   *
   * <pre>
   * struct
   *     {
   *         // Hash of the LedgerKey that is associated with this TTLEntry
   *         Hash keyHash;
   *     }
   * </pre>
   */
  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  @Builder(toBuilder = true)
  public static class LedgerKeyTtl implements XdrElement {
    private Hash keyHash;

    public static void encode(XdrDataOutputStream stream, LedgerKeyTtl encodedLedgerKeyTtl)
        throws IOException {
      Hash.encode(stream, encodedLedgerKeyTtl.keyHash);
    }

    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }

    public static LedgerKeyTtl decode(XdrDataInputStream stream) throws IOException {
      LedgerKeyTtl decodedLedgerKeyTtl = new LedgerKeyTtl();
      decodedLedgerKeyTtl.keyHash = Hash.decode(stream);
      return decodedLedgerKeyTtl;
    }

    @Override
    public String toXdrBase64() throws IOException {
      return Base64Factory.getInstance().encodeToString(toXdrByteArray());
    }

    @Override
    public byte[] toXdrByteArray() throws IOException {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
      encode(xdrDataOutputStream);
      return byteArrayOutputStream.toByteArray();
    }

    public static LedgerKeyTtl fromXdrBase64(String xdr) throws IOException {
      byte[] bytes = Base64Factory.getInstance().decode(xdr);
      return fromXdrByteArray(bytes);
    }

    public static LedgerKeyTtl fromXdrByteArray(byte[] xdr) throws IOException {
      ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
      XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
      return decode(xdrDataInputStream);
    }
  }
}
