// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import com.google.common.base.Objects;
import java.io.IOException;

// === xdr source ============================================================

//  struct UInt128Parts {
//      uint64 hi;
//      uint64 lo;
//  };

//  ===========================================================================
public class UInt128Parts implements XdrElement {
  public UInt128Parts() {}

  private Uint64 hi;

  public Uint64 getHi() {
    return this.hi;
  }

  public void setHi(Uint64 value) {
    this.hi = value;
  }

  private Uint64 lo;

  public Uint64 getLo() {
    return this.lo;
  }

  public void setLo(Uint64 value) {
    this.lo = value;
  }

  public static void encode(XdrDataOutputStream stream, UInt128Parts encodedUInt128Parts)
      throws IOException {
    Uint64.encode(stream, encodedUInt128Parts.hi);
    Uint64.encode(stream, encodedUInt128Parts.lo);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static UInt128Parts decode(XdrDataInputStream stream) throws IOException {
    UInt128Parts decodedUInt128Parts = new UInt128Parts();
    decodedUInt128Parts.hi = Uint64.decode(stream);
    decodedUInt128Parts.lo = Uint64.decode(stream);
    return decodedUInt128Parts;
  }

  @Override
  public int hashCode() {
    return Objects.hashCode(this.hi, this.lo);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof UInt128Parts)) {
      return false;
    }

    UInt128Parts other = (UInt128Parts) object;
    return Objects.equal(this.hi, other.hi) && Objects.equal(this.lo, other.lo);
  }

  public static final class Builder {
    private Uint64 hi;
    private Uint64 lo;

    public Builder hi(Uint64 hi) {
      this.hi = hi;
      return this;
    }

    public Builder lo(Uint64 lo) {
      this.lo = lo;
      return this;
    }

    public UInt128Parts build() {
      UInt128Parts val = new UInt128Parts();
      val.setHi(this.hi);
      val.setLo(this.lo);
      return val;
    }
  }
}
