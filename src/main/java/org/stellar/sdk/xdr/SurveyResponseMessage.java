// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct SurveyResponseMessage
//  {
//      NodeID surveyorPeerID;
//      NodeID surveyedPeerID;
//      uint32 ledgerNum;
//      SurveyMessageCommandType commandType;
//      EncryptedBody encryptedBody;
//  };

//  ===========================================================================
public class SurveyResponseMessage implements XdrElement {
  public SurveyResponseMessage() {}

  private NodeID surveyorPeerID;

  public NodeID getSurveyorPeerID() {
    return this.surveyorPeerID;
  }

  public void setSurveyorPeerID(NodeID value) {
    this.surveyorPeerID = value;
  }

  private NodeID surveyedPeerID;

  public NodeID getSurveyedPeerID() {
    return this.surveyedPeerID;
  }

  public void setSurveyedPeerID(NodeID value) {
    this.surveyedPeerID = value;
  }

  private Uint32 ledgerNum;

  public Uint32 getLedgerNum() {
    return this.ledgerNum;
  }

  public void setLedgerNum(Uint32 value) {
    this.ledgerNum = value;
  }

  private SurveyMessageCommandType commandType;

  public SurveyMessageCommandType getCommandType() {
    return this.commandType;
  }

  public void setCommandType(SurveyMessageCommandType value) {
    this.commandType = value;
  }

  private EncryptedBody encryptedBody;

  public EncryptedBody getEncryptedBody() {
    return this.encryptedBody;
  }

  public void setEncryptedBody(EncryptedBody value) {
    this.encryptedBody = value;
  }

  public static void encode(
      XdrDataOutputStream stream, SurveyResponseMessage encodedSurveyResponseMessage)
      throws IOException {
    NodeID.encode(stream, encodedSurveyResponseMessage.surveyorPeerID);
    NodeID.encode(stream, encodedSurveyResponseMessage.surveyedPeerID);
    Uint32.encode(stream, encodedSurveyResponseMessage.ledgerNum);
    SurveyMessageCommandType.encode(stream, encodedSurveyResponseMessage.commandType);
    EncryptedBody.encode(stream, encodedSurveyResponseMessage.encryptedBody);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SurveyResponseMessage decode(XdrDataInputStream stream) throws IOException {
    SurveyResponseMessage decodedSurveyResponseMessage = new SurveyResponseMessage();
    decodedSurveyResponseMessage.surveyorPeerID = NodeID.decode(stream);
    decodedSurveyResponseMessage.surveyedPeerID = NodeID.decode(stream);
    decodedSurveyResponseMessage.ledgerNum = Uint32.decode(stream);
    decodedSurveyResponseMessage.commandType = SurveyMessageCommandType.decode(stream);
    decodedSurveyResponseMessage.encryptedBody = EncryptedBody.decode(stream);
    return decodedSurveyResponseMessage;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        this.surveyorPeerID,
        this.surveyedPeerID,
        this.ledgerNum,
        this.commandType,
        this.encryptedBody);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SurveyResponseMessage)) {
      return false;
    }

    SurveyResponseMessage other = (SurveyResponseMessage) object;
    return Objects.equals(this.surveyorPeerID, other.surveyorPeerID)
        && Objects.equals(this.surveyedPeerID, other.surveyedPeerID)
        && Objects.equals(this.ledgerNum, other.ledgerNum)
        && Objects.equals(this.commandType, other.commandType)
        && Objects.equals(this.encryptedBody, other.encryptedBody);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SurveyResponseMessage fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SurveyResponseMessage fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private NodeID surveyorPeerID;
    private NodeID surveyedPeerID;
    private Uint32 ledgerNum;
    private SurveyMessageCommandType commandType;
    private EncryptedBody encryptedBody;

    public Builder surveyorPeerID(NodeID surveyorPeerID) {
      this.surveyorPeerID = surveyorPeerID;
      return this;
    }

    public Builder surveyedPeerID(NodeID surveyedPeerID) {
      this.surveyedPeerID = surveyedPeerID;
      return this;
    }

    public Builder ledgerNum(Uint32 ledgerNum) {
      this.ledgerNum = ledgerNum;
      return this;
    }

    public Builder commandType(SurveyMessageCommandType commandType) {
      this.commandType = commandType;
      return this;
    }

    public Builder encryptedBody(EncryptedBody encryptedBody) {
      this.encryptedBody = encryptedBody;
      return this;
    }

    public SurveyResponseMessage build() {
      SurveyResponseMessage val = new SurveyResponseMessage();
      val.setSurveyorPeerID(this.surveyorPeerID);
      val.setSurveyedPeerID(this.surveyedPeerID);
      val.setLedgerNum(this.ledgerNum);
      val.setCommandType(this.commandType);
      val.setEncryptedBody(this.encryptedBody);
      return val;
    }
  }
}
