// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  union SorobanTransactionMetaExt switch (int v)
//  {
//  case 0:
//      void;
//  case 1:
//      SorobanTransactionMetaExtV1 v1;
//  };

//  ===========================================================================
public class SorobanTransactionMetaExt implements XdrElement {
  public SorobanTransactionMetaExt() {}

  Integer v;

  public Integer getDiscriminant() {
    return this.v;
  }

  public void setDiscriminant(Integer value) {
    this.v = value;
  }

  private SorobanTransactionMetaExtV1 v1;

  public SorobanTransactionMetaExtV1 getV1() {
    return this.v1;
  }

  public void setV1(SorobanTransactionMetaExtV1 value) {
    this.v1 = value;
  }

  public static final class Builder {
    private Integer discriminant;
    private SorobanTransactionMetaExtV1 v1;

    public Builder discriminant(Integer discriminant) {
      this.discriminant = discriminant;
      return this;
    }

    public Builder v1(SorobanTransactionMetaExtV1 v1) {
      this.v1 = v1;
      return this;
    }

    public SorobanTransactionMetaExt build() {
      SorobanTransactionMetaExt val = new SorobanTransactionMetaExt();
      val.setDiscriminant(discriminant);
      val.setV1(this.v1);
      return val;
    }
  }

  public static void encode(
      XdrDataOutputStream stream, SorobanTransactionMetaExt encodedSorobanTransactionMetaExt)
      throws IOException {
    // Xdrgen::AST::Typespecs::Int
    // Integer
    stream.writeInt(encodedSorobanTransactionMetaExt.getDiscriminant().intValue());
    switch (encodedSorobanTransactionMetaExt.getDiscriminant()) {
      case 0:
        break;
      case 1:
        SorobanTransactionMetaExtV1.encode(stream, encodedSorobanTransactionMetaExt.v1);
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static SorobanTransactionMetaExt decode(XdrDataInputStream stream) throws IOException {
    SorobanTransactionMetaExt decodedSorobanTransactionMetaExt = new SorobanTransactionMetaExt();
    Integer discriminant = stream.readInt();
    decodedSorobanTransactionMetaExt.setDiscriminant(discriminant);
    switch (decodedSorobanTransactionMetaExt.getDiscriminant()) {
      case 0:
        break;
      case 1:
        decodedSorobanTransactionMetaExt.v1 = SorobanTransactionMetaExtV1.decode(stream);
        break;
    }
    return decodedSorobanTransactionMetaExt;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.v1, this.v);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof SorobanTransactionMetaExt)) {
      return false;
    }

    SorobanTransactionMetaExt other = (SorobanTransactionMetaExt) object;
    return Objects.equals(this.v1, other.v1) && Objects.equals(this.v, other.v);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static SorobanTransactionMetaExt fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static SorobanTransactionMetaExt fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
