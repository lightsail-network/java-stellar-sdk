// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  union ContractExecutable switch (ContractExecutableType type)
//  {
//  case CONTRACT_EXECUTABLE_WASM:
//      Hash wasm_hash;
//  case CONTRACT_EXECUTABLE_TOKEN:
//      void;
//  };

//  ===========================================================================
public class ContractExecutable implements XdrElement {
  public ContractExecutable() {}

  ContractExecutableType type;

  public ContractExecutableType getDiscriminant() {
    return this.type;
  }

  public void setDiscriminant(ContractExecutableType value) {
    this.type = value;
  }

  private Hash wasm_hash;

  public Hash getWasm_hash() {
    return this.wasm_hash;
  }

  public void setWasm_hash(Hash value) {
    this.wasm_hash = value;
  }

  public static final class Builder {
    private ContractExecutableType discriminant;
    private Hash wasm_hash;

    public Builder discriminant(ContractExecutableType discriminant) {
      this.discriminant = discriminant;
      return this;
    }

    public Builder wasm_hash(Hash wasm_hash) {
      this.wasm_hash = wasm_hash;
      return this;
    }

    public ContractExecutable build() {
      ContractExecutable val = new ContractExecutable();
      val.setDiscriminant(discriminant);
      val.setWasm_hash(this.wasm_hash);
      return val;
    }
  }

  public static void encode(
      XdrDataOutputStream stream, ContractExecutable encodedContractExecutable) throws IOException {
    // Xdrgen::AST::Identifier
    // ContractExecutableType
    stream.writeInt(encodedContractExecutable.getDiscriminant().getValue());
    switch (encodedContractExecutable.getDiscriminant()) {
      case CONTRACT_EXECUTABLE_WASM:
        Hash.encode(stream, encodedContractExecutable.wasm_hash);
        break;
      case CONTRACT_EXECUTABLE_TOKEN:
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static ContractExecutable decode(XdrDataInputStream stream) throws IOException {
    ContractExecutable decodedContractExecutable = new ContractExecutable();
    ContractExecutableType discriminant = ContractExecutableType.decode(stream);
    decodedContractExecutable.setDiscriminant(discriminant);
    switch (decodedContractExecutable.getDiscriminant()) {
      case CONTRACT_EXECUTABLE_WASM:
        decodedContractExecutable.wasm_hash = Hash.decode(stream);
        break;
      case CONTRACT_EXECUTABLE_TOKEN:
        break;
    }
    return decodedContractExecutable;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.wasm_hash, this.type);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof ContractExecutable)) {
      return false;
    }

    ContractExecutable other = (ContractExecutable) object;
    return Objects.equals(this.wasm_hash, other.wasm_hash) && Objects.equals(this.type, other.type);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static ContractExecutable fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ContractExecutable fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
