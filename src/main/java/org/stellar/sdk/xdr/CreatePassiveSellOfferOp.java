// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * CreatePassiveSellOfferOp's original definition in the XDR file is:
 *
 * <pre>
 * struct CreatePassiveSellOfferOp
 * {
 *     Asset selling; // A
 *     Asset buying;  // B
 *     int64 amount;  // amount taker gets
 *     Price price;   // cost of A in terms of B
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class CreatePassiveSellOfferOp implements XdrElement {
  private Asset selling;
  private Asset buying;
  private Int64 amount;
  private Price price;

  public void encode(XdrDataOutputStream stream) throws IOException {
    selling.encode(stream);
    buying.encode(stream);
    amount.encode(stream);
    price.encode(stream);
  }

  public static CreatePassiveSellOfferOp decode(XdrDataInputStream stream) throws IOException {
    CreatePassiveSellOfferOp decodedCreatePassiveSellOfferOp = new CreatePassiveSellOfferOp();
    decodedCreatePassiveSellOfferOp.selling = Asset.decode(stream);
    decodedCreatePassiveSellOfferOp.buying = Asset.decode(stream);
    decodedCreatePassiveSellOfferOp.amount = Int64.decode(stream);
    decodedCreatePassiveSellOfferOp.price = Price.decode(stream);
    return decodedCreatePassiveSellOfferOp;
  }

  public static CreatePassiveSellOfferOp fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static CreatePassiveSellOfferOp fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
