// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.IOException;

// === xdr source ============================================================

//  enum InvokeHostFunctionResultCode
//  {
//      // codes considered as "success" for the operation
//      INVOKE_HOST_FUNCTION_SUCCESS = 0,
//
//      // codes considered as "failure" for the operation
//      INVOKE_HOST_FUNCTION_MALFORMED = -1,
//      INVOKE_HOST_FUNCTION_TRAPPED = -2,
//      INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED = -3,
//      INVOKE_HOST_FUNCTION_ENTRY_EXPIRED = -4
//  };

//  ===========================================================================
public enum InvokeHostFunctionResultCode implements XdrElement {
  INVOKE_HOST_FUNCTION_SUCCESS(0),
  INVOKE_HOST_FUNCTION_MALFORMED(-1),
  INVOKE_HOST_FUNCTION_TRAPPED(-2),
  INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED(-3),
  INVOKE_HOST_FUNCTION_ENTRY_EXPIRED(-4),
  ;
  private int mValue;

  InvokeHostFunctionResultCode(int value) {
    mValue = value;
  }

  public int getValue() {
    return mValue;
  }

  public static InvokeHostFunctionResultCode decode(XdrDataInputStream stream) throws IOException {
    int value = stream.readInt();
    switch (value) {
      case 0:
        return INVOKE_HOST_FUNCTION_SUCCESS;
      case -1:
        return INVOKE_HOST_FUNCTION_MALFORMED;
      case -2:
        return INVOKE_HOST_FUNCTION_TRAPPED;
      case -3:
        return INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED;
      case -4:
        return INVOKE_HOST_FUNCTION_ENTRY_EXPIRED;
      default:
        throw new RuntimeException("Unknown enum value: " + value);
    }
  }

  public static void encode(XdrDataOutputStream stream, InvokeHostFunctionResultCode value)
      throws IOException {
    stream.writeInt(value.getValue());
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }
}
