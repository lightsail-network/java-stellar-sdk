// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import org.stellar.sdk.Base64Factory;

/**
 * InvokeHostFunctionResultCode's original definition in the XDR file is:
 *
 * <pre>
 * enum InvokeHostFunctionResultCode
 * {
 *     // codes considered as "success" for the operation
 *     INVOKE_HOST_FUNCTION_SUCCESS = 0,
 *
 *     // codes considered as "failure" for the operation
 *     INVOKE_HOST_FUNCTION_MALFORMED = -1,
 *     INVOKE_HOST_FUNCTION_TRAPPED = -2,
 *     INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED = -3,
 *     INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED = -4,
 *     INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE = -5
 * };
 * </pre>
 */
public enum InvokeHostFunctionResultCode implements XdrElement {
  INVOKE_HOST_FUNCTION_SUCCESS(0),
  INVOKE_HOST_FUNCTION_MALFORMED(-1),
  INVOKE_HOST_FUNCTION_TRAPPED(-2),
  INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED(-3),
  INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED(-4),
  INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE(-5);

  private final int value;

  InvokeHostFunctionResultCode(int value) {
    this.value = value;
  }

  public int getValue() {
    return value;
  }

  public static InvokeHostFunctionResultCode decode(XdrDataInputStream stream) throws IOException {
    int value = stream.readInt();
    switch (value) {
      case 0:
        return INVOKE_HOST_FUNCTION_SUCCESS;
      case -1:
        return INVOKE_HOST_FUNCTION_MALFORMED;
      case -2:
        return INVOKE_HOST_FUNCTION_TRAPPED;
      case -3:
        return INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED;
      case -4:
        return INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED;
      case -5:
        return INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE;
      default:
        throw new RuntimeException("Unknown enum value: " + value);
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    stream.writeInt(value);
  }

  public static InvokeHostFunctionResultCode fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static InvokeHostFunctionResultCode fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
