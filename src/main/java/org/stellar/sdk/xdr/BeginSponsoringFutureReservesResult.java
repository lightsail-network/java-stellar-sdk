// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.stellar.sdk.Base64Factory;

/**
 * BeginSponsoringFutureReservesResult's original definition in the XDR file is:
 *
 * <pre>
 * union BeginSponsoringFutureReservesResult switch (
 *     BeginSponsoringFutureReservesResultCode code)
 * {
 * case BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS:
 *     void;
 * case BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED:
 * case BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED:
 * case BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE:
 *     void;
 * };
 * </pre>
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder(toBuilder = true)
public class BeginSponsoringFutureReservesResult implements XdrElement {
  private BeginSponsoringFutureReservesResultCode discriminant;

  public static void encode(
      XdrDataOutputStream stream,
      BeginSponsoringFutureReservesResult encodedBeginSponsoringFutureReservesResult)
      throws IOException {
    // Xdrgen::AST::Identifier
    // BeginSponsoringFutureReservesResultCode
    stream.writeInt(encodedBeginSponsoringFutureReservesResult.getDiscriminant().getValue());
    switch (encodedBeginSponsoringFutureReservesResult.getDiscriminant()) {
      case BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS:
        break;
      case BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED:
      case BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED:
      case BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE:
        break;
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static BeginSponsoringFutureReservesResult decode(XdrDataInputStream stream)
      throws IOException {
    BeginSponsoringFutureReservesResult decodedBeginSponsoringFutureReservesResult =
        new BeginSponsoringFutureReservesResult();
    BeginSponsoringFutureReservesResultCode discriminant =
        BeginSponsoringFutureReservesResultCode.decode(stream);
    decodedBeginSponsoringFutureReservesResult.setDiscriminant(discriminant);
    switch (decodedBeginSponsoringFutureReservesResult.getDiscriminant()) {
      case BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS:
        break;
      case BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED:
      case BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED:
      case BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE:
        break;
    }
    return decodedBeginSponsoringFutureReservesResult;
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static BeginSponsoringFutureReservesResult fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static BeginSponsoringFutureReservesResult fromXdrByteArray(byte[] xdr)
      throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
