// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Objects;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  struct LedgerCloseValueSignature
//  {
//      NodeID nodeID;       // which node introduced the value
//      Signature signature; // nodeID's signature
//  };

//  ===========================================================================
public class LedgerCloseValueSignature implements XdrElement {
  public LedgerCloseValueSignature() {}

  private NodeID nodeID;

  public NodeID getNodeID() {
    return this.nodeID;
  }

  public void setNodeID(NodeID value) {
    this.nodeID = value;
  }

  private Signature signature;

  public Signature getSignature() {
    return this.signature;
  }

  public void setSignature(Signature value) {
    this.signature = value;
  }

  public static void encode(
      XdrDataOutputStream stream, LedgerCloseValueSignature encodedLedgerCloseValueSignature)
      throws IOException {
    NodeID.encode(stream, encodedLedgerCloseValueSignature.nodeID);
    Signature.encode(stream, encodedLedgerCloseValueSignature.signature);
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static LedgerCloseValueSignature decode(XdrDataInputStream stream) throws IOException {
    LedgerCloseValueSignature decodedLedgerCloseValueSignature = new LedgerCloseValueSignature();
    decodedLedgerCloseValueSignature.nodeID = NodeID.decode(stream);
    decodedLedgerCloseValueSignature.signature = Signature.decode(stream);
    return decodedLedgerCloseValueSignature;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.nodeID, this.signature);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof LedgerCloseValueSignature)) {
      return false;
    }

    LedgerCloseValueSignature other = (LedgerCloseValueSignature) object;
    return Objects.equals(this.nodeID, other.nodeID)
        && Objects.equals(this.signature, other.signature);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static LedgerCloseValueSignature fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static LedgerCloseValueSignature fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }

  public static final class Builder {
    private NodeID nodeID;
    private Signature signature;

    public Builder nodeID(NodeID nodeID) {
      this.nodeID = nodeID;
      return this;
    }

    public Builder signature(Signature signature) {
      this.signature = signature;
      return this;
    }

    public LedgerCloseValueSignature build() {
      LedgerCloseValueSignature val = new LedgerCloseValueSignature();
      val.setNodeID(this.nodeID);
      val.setSignature(this.signature);
      return val;
    }
  }
}
