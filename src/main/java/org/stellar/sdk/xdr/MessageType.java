// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  enum MessageType
//  {
//      ERROR_MSG = 0,
//      AUTH = 2,
//      DONT_HAVE = 3,
//
//      GET_PEERS = 4, // gets a list of peers this guy knows about
//      PEERS = 5,
//
//      GET_TX_SET = 6, // gets a particular txset by hash
//      TX_SET = 7,
//      GENERALIZED_TX_SET = 17,
//
//      TRANSACTION = 8, // pass on a tx you have heard about
//
//      // SCP
//      GET_SCP_QUORUMSET = 9,
//      SCP_QUORUMSET = 10,
//      SCP_MESSAGE = 11,
//      GET_SCP_STATE = 12,
//
//      // new messages
//      HELLO = 13,
//
//      SURVEY_REQUEST = 14,
//      SURVEY_RESPONSE = 15,
//
//      SEND_MORE = 16,
//      SEND_MORE_EXTENDED = 20,
//
//      FLOOD_ADVERT = 18,
//      FLOOD_DEMAND = 19
//  };

//  ===========================================================================
public enum MessageType implements XdrElement {
  ERROR_MSG(0),
  AUTH(2),
  DONT_HAVE(3),
  GET_PEERS(4),
  PEERS(5),
  GET_TX_SET(6),
  TX_SET(7),
  GENERALIZED_TX_SET(17),
  TRANSACTION(8),
  GET_SCP_QUORUMSET(9),
  SCP_QUORUMSET(10),
  SCP_MESSAGE(11),
  GET_SCP_STATE(12),
  HELLO(13),
  SURVEY_REQUEST(14),
  SURVEY_RESPONSE(15),
  SEND_MORE(16),
  SEND_MORE_EXTENDED(20),
  FLOOD_ADVERT(18),
  FLOOD_DEMAND(19),
  ;
  private int mValue;

  MessageType(int value) {
    mValue = value;
  }

  public int getValue() {
    return mValue;
  }

  public static MessageType decode(XdrDataInputStream stream) throws IOException {
    int value = stream.readInt();
    switch (value) {
      case 0:
        return ERROR_MSG;
      case 2:
        return AUTH;
      case 3:
        return DONT_HAVE;
      case 4:
        return GET_PEERS;
      case 5:
        return PEERS;
      case 6:
        return GET_TX_SET;
      case 7:
        return TX_SET;
      case 17:
        return GENERALIZED_TX_SET;
      case 8:
        return TRANSACTION;
      case 9:
        return GET_SCP_QUORUMSET;
      case 10:
        return SCP_QUORUMSET;
      case 11:
        return SCP_MESSAGE;
      case 12:
        return GET_SCP_STATE;
      case 13:
        return HELLO;
      case 14:
        return SURVEY_REQUEST;
      case 15:
        return SURVEY_RESPONSE;
      case 16:
        return SEND_MORE;
      case 20:
        return SEND_MORE_EXTENDED;
      case 18:
        return FLOOD_ADVERT;
      case 19:
        return FLOOD_DEMAND;
      default:
        throw new RuntimeException("Unknown enum value: " + value);
    }
  }

  public static void encode(XdrDataOutputStream stream, MessageType value) throws IOException {
    stream.writeInt(value.getValue());
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static MessageType fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static MessageType fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
