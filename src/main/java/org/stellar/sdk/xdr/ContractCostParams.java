// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package org.stellar.sdk.xdr;

import static org.stellar.sdk.xdr.Constants.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import org.stellar.sdk.Base64Factory;

// === xdr source ============================================================

//  typedef ContractCostParamEntry ContractCostParams<CONTRACT_COST_COUNT_LIMIT>;

//  ===========================================================================
public class ContractCostParams implements XdrElement {
  private ContractCostParamEntry[] ContractCostParams;

  public ContractCostParams() {}

  public ContractCostParams(ContractCostParamEntry[] ContractCostParams) {
    this.ContractCostParams = ContractCostParams;
  }

  public ContractCostParamEntry[] getContractCostParams() {
    return this.ContractCostParams;
  }

  public void setContractCostParams(ContractCostParamEntry[] value) {
    this.ContractCostParams = value;
  }

  public static void encode(
      XdrDataOutputStream stream, ContractCostParams encodedContractCostParams) throws IOException {
    int ContractCostParamssize = encodedContractCostParams.getContractCostParams().length;
    stream.writeInt(ContractCostParamssize);
    for (int i = 0; i < ContractCostParamssize; i++) {
      ContractCostParamEntry.encode(stream, encodedContractCostParams.ContractCostParams[i]);
    }
  }

  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }

  public static ContractCostParams decode(XdrDataInputStream stream) throws IOException {
    ContractCostParams decodedContractCostParams = new ContractCostParams();
    int ContractCostParamssize = stream.readInt();
    decodedContractCostParams.ContractCostParams =
        new ContractCostParamEntry[ContractCostParamssize];
    for (int i = 0; i < ContractCostParamssize; i++) {
      decodedContractCostParams.ContractCostParams[i] = ContractCostParamEntry.decode(stream);
    }
    return decodedContractCostParams;
  }

  @Override
  public int hashCode() {
    return Arrays.hashCode(this.ContractCostParams);
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof ContractCostParams)) {
      return false;
    }

    ContractCostParams other = (ContractCostParams) object;
    return Arrays.equals(this.ContractCostParams, other.ContractCostParams);
  }

  @Override
  public String toXdrBase64() throws IOException {
    return Base64Factory.getInstance().encodeToString(toXdrByteArray());
  }

  @Override
  public byte[] toXdrByteArray() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    XdrDataOutputStream xdrDataOutputStream = new XdrDataOutputStream(byteArrayOutputStream);
    encode(xdrDataOutputStream);
    return byteArrayOutputStream.toByteArray();
  }

  public static ContractCostParams fromXdrBase64(String xdr) throws IOException {
    byte[] bytes = Base64Factory.getInstance().decode(xdr);
    return fromXdrByteArray(bytes);
  }

  public static ContractCostParams fromXdrByteArray(byte[] xdr) throws IOException {
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xdr);
    XdrDataInputStream xdrDataInputStream = new XdrDataInputStream(byteArrayInputStream);
    return decode(xdrDataInputStream);
  }
}
