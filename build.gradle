import org.gradle.internal.os.OperatingSystem

buildscript {
    ext.okhttpclientVersion = '4.11.0'
}

plugins {
    id "io.freefair.lombok" version "6.4.1"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "java"
    id "com.github.ben-manes.versions" version "0.42.0"
    id "project-report"
    id "maven-publish"
    id "java-library"
    id "com.diffplug.spotless" version "6.19.0"
}

spotless {
    java {
        importOrder("java", "javax", "org.stellar")
        removeUnusedImports()
        googleJavaFormat()
    }
}


sourceCompatibility = JavaVersion.VERSION_1_8.toString()
version = '0.41.0-beta.4'
group = 'stellar'
jar.enabled = false

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'


shadowJar {
    manifest {
        attributes(
                "Implementation-Title": "stellar-sdk",
                "Implementation-Version": project.getVersion()
        )
    }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    archiveClassifier.set('')
    archiveFileName.set('stellar-sdk.jar')
    relocate('com.', 'shadow.com.') {
        // okhttp hardcodes android platform class loading to this package, shadowing would attempt to rewrite the hardcode
        // to be 'shadow.com.android.org.conscrypt' which we don't want to happen.
        exclude 'com.android.org.conscrypt'
    }
    relocate 'net.', 'shadow.net.'
    relocate 'javax.annotation', 'shadow.javax.annotation'
    relocate 'org.apache', 'shadow.org.apache'
    relocate 'org.jvnet', 'shadow.org.jvnet'
    relocate 'org.codehaus', 'shadow.org.codehaus'
    relocate 'org.threeten', 'shadow.org.threeten'
    relocate 'org.checkerframework', 'shadow.org.checkerframework'
    relocate 'okhttp3', 'shadow.okhttp3'
    relocate 'okio', 'shadow.okio'
    relocate 'kotlin', 'shadow.kotlin'
    relocate 'org.intellij', 'shadow.org.intellij'
    relocate 'org.jetbrains', 'shadow.org.jetbrains'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.squareup.okhttp3:okhttp:${okhttpclientVersion}"
    implementation "com.squareup.okhttp3:okhttp-sse:${okhttpclientVersion}"
    implementation 'com.moandjiezana.toml:toml4j:0.7.2'
    // use the android version because we don't want java 8 stuff
    // TODO: Do we really need to introduce guava?
    implementation 'com.google.guava:guava:32.1.2-android'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'net.i2p.crypto:eddsa:0.3.0'

    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpclientVersion}"
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.10.0'
}

tasks.named('test') { task ->
    useJUnitPlatform()
}

tasks.register('updateGitHook', Copy) {
    from 'scripts/pre-commit.sh'
    into '.git/hooks'
    rename { fileName ->
        fileName.endsWith('.sh') ? fileName[0..-4] : fileName
    }
}

tasks.javadoc {
    destinationDir = file('javadoc')
    failOnError = true
    exclude("org/stellar/sdk/xdr/**")
    // cast options to StandardJavadocDocletOptions
    // https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html
    StandardJavadocDocletOptions options = options as StandardJavadocDocletOptions
    options.setSplitIndex(true)
    options.setMemberLevel(JavadocMemberLevel.PUBLIC)
    options.setEncoding('UTF-8')
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    archiveFileName.set('stellar-sdk-javadoc.jar')
}

publishing {
    publications {
        sdkLibrary(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
        javadocPublication(MavenPublication) { publication ->
            artifact tasks.javadocJar
        }
    }
}